
===== File: /src/app/auth/page.tsx =====
// src/app/auth/page.tsx
'use client';

 
import { Layout, Typography, Button } from 'antd';
import Link from 'next/link';

const { Title } = Typography;
const { Content  } = Layout

const LoginPage = () => {
    return (
        <Layout style={{ minHeight: '100vh' }}>
           
            <Content style={{ padding: '0 50px', marginTop: 64, textAlign: 'center' }}>
                <Title level={2}>Who Are You?</Title>
                <div style={{ marginTop: 32 }}>
                    <Link href="/auth/staff/login">
                        <Button type="primary" size="large" style={{ marginRight: 16 }}>
                            Staff  
                        </Button>
                    </Link>
                    <Link href="/auth/patient/login">
                        <Button type="primary" size="large">
                            Patient  
                        </Button>
                    </Link>
                </div>
            </Content>
           
        </Layout>
    );
};

export default LoginPage;

===== File: /src/app/auth/password-reset/page.tsx =====
//auth/password-reset/page.tsx
'use client';

import React from 'react';
 
import PasswordResetForm from '@/components/Auth/PasswordResetForm';

const PasswordResetPage = () => {
  return (
   
      <PasswordResetForm />
    
  );
};

export default PasswordResetPage;

===== File: /src/app/auth/patient/login/page.tsx =====
// src/app/auth/patient/login/page.tsx
'use client';
import PatientLoginForm from '@/components/Auth/PatientLoginForm';

import { Layout } from 'antd';

const { Content } = Layout;

const PatientLoginPage = () => (
    <Layout style={{ minHeight: '100vh' }}>
      
        <Content style={{ padding: '0 50px', marginTop: 64 }}>
            <PatientLoginForm />
        </Content>
     
    </Layout>
);

export default PatientLoginPage;

===== File: /src/app/auth/patient/register/page.tsx =====
// src/app/auth/patient/register/page.tsx
'use client';
import PatientRegisterForm from '@/components/Auth/PatientRegisterForm';

import { Layout } from 'antd';

const { Content } = Layout;

const PatientRegisterPage = () => (
  <Layout style={{ minHeight: '100vh' }}>
    
    <Content style={{ padding: '0 50px', marginTop: 64 }}>
      <PatientRegisterForm />
    </Content>
    
  </Layout>
);

export default PatientRegisterPage;

===== File: /src/app/auth/profile/page.tsx =====
//auth/profile/page.tsx
'use client';

import React from 'react';
import ProfileViewForm from '@/components/Auth/ProfileViewForm';

const ProfileViewPage = () => {
    return (
            <ProfileViewForm />
    );
};

export default ProfileViewPage;

===== File: /src/app/auth/staff/login/page.tsx =====
// src/app/auth/staff/login/page.tsx
'use client';
import StaffLoginForm from '@/components/Auth/StaffLoginForm';
import { Layout } from 'antd';

const { Content } = Layout;

const StaffLoginPage = () => (
    <Layout style={{ minHeight: '100vh' }}>
      
        <Content style={{ padding: '0 50px', marginTop: 64 }}>
            <StaffLoginForm />
        </Content>
       
    </Layout>
);

export default StaffLoginPage;

===== File: /src/app/auth/staff/register/admin/page.tsx =====
// src/app/auth/staff/register/admin/page.tsx
'use client';

import AdminRegisterForm from '@/components/Auth/AdminRegisterForm';
import { Layout } from 'antd';

const { Content } = Layout;

const AdminRegisterPage = () => (
  <Layout style={{ minHeight: '100vh' }}>

    <Content style={{ padding: '0 50px', marginTop: 64 }}>
      <AdminRegisterForm />
    </Content>

  </Layout>
);

export default AdminRegisterPage;

===== File: /src/app/dashboard/patient/appointment/page.tsx =====
// src/app/dashboard/patient/appointment/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import PatientDashboardLayout from '@/components/Layout/PatientDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import AppointmentList from '@/components/Appointment/AppointmentList';
import AppointmentCreateForm from '@/components/Appointment/AppointmentCreateForm';
import AppointmentEditForm from '@/components/Appointment/AppointmentEditForm';
import AppointmentView from '@/components/Appointment/AppointmentView';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';

const { Title } = Typography;

const PatientAppointmentManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

 
    const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType?.toLowerCase() !== "patient" )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };


    const handleView = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsViewModalVisible(true);
    };

    const handleEdit = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsEditModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };
   
  

    return (
        <>
            {contextHolder}
            <PatientDashboardLayout >
                <Title level={3}>Appointment Management</Title>
                <p>Manage Appointments here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Appointment
                </Button>
                <AppointmentList
                    onEdit={handleEdit}
                    onView={handleView}
                 
                />
                <Modal
                    title="Create Appointment"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <AppointmentCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Appointment"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentEditForm
                            appointment={selectedAppointment}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Appointment"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentView appointment={selectedAppointment} />
                    )}
                </Modal>
               
            </PatientDashboardLayout>
        </>
    );
};

export default PatientAppointmentManagementPage;

===== File: /src/app/dashboard/patient/medical-record/page.tsx =====
// src/app/dashboard/Patient/medical-record/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Modal } from 'antd';
import PatientDashboardLayout from '@/components/Layout/PatientDashboardLayout';
import MedicalRecordList from '@/components/MedicalRecord/MedicalRecordList';
import MedicalRecordView from '@/components/MedicalRecord/MedicalRecordView';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';

const { Title } = Typography;

const PatientMedicalRecordManagementPage = () => {
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [selectedMedicalRecord, setSelectedMedicalRecord] = useState<MedicalRecord | null>(null);

    

    const handleView = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsViewModalVisible(true);
    };


    return (
        <PatientDashboardLayout >
            <Title level={3}>Medical Record Management</Title>
            <p>Manage medical records here.</p>

            <MedicalRecordList onView={handleView}   />
              <Modal
                title="View Medical Record"
                open={isViewModalVisible}
                onCancel={() => setIsViewModalVisible(false)}
                footer={null}
              >
                  {selectedMedicalRecord && (
                      <MedicalRecordView record={selectedMedicalRecord} />
                  )}
              </Modal>
        </PatientDashboardLayout>
    );
};

export default PatientMedicalRecordManagementPage;

===== File: /src/app/dashboard/patient/my-notification/page.tsx =====
// src/app/dashboard/staff/super-admin/notifications/page.tsx
'use client';

import React from 'react';
import { Typography } from 'antd';
import PatientDashboardLayout from '@/components/Layout/PatientDashboardLayout';
import MyNotificationList from '@/components/Notification/MyNotificationList'; // Import the MyNotificationList component

const { Title } = Typography;

const PatientMyNotificationsPage = () => {
    return (
        <PatientDashboardLayout  >
            <Title level={3}>My Notifications</Title>
            <p>View your notifications here.</p>
            <MyNotificationList/>  {/* Use the MyNotificationList component */}
        </PatientDashboardLayout>
    );
};

export default PatientMyNotificationsPage;

===== File: /src/app/dashboard/patient/page.tsx =====
// src/app/dashboard/patient/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Card, List, Avatar, Button, message } from 'antd';
import {
    UserOutlined,
    CalendarOutlined,
    FileTextOutlined,
    NotificationOutlined
} from '@ant-design/icons';
import DashboardLayout from '@/components/Layout/PatientDashboardLayout'; // Assuming you have a custom layout
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import { formatDate } from '@/utils/dateUtils';

//RTK Query imports:
import { useGetMyNotificationsQuery, Notification } from '@/services/notification/notificationSliceAPI';
import { useGetMedicalRecordsQuery, MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI'; // Assuming you have a MedicalRecord type
import { useGetAppointmentsQuery, Appointment } from '@/services/appointment/appointmentSliceAPI';

const { Title, Text } = Typography;

const PatientDashboard = () => {
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();
    const [messageApi, contextHolder] = message.useMessage();

    // RTK Query calls:
    const { data: notificationsData, isLoading: isNotificationsLoading, isError: isNotificationsError, error: notificationsError } = useGetMyNotificationsQuery({});
    const { data: medicalRecordsData, isLoading: isMedicalRecordsLoading, isError: isMedicalRecordsError, error: medicalRecordsError } = useGetMedicalRecordsQuery({limit:5}); // Adjust limit as needed, added a limit
    const { data: appointmentsData, isLoading: isAppointmentsLoading, isError: isAppointmentsError, error: appointmentsError } = useGetAppointmentsQuery({limit:5}); // Adjust limit as needed, added a limit

     useEffect(() => {
        if (!user || user.userType !== "Patient") {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth'); // Redirect to login or unauthorized page
        }
    }, [user, router]);

    if (!user || user.userType !== "Patient") {
        return null; // Or an unauthorized component
    }

    return (
        <>
            {contextHolder}
            <DashboardLayout>
                <Title level={3}>Patient Dashboard</Title>
                <Text>Welcome, {user.firstName} {user.lastName}!</Text>

                <Card
                    title={<><NotificationOutlined /> Recent Notifications</>}
                    style={{ marginTop: 16 }}
                    loading={isNotificationsLoading}
                >
                    {isNotificationsError ? (
                        <Text type="danger">Error loading notifications: { (notificationsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                    ) : (
                        <List
                            itemLayout="horizontal"
                            dataSource={notificationsData?.notifications || []}
                            renderItem={(item: Notification) => (
                                <List.Item>
                                    <List.Item.Meta
                                        avatar={<Avatar icon={<NotificationOutlined />} />}
                                        title={<Text>{item.message}</Text>}
                                        description={<Text type="secondary">{formatDate(item.createdAt)}</Text>}
                                    />
                                </List.Item>
                            )}
                        />
                    )}
                    <Button type="link" href="/dashboard/patient/my-notification">View All Notifications</Button>
                </Card>

                <Card
                    title={<><FileTextOutlined /> Medical Records</>}
                    style={{ marginTop: 16 }}
                    loading={isMedicalRecordsLoading}
                >
                    {isMedicalRecordsError ? (
                        <Text type="danger">Error loading medical records:  { (medicalRecordsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                    ) : (
                        <List
                            itemLayout="horizontal"
                            dataSource={medicalRecordsData?.records || []}
                            renderItem={(item: MedicalRecord) => (
                                <List.Item>
                                    <List.Item.Meta
                                        avatar={<Avatar icon={<FileTextOutlined />} />}
                                        title={<Text>Visit Date: {formatDate(item.visitDate)}</Text>}
                                        description={<Text>{item.diagnosis}</Text>}
                                    />
                                </List.Item>
                            )}
                        />
                    )}
                    <Button type="link" href="/dashboard/patient/medical-record">View All Medical Records</Button>
                </Card>

                <Card
                    title={<><CalendarOutlined /> Upcoming Appointments</>}
                    style={{ marginTop: 16 }}
                    loading={isAppointmentsLoading}
                >
                    {isAppointmentsError ? (
                        <Text type="danger">Error loading appointments: { (appointmentsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                    ) : (
                        <List
                            itemLayout="horizontal"
                            dataSource={appointmentsData?.appointments || []}
                            renderItem={(item: Appointment) => (
                                <List.Item>
                                    <List.Item.Meta
                                        avatar={<Avatar icon={<CalendarOutlined />} />}
                                        title={<Text>Date: {formatDate(item.date)}</Text>}
                                        description={<Text>Doctor: {item.doctor.firstName} {item.doctor.lastName}</Text>}
                                    />
                                </List.Item>
                            )}
                        />
                    )}
                    <Button type="link" href="/dashboard/patient/appointment">View All Appointments</Button>
                </Card>
            </DashboardLayout>
        </>
    );
};

export default PatientDashboard;

===== File: /src/app/dashboard/staff/admin/appointment/page.tsx =====
// src/app/dashboard/staff/admin/appointment/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import AppointmentList from '@/components/Appointment/AppointmentList';
import AppointmentCreateForm from '@/components/Appointment/AppointmentCreateForm';
import AppointmentEditForm from '@/components/Appointment/AppointmentEditForm';
import AppointmentView from '@/components/Appointment/AppointmentView';
import AppointmentDelete from '@/components/Appointment/AppointmentDelete';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';

const { Title } = Typography;

const AdminAppointmentManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "admin" )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };


    const handleView = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsViewModalVisible(true);
    };

    const handleEdit = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsEditModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };
 

    return (
        <>
            {contextHolder}
            <AdminDashboardLayout  >
                <Title level={3}>Appointment Management</Title>
                <p>Manage Appointments here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Appointment
                </Button>
                <AppointmentList
                    onEdit={handleEdit}
                    onView={handleView}
                
                />
                <Modal
                    title="Create Appointment"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <AppointmentCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Appointment"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentEditForm
                            appointment={selectedAppointment}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Appointment"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentView appointment={selectedAppointment} />
                    )}
                </Modal>
              
            </AdminDashboardLayout>
        </>
    );
};

export default AdminAppointmentManagementPage;

===== File: /src/app/dashboard/staff/admin/department/page.tsx =====
// src/app/dashboard/staff/admin/department/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import DepartmentList from '@/components/Department/DepartmentList';
import DepartmentView from '@/components/Department/DepartmentView';
import { Department } from '@/services/department/departmentSliceAPI';

const { Title } = Typography;

const AdminDepartmentManagementPage = () => {
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

    const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "admin" )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

   

    const handleView = (department: Department) => {
        setSelectedDepartment(department);
        setIsViewModalVisible(true);
    };

    
   
   

    return (
        <>
            {contextHolder}
            <AdminDashboardLayout >
                <Title level={3}>Department Management</Title>
                <p>Manage departments here.</p>

              
                <DepartmentList
                    
                    onView={handleView}
                   
                />
          
                
                <Modal
                    title="View Department"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedDepartment && (
                        <DepartmentView department={selectedDepartment} />
                    )}
                </Modal>
             
            </AdminDashboardLayout>
        </>
    );
};

export default AdminDepartmentManagementPage;

===== File: /src/app/dashboard/staff/admin/notification/my-notification/page.tsx =====
// src/app/dashboard/staff/super-admin/notifications/page.tsx
'use client';

import React from 'react';
import { Typography } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import MyNotificationList from '@/components/Notification/MyNotificationList'; // Import the MyNotificationList component

const { Title } = Typography;

const AdminMyNotificationsPage = () => {
    return (
        <AdminDashboardLayout  >
            <Title level={3}>My Notifications</Title>
            <p>View your notifications here.</p>
            <MyNotificationList/>  {/* Use the MyNotificationList component */}
        </AdminDashboardLayout>
    );
};

export default AdminMyNotificationsPage;

===== File: /src/app/dashboard/staff/admin/page.tsx =====
// src/app/dashboard/staff/admin/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Card, Col, Row, Statistic, message, List, Avatar, Button } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Loader from '@/components/Layout/Loader';
import { NotificationOutlined } from '@ant-design/icons';

//RTK Queries imports:
import { useGetStaffQuery } from '@/services/staff/staffSliceAPI';
import { useGetPatientsQuery } from '@/services/patient/patientSliceAPI';
import { useGetDepartmentsQuery } from '@/services/department/departmentSliceAPI';
import { useGetMyNotificationsQuery, Notification } from '@/services/notification/notificationSliceAPI';
import { formatDate } from '@/utils/dateUtils';

const { Title, Paragraph, Text } = Typography;

const AdminDashboard = () => {
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();
    const [messageApi, contextHolder] = message.useMessage();

    //RTK Queries to fetch counts
    const { data: staffData, isLoading: isStaffLoading, isError: isStaffError, error: staffError } = useGetStaffQuery({});
    const { data: patientsData, isLoading: isPatientsLoading, isError: isPatientsError, error: patientsError } = useGetPatientsQuery({});
    const { data: departmentsData, isLoading: isDepartmentsLoading, isError: isDepartmentsError, error: departmentsError } = useGetDepartmentsQuery({});
    const { data: notificationsData, isLoading: isNotificationsLoading, isError: isNotificationsError, error: notificationsError } = useGetMyNotificationsQuery({ limit: 5 });

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    if (isStaffLoading || isPatientsLoading || isDepartmentsLoading || isNotificationsLoading) {
        return (
            <AdminDashboardLayout>
                {contextHolder}
                <Loader />
            </AdminDashboardLayout>
        );
    }

    if (isStaffError || isPatientsError || isDepartmentsError || isNotificationsError) {
        let errorMessage = "Error loading data.";
        if (isStaffError) errorMessage += ` Staff: ${ (staffError as any)?.data?.message || "Unknown"}`;
        if (isPatientsError) errorMessage += ` Patients: ${ (patientsError as any)?.data?.message || "Unknown"}`;
        if (isDepartmentsError) errorMessage += ` Departments: ${ (departmentsError as any)?.data?.message || "Unknown"}`;
        if (isNotificationsError) errorMessage += ` Notifications: ${ (notificationsError as any)?.data?.message || "Unknown"}`;

        return (
            <AdminDashboardLayout>
                {contextHolder}
                <Title level={4} type="danger">{errorMessage}</Title>
            </AdminDashboardLayout>
        );
    }

    const totalStaff = staffData?.totalStaff || 0;
    const totalPatients = patientsData?.totalPatients || 0;
    const totalDepartments = departmentsData?.totalDepartments || 0;

    return (
        <AdminDashboardLayout>
            {contextHolder}
            <Title level={3}>Admin Dashboard</Title>
            <Paragraph>Welcome, Admin! Here's an overview of the system:</Paragraph>

            <Row gutter={16}>
                <Col span={8}>
                    <Link href="/dashboard/staff/admin/staff">
                        <Card>
                            <Statistic
                                title="Total Staff"
                                value={totalStaff}
                            />
                        </Card>
                    </Link>
                </Col>
                <Col span={8}>
                    <Link href="/dashboard/staff/admin/patient">
                        <Card>
                            <Statistic
                                title="Total Patients"
                                value={totalPatients}
                            />
                        </Card>
                    </Link>
                </Col>
                <Col span={8}>
                    <Link href="/dashboard/staff/admin/department">
                        <Card>
                            <Statistic
                                title="Total Departments"
                                value={totalDepartments}
                            />
                        </Card>
                    </Link>
                </Col>
            </Row>

            <Card
                title={<><NotificationOutlined /> Recent Notifications</>}
                style={{ marginTop: 16 }}
                loading={isNotificationsLoading}
            >
                {isNotificationsError ? (
                    <Text type="danger">Error loading notifications:  { (notificationsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                ) : (
                    <List
                        itemLayout="horizontal"
                        dataSource={notificationsData?.notifications || []}
                        renderItem={(item: Notification) => (
                            <List.Item>
                                <List.Item.Meta
                                    avatar={<Avatar icon={<NotificationOutlined />} />}
                                    title={<Text>{item.message}</Text>}
                                    description={<Text type="secondary">{formatDate(item.createdAt)}</Text>}
                                />
                            </List.Item>
                        )}
                    />
                )}
                <Button type="link" href="/dashboard/staff/admin/notification/my-notification">View All Notifications</Button>
            </Card>
        </AdminDashboardLayout>
    );
};

export default AdminDashboard;

===== File: /src/app/dashboard/staff/admin/patient/page.tsx =====
// src/app/dashboard/staff/admin/patient/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

// Import Patient Components
import PatientList from '@/components/Patient/PatientList';
import PatientCreateForm from '@/components/Patient/PatientCreateForm';
import PatientEditForm from '@/components/Patient/PatientEditForm';
import PatientView from '@/components/Patient/PatientView';  
import { Patient } from '@/services/patient/types';

const { Title } = Typography;

const AdminPatientManagementPage = () => {
    const [isPatientCreateModalVisible, setIsPatientCreateModalVisible] = useState(false);
    const [isPatientEditModalVisible, setIsPatientEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "admin"  )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showPatientCreateModal = () => {
        setIsPatientCreateModalVisible(true);
    };

    const handlePatientCreateSuccess = () => {
        setIsPatientCreateModalVisible(false);
    };

    const handlePatientEdit = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsPatientEditModalVisible(true);
    };

    const handleView = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsViewModalVisible(true);
    };

    const handlePatientEditSuccess = () => {
        setIsPatientEditModalVisible(false);
        setSelectedPatient(null);
    };

    const handlePatientEditCancel = () => {
        setIsPatientEditModalVisible(false);
        setSelectedPatient(null);
    };

    
    
    return (
        <>
            {contextHolder}
            <AdminDashboardLayout  >
                <Title level={3}>Patient Management</Title>
                <p>Manage patients here.</p>

                <Button type="primary" onClick={showPatientCreateModal} style={{ marginBottom: 16 }}>
                    Create Patient
                </Button>
                <PatientList
                    onEdit={handlePatientEdit}
                    onView={handleView}
                    
                />
                <Modal
                    title="Create Patient"
                    open={isPatientCreateModalVisible}
                    onCancel={() => setIsPatientCreateModalVisible(false)}
                    footer={null}
                >
                    <PatientCreateForm onSuccess={handlePatientCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Patient"
                    open={isPatientEditModalVisible}
                    onCancel={handlePatientEditCancel}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientEditForm
                            patient={selectedPatient}
                            onSuccess={handlePatientEditSuccess}
                            onCancel={handlePatientEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Patient"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientView patient={selectedPatient} />
                    )}
                </Modal>
                
            </AdminDashboardLayout>
        </>
    );
};

export default AdminPatientManagementPage;

===== File: /src/app/dashboard/staff/admin/shift/my-shift/page.tsx =====
// src/app/dashboard/staff/super-admin/shift/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import MyShiftList from '@/components/Shift/MyShiftList';
import ShiftView from '@/components/Shift/ShiftView';
import { Shift } from '@/services/shift/shiftSliceAPI';
const { Title } = Typography;

const AdminShiftManagementPage = () => {
 
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);
 
    const handleView = (shift: Shift) => {
        setSelectedShift(shift);
        setIsViewModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <AdminDashboardLayout >
                <Title level={3}>My Shifts </Title>

                <MyShiftList
                    onView={handleView}
                />
                 
                <Modal
                    title="View Shift"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftView shift={selectedShift} />
                    )}
                </Modal>
            </AdminDashboardLayout>
        </>
    );
};

export default AdminShiftManagementPage;

===== File: /src/app/dashboard/staff/admin/shift/page.tsx =====
// src/app/dashboard/staff/admin/shift/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

import ShiftList from '@/components/Shift/ShiftList';
import ShiftCreateForm from '@/components/Shift/ShiftCreateForm';
import ShiftEditForm from '@/components/Shift/ShiftEditForm';
import ShiftView from '@/components/Shift/ShiftView';
import ShiftDelete from '@/components/Shift/ShiftDelete';
import { Shift } from '@/services/shift/shiftSliceAPI';

const { Title } = Typography;

const AdminShiftManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "admin" )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (shift: Shift) => {
        setSelectedShift(shift);
        setIsEditModalVisible(true);
    };

    const handleView = (shift: Shift) => {
        setSelectedShift(shift);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedShift(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedShift(null);
    };

   

    return (
        <>
            {contextHolder}
            <AdminDashboardLayout  >
                <Title level={3}>Shift Management</Title>
                <p>Manage Shifts here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Shift
                </Button>
                <ShiftList
                    onEdit={handleEdit}
                    onView={handleView}
                    
                />
                <Modal
                    title="Create Shift"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <ShiftCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Shift"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftEditForm
                            shift={selectedShift}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>

                <Modal
                    title="View Shift"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftView shift={selectedShift} />
                    )}
                </Modal>
 
            </AdminDashboardLayout>
        </>
    );
};

export default AdminShiftManagementPage;

===== File: /src/app/dashboard/staff/admin/staff/page.tsx =====
// src/app/dashboard/staff/admin/staff/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import StaffList from '@/components/Staff/StaffList';
import StaffCreateForm from '@/components/Staff/StaffCreateForm';
import StaffEditForm from '@/components/Staff/StaffEditForm';
import StaffView from '@/components/Staff/StaffView';
import StaffDelete from '@/components/Staff/StaffDelete';
import { Staff } from '@/services/staff/types';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

const { Title } = Typography;

const AdminStaffManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);  
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "admin"  )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleView = (staff: Staff) => {
        setSelectedStaff(staff);
        setIsViewModalVisible(true);
    };

    const handleEdit = (staff: Staff) => {
        setSelectedStaff(staff);
        setIsEditModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedStaff(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedStaff(null);
    };
  
 
 

    return (
        <>
            {contextHolder}
            <AdminDashboardLayout  >
                <Title level={3}>Staff Management</Title>
                <p>Manage Staff</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Staff
                </Button>
                <StaffList
                    onView={handleView}
                    onEdit={handleEdit}
                  
                />
                <Modal
                    title="Create Staff"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <StaffCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Staff"
                    open={isEditModalVisible}
                    onCancel={handleEditCancel}
                    footer={null}
                >
                    {selectedStaff && (
                        <StaffEditForm
                            staff={selectedStaff}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Staff"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedStaff && (
                        <StaffView staff={selectedStaff} />
                    )}
                </Modal>
                  
               
            </AdminDashboardLayout>
        </>
    );
};

export default AdminStaffManagementPage;

===== File: /src/app/dashboard/staff/admin/task/my-task/page.tsx =====
// src/app/dashboard/staff/super-admin/task/my-tasks/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Button, Modal } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import MyTaskList from "@/components/Task/MyTaskList"
import TaskView from "@/components/Task/TaskView";
import { Task } from '@/services/task/taskSliceAPI';
import TaskEditForm from '@/components/Task/TaskEditForm';
import TaskCreateForm from '@/components/Task/TaskCreateForm';
import TaskComplete from '@/components/Task/TaskComplete';
const { Title } = Typography;

const AdminMyTasksPage = () => {
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isCompleteModalVisible, setIsCompleteModalVisible] = useState(false);
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);

     const handleView = (task: Task) => {
            setSelectedTask(task);
            setIsViewModalVisible(true);
        };
        const showCreateModal = () => {
            setIsCreateModalVisible(true);
        };
    
        const handleCreateSuccess = () => {
            setIsCreateModalVisible(false);
        };
           const handleEdit = (task: Task) => {
                setSelectedTask(task);
                setIsEditModalVisible(true);
            };
            const handleEditSuccess = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };
        
            const handleEditCancel = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };

            const handleComplete = (task: Task) => {
                setSelectedTask(task);
                setIsCompleteModalVisible(true);
            };

            const handleCompleteSuccess = () => {
                setIsCompleteModalVisible(false);
                setSelectedTask(null);
            };
    return (
        <AdminDashboardLayout >
            <Title level={3}>My Tasks</Title>
            <p>View your assigned tasks here.</p>
            <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                            Create Task
            </Button>
            <MyTaskList 
              onComplete={handleComplete} 
              onView={handleView}
              onEdit={handleEdit}
              
            />  
             <Modal
                    title="Complete Task"
                    open={isCompleteModalVisible}
                    onCancel={() => setIsCompleteModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskComplete task={selectedTask} 
                        onSuccess={handleCompleteSuccess}
                        />
                    )}
                </Modal>
              <Modal
                    title="View Task"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskView task={selectedTask} />
                    )}
                </Modal>
                 <Modal
                                title="Create Task"
                                open={isCreateModalVisible}
                                onCancel={() => setIsCreateModalVisible(false)}
                                footer={null}
                            >
                                <TaskCreateForm onSuccess={handleCreateSuccess} />
                            </Modal>
                            <Modal
                                title="Edit Task"
                                open={isEditModalVisible}
                                onCancel={handleEditCancel}
                                footer={null}
                            >
                                {selectedTask && (
                                    <TaskEditForm
                                        task={selectedTask}
                                        onSuccess={handleEditSuccess}
                                        onCancel={handleEditCancel}
                                    />
                                )}
                            </Modal>
        </AdminDashboardLayout>
    );
};

export default AdminMyTasksPage;

===== File: /src/app/dashboard/staff/admin/task/page.tsx =====
// src/app/dashboard/staff/admin/task/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Button, Modal } from 'antd';
import AdminDashboardLayout from '@/components/Layout/AdminDashboardLayout';
import TaskList from '@/components/Task/TaskList';
import TaskCreateForm from '@/components/Task/TaskCreateForm';
import TaskEditForm from '@/components/Task/TaskEditForm';
import TaskView from "@/components/Task/TaskView";
import { Task } from '@/services/task/taskSliceAPI';

const { Title } = Typography;

const AdminTaskManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (task: Task) => {
        setSelectedTask(task);
        setIsEditModalVisible(true);
    };

    const handleView = (task: Task) => {
        setSelectedTask(task);
        setIsViewModalVisible(true);
    };
  

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedTask(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedTask(null);
    };
    

    return (
        <AdminDashboardLayout >
            <Title level={3}>Task Management</Title>
            <p>Manage tasks here.</p>

            <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                Create Task
            </Button>

            <TaskList
                onEdit={handleEdit}
                onView={handleView}
  
            />

            <Modal
                title="Create Task"
                open={isCreateModalVisible}
                onCancel={() => setIsCreateModalVisible(false)}
                footer={null}
            >
                <TaskCreateForm onSuccess={handleCreateSuccess} />
            </Modal>
            <Modal
                title="Edit Task"
                open={isEditModalVisible}
                onCancel={handleEditCancel}
                footer={null}
            >
                {selectedTask && (
                    <TaskEditForm
                        task={selectedTask}
                        onSuccess={handleEditSuccess}
                        onCancel={handleEditCancel}
                    />
                )}
            </Modal>
               <Modal
                    title="View Task"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskView task={selectedTask} />
                    )}
                </Modal>
                 
        </AdminDashboardLayout>
    );
};

export default AdminTaskManagementPage;

===== File: /src/app/dashboard/staff/doctor/appointment/page.tsx =====
// src/app/dashboard/staff/doctor/appointment/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Modal } from 'antd';
import DoctorDashboardLayout from '@/components/Layout/DoctorDashboardLayout';
import AppointmentList from '@/components/Appointment/AppointmentList';
import AppointmentEditForm from '@/components/Appointment/AppointmentEditForm';
import AppointmentView from '@/components/Appointment/AppointmentView';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';

const { Title } = Typography;

const DoctorAppointmentManagementPage = () => {
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);

    const handleEdit = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsEditModalVisible(true);
    };

    const handleView = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };

    return (
        <DoctorDashboardLayout >
            <Title level={3}>Appointment Management</Title>
            <p>View and Update your appointments here.</p>

            <AppointmentList
                onView={handleView}
                onEdit={handleEdit}
            />

            <Modal
                title="Edit Appointment"
                open={isEditModalVisible}
                onCancel={handleEditCancel}
                footer={null}
            >
                {selectedAppointment && (
                    <AppointmentEditForm
                        appointment={selectedAppointment}
                        onSuccess={handleEditSuccess}
                        onCancel={handleEditCancel}
                    />
                )}
            </Modal>
            <Modal
                title="View Appointment"
                open={isViewModalVisible}
                onCancel={() => setIsViewModalVisible(false)}
                footer={null}
            >
                {selectedAppointment && (
                    <AppointmentView appointment={selectedAppointment} />
                )}
            </Modal>

        </DoctorDashboardLayout>
    );
};

export default DoctorAppointmentManagementPage;

===== File: /src/app/dashboard/staff/doctor/medical-record/page.tsx =====
// src/app/dashboard/staff/doctor/medical-record/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Modal, Button } from 'antd';
import DoctorDashboardLayout from '@/components/Layout/DoctorDashboardLayout';
import MedicalRecordList from '@/components/MedicalRecord/MedicalRecordList';
import MedicalRecordCreateForm from '@/components/MedicalRecord/MedicalRecordCreateForm';
import MedicalRecordEditForm from '@/components/MedicalRecord/MedicalRecordEditForm';
import MedicalRecordView from '@/components/MedicalRecord/MedicalRecordView';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';

const { Title } = Typography;

const DoctorMedicalRecordManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [selectedMedicalRecord, setSelectedMedicalRecord] = useState<MedicalRecord | null>(null);

    const handleCreate = () => {
        setIsCreateModalVisible(true);
    };

    const handleEdit = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsEditModalVisible(true);
    };

    const handleView = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsViewModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    return (
        <DoctorDashboardLayout >
            <Title level={3}>Medical Record Management</Title>
            <p>Manage medical records here.</p>

            <Button type="primary" onClick={handleCreate} style={{ marginBottom: 16 }}>
                Create Medical Record
            </Button>

            <MedicalRecordList onView={handleView} onEdit={handleEdit} />

            <Modal
                title="Create Medical Record"
                open={isCreateModalVisible}
                onCancel={() => setIsCreateModalVisible(false)}
                footer={null}
            >
                <MedicalRecordCreateForm onSuccess={handleCreateSuccess} />
            </Modal>

            <Modal
                title="Edit Medical Record"
                open={isEditModalVisible}
                onCancel={handleEditCancel}
                footer={null}
            >
                {selectedMedicalRecord && (
                    <MedicalRecordEditForm
                        record={selectedMedicalRecord}
                        onSuccess={handleEditSuccess}
                        onCancel={handleEditCancel}
                    />
                )}
            </Modal>

              <Modal
                title="View Medical Record"
                open={isViewModalVisible}
                onCancel={() => setIsViewModalVisible(false)}
                footer={null}
              >
                  {selectedMedicalRecord && (
                      <MedicalRecordView record={selectedMedicalRecord} />
                  )}
              </Modal>
        </DoctorDashboardLayout>
    );
};

export default DoctorMedicalRecordManagementPage;

===== File: /src/app/dashboard/staff/doctor/notification/my-notification/page.tsx =====
// src/app/dashboard/staff/super-admin/notifications/page.tsx
'use client';

import React from 'react';
import { Typography } from 'antd';
import DoctorDashboardLayout from '@/components/Layout/DoctorDashboardLayout';
import MyNotificationList from '@/components/Notification/MyNotificationList'; // Import the MyNotificationList component

const { Title } = Typography;

const DoctorMyNotificationsPage = () => {
    return (
        <DoctorDashboardLayout >
            <Title level={3}>My Notifications</Title>
            <p>View your notifications here.</p>
            <MyNotificationList/>  
        </DoctorDashboardLayout>
    );
};

export default DoctorMyNotificationsPage;

===== File: /src/app/dashboard/staff/doctor/page.tsx =====
// src/app/dashboard/staff/doctor/page.tsx
'use client';

import React from 'react';
import { Typography, Card, Col, Row, Statistic, List, Avatar, Button } from 'antd';
import DoctorDashboardLayout from '@/components/Layout/DoctorDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Loader from '@/components/Layout/Loader';
import { NotificationOutlined, FileTextOutlined, CalendarOutlined, UserOutlined } from '@ant-design/icons';

//RTK Queries imports:
import { useGetMyNotificationsQuery, Notification } from '@/services/notification/notificationSliceAPI';
import { useGetAppointmentsQuery } from '@/services/appointment/appointmentSliceAPI';
import { useGetPatientsQuery } from '@/services/patient/patientSliceAPI';
import { formatDate } from '@/utils/dateUtils';

const { Title, Paragraph, Text } = Typography;

const DoctorDashboard = () => {
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    //RTK Queries
    const { data: notificationsData, isLoading: isNotificationsLoading, isError: isNotificationsError, error: notificationsError } = useGetMyNotificationsQuery({ limit: 5 });
    const { data: appointmentsData, isLoading: isAppointmentsLoading, isError: isAppointmentsError, error: appointmentsError } = useGetAppointmentsQuery({ limit: 5 });
    const { data: patientsData, isLoading: isPatientsLoading, isError: isPatientsError, error: patientsError } = useGetPatientsQuery({});

    if (!user || user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "doctor") {
        router.push('/auth'); // Redirect to login if unauthorized
        return null; // Or render an "Unauthorized" component
    }

    if (isNotificationsLoading || isAppointmentsLoading || isPatientsLoading) {
        return (
            <DoctorDashboardLayout>
                <Loader />
            </DoctorDashboardLayout>
        );
    }

    if (isNotificationsError || isAppointmentsError || isPatientsError) {
        let errorMessage = "Error loading data.";
        if (isNotificationsError) errorMessage += ` Notifications: ${(notificationsError as any)?.data?.message || "Unknown"}`;
        if (isAppointmentsError) errorMessage += ` Appointments: ${(appointmentsError as any)?.data?.message || "Unknown"}`;
        if (isPatientsError) errorMessage += ` Patients: ${(patientsError as any)?.data?.message || "Unknown"}`;
        return (
            <DoctorDashboardLayout>
                <Title level={4} type="danger">{errorMessage}</Title>
            </DoctorDashboardLayout>
        );
    }

    const totalUpcomingAppointments = appointmentsData?.appointments?.length || 0;
    const totalAssignedPatients = patientsData?.patients?.length || 0; // Assuming you have a way to filter for assigned patients

    return (
        <DoctorDashboardLayout>
            <Title level={3}>Doctor Dashboard</Title>
            <Paragraph>Welcome, Doctor! Manage patients, appointments, and medical records here.</Paragraph>

            <Row gutter={16}>
                <Col span={12}>
                    <Link href="/dashboard/staff/doctor/appointment">
                        <Card>
                            <Statistic
                                title="Upcoming Appointments"
                                value={totalUpcomingAppointments}
                                prefix={<CalendarOutlined />}
                            />
                        </Card>
                    </Link>
                </Col>
                <Col span={12}>
                    <Link href="/dashboard/staff/doctor/patient">
                        <Card>
                            <Statistic
                                title="Assigned Patients"
                                value={totalAssignedPatients}
                                prefix={<UserOutlined />}
                            />
                        </Card>
                    </Link>
                </Col>
            </Row>

            <Card
                title={<><NotificationOutlined /> Recent Notifications</>}
                style={{ marginTop: 16 }}
                loading={isNotificationsLoading}
            >
                {isNotificationsError ? (
                    <Text type="danger">Error loading notifications: { (notificationsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                ) : (
                    <List
                        itemLayout="horizontal"
                        dataSource={notificationsData?.notifications || []}
                        renderItem={(item: Notification) => (
                            <List.Item>
                                <List.Item.Meta
                                    avatar={<Avatar icon={<NotificationOutlined />} />}
                                    title={<Text>{item.message}</Text>}
                                    description={<Text type="secondary">{formatDate(item.createdAt)}</Text>}
                                />
                            </List.Item>
                        )}
                    />
                )}
                <Button type="link" href="/dashboard/staff/doctor/notification/my-notification">View All Notifications</Button>
            </Card>

        </DoctorDashboardLayout>
    );
};

export default DoctorDashboard;

===== File: /src/app/dashboard/staff/doctor/patient/page.tsx =====
// src/app/dashboard/staff/doctor/patient/page.tsx 
'use client';

import React, { useState } from 'react';
import { Typography, Modal } from 'antd';
import DoctorDashboardLayout from '@/components/Layout/DoctorDashboardLayout'; 
import PatientList from '@/components/Patient/PatientList';
import PatientView from '@/components/Patient/PatientView';  
import { Patient } from '@/services/patient/types';

const { Title } = Typography;

const DoctorPatientManagementPage = () => {   
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);

    const handleView = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsViewModalVisible(true);
    };

    return (
        <>
            <DoctorDashboardLayout  > {/*Changed Layout*/}
                <Title level={3}>Patient Management</Title>
                <p>View patients your assigned patients here.</p>

                <PatientList
                    onView={handleView}
                />
                <Modal
                    title="View Patient"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientView patient={selectedPatient} />
                    )}
                </Modal>

            </DoctorDashboardLayout>
        </>
    );
};

export default DoctorPatientManagementPage;

===== File: /src/app/dashboard/staff/doctor/shift/my-shift/page.tsx =====
// src/app/dashboard/staff/super-admin/shift/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import DoctorDashboardLayout from '@/components/Layout/DoctorDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import MyShiftList from '@/components/Shift/MyShiftList';
import ShiftView from '@/components/Shift/ShiftView';
import { Shift } from '@/services/shift/shiftSliceAPI';
const { Title } = Typography;

const DoctorShiftManagementPage = () => {
 
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "doctor")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);
 
    const handleView = (shift: Shift) => {
        setSelectedShift(shift);
        setIsViewModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <DoctorDashboardLayout >
                <Title level={3}>My Shifts </Title>

                <MyShiftList
                    onView={handleView}
                />
                 
                <Modal
                    title="View Shift"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftView shift={selectedShift} />
                    )}
                </Modal>
            </DoctorDashboardLayout>
        </>
    );
};

export default DoctorShiftManagementPage;

===== File: /src/app/dashboard/staff/doctor/task/my-task/page.tsx =====
// src/app/dashboard/staff/super-admin/task/my-tasks/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Button, Modal } from 'antd';
import DoctorDashboardLayout from '@/components/Layout/DoctorDashboardLayout';
import MyTaskList from "@/components/Task/MyTaskList"
import { useCompleteTaskMutation } from '@/services/task/taskSliceAPI';
import TaskView from "@/components/Task/TaskView";
import { Task } from '@/services/task/taskSliceAPI';
import TaskEditForm from '@/components/Task/TaskEditForm';
import TaskCreateForm from '@/components/Task/TaskCreateForm';
import TaskComplete from '@/components/Task/TaskComplete';
const { Title } = Typography;

const DoctorMyTasksPage = () => {
    const [completeTask, { isLoading: isCompleting, isError: isCompleteError }] = useCompleteTaskMutation();
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isCompleteModalVisible, setIsCompleteModalVisible] = useState(false);
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);

     const handleView = (task: Task) => {
            setSelectedTask(task);
            setIsViewModalVisible(true);
        };
        const showCreateModal = () => {
            setIsCreateModalVisible(true);
        };
    
        const handleCreateSuccess = () => {
            setIsCreateModalVisible(false);
        };
           const handleEdit = (task: Task) => {
                setSelectedTask(task);
                setIsEditModalVisible(true);
            };
            const handleEditSuccess = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };
        
            const handleEditCancel = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };

            const handleComplete = (task: Task) => {
                setSelectedTask(task);
                setIsCompleteModalVisible(true);
            };

            const handleCompleteSuccess = () => {
                setIsCompleteModalVisible(false);
                setSelectedTask(null);
            };
    return (
        <DoctorDashboardLayout >
            <Title level={3}>My Tasks</Title>
            <p>View your assigned tasks here.</p>
            <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                            Create Task
            </Button>
            <MyTaskList 
              onComplete={handleComplete} 
              onView={handleView}
              onEdit={handleEdit}
              
            />  
             <Modal
                    title="Complete Task"
                    open={isCompleteModalVisible}
                    onCancel={() => setIsCompleteModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskComplete task={selectedTask} 
                        onSuccess={handleCompleteSuccess}
                        />
                    )}
                </Modal>
              <Modal
                    title="View Task"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskView task={selectedTask} />
                    )}
                </Modal>
                 <Modal
                                title="Create Task"
                                open={isCreateModalVisible}
                                onCancel={() => setIsCreateModalVisible(false)}
                                footer={null}
                            >
                                <TaskCreateForm onSuccess={handleCreateSuccess} />
                            </Modal>
                            <Modal
                                title="Edit Task"
                                open={isEditModalVisible}
                                onCancel={handleEditCancel}
                                footer={null}
                            >
                                {selectedTask && (
                                    <TaskEditForm
                                        task={selectedTask}
                                        onSuccess={handleEditSuccess}
                                        onCancel={handleEditCancel}
                                    />
                                )}
                            </Modal>
        </DoctorDashboardLayout>
    );
};

export default DoctorMyTasksPage;

===== File: /src/app/dashboard/staff/nurse/medical-record/page.tsx =====
// src/app/dashboard/staff/nurse/medical-record/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Modal } from 'antd';
import NurseDashboardLayout from '@/components/Layout/NurseDashboardLayout';
import MedicalRecordList from '@/components/MedicalRecord/MedicalRecordList';
import MedicalRecordEditForm from '@/components/MedicalRecord/MedicalRecordEditForm';
import MedicalRecordView from '@/components/MedicalRecord/MedicalRecordView';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';

const { Title } = Typography;

const NurseMedicalRecordManagementPage = () => {
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [selectedMedicalRecord, setSelectedMedicalRecord] = useState<MedicalRecord | null>(null);

    const handleEdit = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsEditModalVisible(true);
    };

    const handleView = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    return (
        <NurseDashboardLayout >
            <Title level={3}>Medical Record Management</Title>
            <p>Manage medical records here.</p>

            <MedicalRecordList onView={handleView} onEdit={handleEdit}  />

            <Modal
                title="Edit Medical Record"
                open={isEditModalVisible}
                onCancel={handleEditCancel}
                footer={null}
            >
                {selectedMedicalRecord && (
                    <MedicalRecordEditForm
                        record={selectedMedicalRecord}
                        onSuccess={handleEditSuccess}
                        onCancel={handleEditCancel}
                    />
                )}
            </Modal>

              <Modal
                title="View Medical Record"
                open={isViewModalVisible}
                onCancel={() => setIsViewModalVisible(false)}
                footer={null}
              >
                  {selectedMedicalRecord && (
                      <MedicalRecordView record={selectedMedicalRecord} />
                  )}
              </Modal>
        </NurseDashboardLayout>
    );
};

export default NurseMedicalRecordManagementPage;

===== File: /src/app/dashboard/staff/nurse/notification/my-notification/page.tsx =====
// src/app/dashboard/staff/super-admin/notifications/page.tsx
'use client';

import React from 'react';
import { Typography } from 'antd';
import NurseDashboardLayout from '@/components/Layout/NurseDashboardLayout';
import MyNotificationList from '@/components/Notification/MyNotificationList';  

const { Title } = Typography;

const NurseMyNotificationsPage = () => {
    return (
        <NurseDashboardLayout >
            <Title level={3}>My Notifications</Title>
            <p>View your notifications here.</p>
            <MyNotificationList/>  
        </NurseDashboardLayout>
    );
};

export default NurseMyNotificationsPage;

===== File: /src/app/dashboard/staff/nurse/page.tsx =====
// src/app/dashboard/staff/nurse/page.tsx
'use client';

import React from 'react';
import { Typography, Card, Col, Row, Statistic, List, Avatar, Button } from 'antd';
import NurseDashboardLayout from '@/components/Layout/NurseDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Loader from '@/components/Layout/Loader';
import { NotificationOutlined, FileTextOutlined, UserOutlined } from '@ant-design/icons';

//RTK Queries imports:
import { useGetMyNotificationsQuery, Notification } from '@/services/notification/notificationSliceAPI';
import { useGetMyTasksQuery } from '@/services/task/taskSliceAPI';
import { formatDate } from '@/utils/dateUtils';

const { Title, Paragraph, Text } = Typography;

const NurseDashboard = () => {
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    //RTK Queries
    const { data: notificationsData, isLoading: isNotificationsLoading, isError: isNotificationsError, error: notificationsError } = useGetMyNotificationsQuery({ limit: 5 });
     const { data: tasksData, isLoading: isTasksLoading, isError: isTasksError, error: tasksError } = useGetMyTasksQuery({ limit: 5 }); // Limiting to 5 tasks for dashboard

    if (!user || user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "nurse") {
        router.push('/auth'); // Redirect to login if unauthorized
        return null; // Or render an "Unauthorized" component
    }

    if (isNotificationsLoading || isTasksLoading) {
        return (
            <NurseDashboardLayout>
                <Loader />
            </NurseDashboardLayout>
        );
    }

    if (isNotificationsError || isTasksError) {
        let errorMessage = "Error loading data.";
        if (isNotificationsError) errorMessage += ` Notifications: ${(notificationsError as any)?.data?.message || "Unknown"}`;
        if (isTasksError) errorMessage += ` Tasks: ${(tasksError as any)?.data?.message || "Unknown"}`;
        return (
            <NurseDashboardLayout>
                <Title level={4} type="danger">{errorMessage}</Title>
            </NurseDashboardLayout>
        );
    }

    const totalPendingTasks = tasksData?.tasks?.filter(task => task.status === 'pending' || task.status === "in_progress").length || 0;

    return (
        <NurseDashboardLayout>
            <Title level={3}>Nurse Dashboard</Title>
            <Paragraph>Welcome, Nurse! Manage patient care, medications, and vitals here.</Paragraph>

            <Row gutter={16}>
         
                <Col span={12}>
                    <Link href="/dashboard/staff/nurse/task/my-task">
                        <Card>
                            <Statistic
                                title="Pending / In progress Tasks"
                                value={totalPendingTasks}
                                prefix={<FileTextOutlined />}
                            />
                        </Card>
                    </Link>
                </Col>
            </Row>

            <Card
                title={<><NotificationOutlined /> Recent Notifications</>}
                style={{ marginTop: 16 }}
                loading={isNotificationsLoading}
            >
                {isNotificationsError ? (
                  <Text type="danger">Error loading notifications: { (notificationsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                ) : (
                    <List
                        itemLayout="horizontal"
                        dataSource={notificationsData?.notifications || []}
                        renderItem={(item: Notification) => (
                            <List.Item>
                                <List.Item.Meta
                                    avatar={<Avatar icon={<NotificationOutlined />} />}
                                    title={<Text>{item.message}</Text>}
                                    description={<Text type="secondary">{formatDate(item.createdAt)}</Text>}
                                />
                            </List.Item>
                        )}
                    />
                )}
                <Button type="link" href="/dashboard/staff/nurse/notification/my-notification">View All Notifications</Button>
            </Card>

        </NurseDashboardLayout>
    );
};

export default NurseDashboard;

===== File: /src/app/dashboard/staff/nurse/patient/page.tsx =====
// src/app/dashboard/staff/Nurse/patient/page.tsx 
'use client';

import React, { useState } from 'react';
import { Typography, Modal } from 'antd';
import NurseDashboardLayout from '@/components/Layout/NurseDashboardLayout'; 
import PatientList from '@/components/Patient/PatientList';
import PatientView from '@/components/Patient/PatientView';  
import { Patient } from '@/services/patient/types';

const { Title } = Typography;

const NursePatientManagementPage = () => {   
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);

    const handleView = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsViewModalVisible(true);
    };

    return (
        <>
            <NurseDashboardLayout  > {/*Changed Layout*/}
                <Title level={3}>Patient Management</Title>
                <p>View patients here.</p>

                <PatientList
                    onView={handleView}
                />
                <Modal
                    title="View Patient"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientView patient={selectedPatient} />
                    )}
                </Modal>

            </NurseDashboardLayout>
        </>
    );
};

export default NursePatientManagementPage;

===== File: /src/app/dashboard/staff/nurse/shift/my-shift/page.tsx =====
// src/app/dashboard/staff/super-admin/shift/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import NurseDashboardLayout from '@/components/Layout/NurseDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import MyShiftList from '@/components/Shift/MyShiftList';
import ShiftView from '@/components/Shift/ShiftView';
import { Shift } from '@/services/shift/shiftSliceAPI';

const { Title } = Typography;

const NurseShiftManagementPage = () => {
 
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "nurse")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);
 
    const handleView = (shift: Shift) => {
        setSelectedShift(shift);
        setIsViewModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <NurseDashboardLayout >
                <Title level={3}>My Shifts </Title>

                <MyShiftList
                    onView={handleView}
                />
                 
                <Modal
                    title="View Shift"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftView shift={selectedShift} />
                    )}
                </Modal>
            </NurseDashboardLayout>
        </>
    );
};

export default NurseShiftManagementPage;

===== File: /src/app/dashboard/staff/nurse/task/my-task/page.tsx =====
// src/app/dashboard/staff/super-admin/task/my-tasks/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Button, Modal } from 'antd';
import NurseDashboardLayout from '@/components/Layout/NurseDashboardLayout';
import MyTaskList from "@/components/Task/MyTaskList"
 
import TaskView from "@/components/Task/TaskView";
import { Task } from '@/services/task/taskSliceAPI';
 
import TaskComplete from '@/components/Task/TaskComplete';
const { Title } = Typography;

const NurseMyTasksPage = () => {
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
  
    const [isCompleteModalVisible, setIsCompleteModalVisible] = useState(false);
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);

     const handleView = (task: Task) => {
            setSelectedTask(task);
            setIsViewModalVisible(true);
        };
       
         
            const handleComplete = (task: Task) => {
                setSelectedTask(task);
                setIsCompleteModalVisible(true);
            };

            const handleCompleteSuccess = () => {
                setIsCompleteModalVisible(false);
                setSelectedTask(null);
            };
    return (
        <NurseDashboardLayout >
            <Title level={3}>My Tasks</Title>
            <p>View your assigned tasks here.</p>
      
            <MyTaskList 
              onComplete={handleComplete} 
              onView={handleView}
              
              
            />  
             <Modal
                    title="Complete Task"
                    open={isCompleteModalVisible}
                    onCancel={() => setIsCompleteModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskComplete task={selectedTask} 
                        onSuccess={handleCompleteSuccess}
                        />
                    )}
                </Modal>
              <Modal
                    title="View Task"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskView task={selectedTask} />
                    )}
                </Modal>
                 
                            
        </NurseDashboardLayout>
    );
};

export default NurseMyTasksPage;

===== File: /src/app/dashboard/staff/receptionist/appointment/page.tsx =====
// src/app/dashboard/staff/admin/appointment/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import ReceptionistDashboardLayout from '@/components/Layout/ReceptionistDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import AppointmentList from '@/components/Appointment/AppointmentList';
import AppointmentCreateForm from '@/components/Appointment/AppointmentCreateForm';
import AppointmentEditForm from '@/components/Appointment/AppointmentEditForm';
import AppointmentView from '@/components/Appointment/AppointmentView';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';

const { Title } = Typography;

const ReceptionistAppointmentManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

   
    const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "receptionist" )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };


    const handleView = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsViewModalVisible(true);
    };

    const handleEdit = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsEditModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };
   
    

    return (
        <>
            {contextHolder}
            <ReceptionistDashboardLayout >
                <Title level={3}>Appointment Management</Title>
                <p>Manage Appointments here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Appointment
                </Button>
                <AppointmentList
                    onEdit={handleEdit}
                    onView={handleView}
                    
                />
                <Modal
                    title="Create Appointment"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <AppointmentCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Appointment"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentEditForm
                            appointment={selectedAppointment}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Appointment"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentView appointment={selectedAppointment} />
                    )}
                </Modal>
               
            </ReceptionistDashboardLayout>
        </>
    );
};

export default ReceptionistAppointmentManagementPage;

===== File: /src/app/dashboard/staff/receptionist/notification/my-notification/page.tsx =====
// src/app/dashboard/staff/super-admin/notifications/page.tsx
'use client';

import React from 'react';
import { Typography } from 'antd';
import ReceptionistDashboardLayout from '@/components/Layout/ReceptionistDashboardLayout';
import MyNotificationList from '@/components/Notification/MyNotificationList';  

const { Title } = Typography;

const ReceptionistMyNotificationsPage = () => {
    return (
        <ReceptionistDashboardLayout >
            <Title level={3}>My Notifications</Title>
            <p>View your notifications here.</p>
            <MyNotificationList/>  
        </ReceptionistDashboardLayout>
    );
};

export default ReceptionistMyNotificationsPage;

===== File: /src/app/dashboard/staff/receptionist/page.tsx =====
// src/app/dashboard/staff/receptionist/page.tsx
'use client';

import React from 'react';
import { Typography, Card, Col, Row, Statistic, List, Avatar, Button } from 'antd';
import ReceptionistDashboardLayout from '@/components/Layout/ReceptionistDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Loader from '@/components/Layout/Loader';
import { NotificationOutlined, UserOutlined, CalendarOutlined } from '@ant-design/icons';

//RTK Queries imports:
import { useGetMyNotificationsQuery, Notification } from '@/services/notification/notificationSliceAPI';
import { useGetPatientsQuery } from '@/services/patient/patientSliceAPI';
import { useGetAppointmentsQuery } from '@/services/appointment/appointmentSliceAPI'; // Corrected import
import { formatDate } from '@/utils/dateUtils';

const { Title, Paragraph, Text } = Typography;

const ReceptionistDashboard = () => {
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    //RTK Queries
    const { data: notificationsData, isLoading: isNotificationsLoading, isError: isNotificationsError, error: notificationsError } = useGetMyNotificationsQuery({ limit: 5 });
    const { data: patientsData, isLoading: isPatientsLoading, isError: isPatientsError, error: patientsError } = useGetPatientsQuery({});
    const { data: appointmentsData, isLoading: isAppointmentsLoading, isError: isAppointmentsError, error: appointmentsError } = useGetAppointmentsQuery({}); // Fetch only 5 upcoming appointments

    if (!user || user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "receptionist") {
        router.push('/auth'); // Redirect to login if unauthorized
        return null; // Or render an "Unauthorized" component
    }

    if (isNotificationsLoading || isPatientsLoading || isAppointmentsLoading) {
        return (
            <ReceptionistDashboardLayout>
                <Loader />
            </ReceptionistDashboardLayout>
        );
    }

    if (isNotificationsError || isPatientsError || isAppointmentsError) {
        let errorMessage = "Error loading data.";
        if (isNotificationsError) errorMessage += ` Notifications: ${(notificationsError as any)?.data?.message || "Unknown"}`;
        if (isPatientsError) errorMessage += ` Patients: ${(patientsError as any)?.data?.message || "Unknown"}`;
        if (isAppointmentsError) errorMessage += ` Appointments: ${(appointmentsError as any)?.data?.message || "Unknown"}`;
        return (
            <ReceptionistDashboardLayout>
                <Title level={4} type="danger">{errorMessage}</Title>
            </ReceptionistDashboardLayout>
        );
    }

    const totalPatients = patientsData?.totalPatients || 0;
    const upcomingAppointments = appointmentsData?.appointments?.length || 0;

    return (
        <ReceptionistDashboardLayout>
            <Title level={3}>Receptionist Dashboard</Title>
            <Paragraph>Welcome, Receptionist! Manage appointments, patient check-in, and billing here.</Paragraph>

            <Row gutter={16}>
                <Col span={12}>
                    <Link href="/dashboard/staff/receptionist/patient">
                        <Card>
                            <Statistic
                                title="Total Patients"
                                value={totalPatients}
                                prefix={<UserOutlined />}
                            />
                        </Card>
                    </Link>
                </Col>
                <Col span={12}>
                    <Link href="/dashboard/staff/receptionist/appointment">
                        <Card>
                            <Statistic
                                title="Upcoming Appointments"
                                value={upcomingAppointments}
                                prefix={<CalendarOutlined />}
                            />
                        </Card>
                    </Link>
                </Col>
            </Row>

            <Card
                title={<><NotificationOutlined /> Recent Notifications</>}
                style={{ marginTop: 16 }}
                loading={isNotificationsLoading}
            >
                {isNotificationsError ? (
                    <Text type="danger">Error loading notifications: { (notificationsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                ) : (
                    <List
                        itemLayout="horizontal"
                        dataSource={notificationsData?.notifications || []}
                        renderItem={(item: Notification) => (
                            <List.Item>
                                <List.Item.Meta
                                    avatar={<Avatar icon={<NotificationOutlined />} />}
                                    title={<Text>{item.message}</Text>}
                                    description={<Text type="secondary">{formatDate(item.createdAt)}</Text>}
                                />
                            </List.Item>
                        )}
                    />
                )}
                <Button type="link" href="/dashboard/staff/receptionist/notification/my-notification">View All Notifications</Button>
            </Card>

        </ReceptionistDashboardLayout>
    );
};

export default ReceptionistDashboard;

===== File: /src/app/dashboard/staff/receptionist/patient/page.tsx =====
// src/app/dashboard/staff/admin/patient/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import ReceptionistDashboardLayout from '@/components/Layout/ReceptionistDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

// Import Patient Components
import PatientList from '@/components/Patient/PatientList';
import PatientCreateForm from '@/components/Patient/PatientCreateForm';
import PatientEditForm from '@/components/Patient/PatientEditForm';
import PatientView from '@/components/Patient/PatientView';  
import { Patient } from '@/services/patient/types';

const { Title } = Typography;

const ReceptionistPatientManagementPage = () => {
    const [isPatientCreateModalVisible, setIsPatientCreateModalVisible] = useState(false);
    const [isPatientEditModalVisible, setIsPatientEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "receptionist")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showPatientCreateModal = () => {
        setIsPatientCreateModalVisible(true);
    };

    const handlePatientCreateSuccess = () => {
        setIsPatientCreateModalVisible(false);
    };

    const handlePatientEdit = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsPatientEditModalVisible(true);
    };

    const handleView = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsViewModalVisible(true);
    };

    const handlePatientEditSuccess = () => {
        setIsPatientEditModalVisible(false);
        setSelectedPatient(null);
    };

    const handlePatientEditCancel = () => {
        setIsPatientEditModalVisible(false);
        setSelectedPatient(null);
    };

    return (
        <>
            {contextHolder}
            <ReceptionistDashboardLayout >
                <Title level={3}>Patient Management</Title>
                <p>Manage patients here.</p>

                <Button type="primary" onClick={showPatientCreateModal} style={{ marginBottom: 16 }}>
                    Create Patient
                </Button>
                <PatientList
                    onEdit={handlePatientEdit}
                    onView={handleView}
                     
                />
                <Modal
                    title="Create Patient"
                    open={isPatientCreateModalVisible}
                    onCancel={() => setIsPatientCreateModalVisible(false)}
                    footer={null}
                >
                    <PatientCreateForm onSuccess={handlePatientCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Patient"
                    open={isPatientEditModalVisible}
                    onCancel={handlePatientEditCancel}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientEditForm
                            patient={selectedPatient}
                            onSuccess={handlePatientEditSuccess}
                            onCancel={handlePatientEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Patient"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientView patient={selectedPatient} />
                    )}
                </Modal>
              
            </ReceptionistDashboardLayout>
        </>
    );
};

export default ReceptionistPatientManagementPage;

===== File: /src/app/dashboard/staff/receptionist/shift/my-shift/page.tsx =====
// src/app/dashboard/staff/super-admin/shift/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import ReceptionistDashboardLayout from '@/components/Layout/ReceptionistDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import MyShiftList from '@/components/Shift/MyShiftList';
import ShiftView from '@/components/Shift/ShiftView';
import { Shift } from '@/services/shift/shiftSliceAPI';

const { Title } = Typography;

const ReceptionistShiftManagementPage = () => {
 
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "receptionist" )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);
 
    const handleView = (shift: Shift) => {
        setSelectedShift(shift);
        setIsViewModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <ReceptionistDashboardLayout >
                <Title level={3}>My Shifts </Title>

                <MyShiftList
                    onView={handleView}
                />
                 
                <Modal
                    title="View Shift"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftView shift={selectedShift} />
                    )}
                </Modal>
            </ReceptionistDashboardLayout>
        </>
    );
};

export default ReceptionistShiftManagementPage;

===== File: /src/app/dashboard/staff/receptionist/task/my-task/page.tsx =====
// src/app/dashboard/staff/super-admin/task/my-tasks/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Button, Modal } from 'antd';
import ReceptionistDashboardLayout from '@/components/Layout/ReceptionistDashboardLayout';
import MyTaskList from "@/components/Task/MyTaskList"
import { useCompleteTaskMutation } from '@/services/task/taskSliceAPI';
import TaskView from "@/components/Task/TaskView";
import { Task } from '@/services/task/taskSliceAPI';
import TaskEditForm from '@/components/Task/TaskEditForm';
import TaskCreateForm from '@/components/Task/TaskCreateForm';
import TaskComplete from '@/components/Task/TaskComplete';
const { Title } = Typography;

const ReceptionistMyTasksPage = () => {
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isCompleteModalVisible, setIsCompleteModalVisible] = useState(false);
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);

     const handleView = (task: Task) => {
            setSelectedTask(task);
            setIsViewModalVisible(true);
        };
        const showCreateModal = () => {
            setIsCreateModalVisible(true);
        };
    
        const handleCreateSuccess = () => {
            setIsCreateModalVisible(false);
        };
           const handleEdit = (task: Task) => {
                setSelectedTask(task);
                setIsEditModalVisible(true);
            };
            const handleEditSuccess = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };
        
            const handleEditCancel = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };

            const handleComplete = (task: Task) => {
                setSelectedTask(task);
                setIsCompleteModalVisible(true);
            };

            const handleCompleteSuccess = () => {
                setIsCompleteModalVisible(false);
                setSelectedTask(null);
            };
    return (
        <ReceptionistDashboardLayout >
            <Title level={3}>My Tasks</Title>
            <p>View your assigned tasks here.</p>
         
            <MyTaskList 
              onComplete={handleComplete} 
              onView={handleView}
              onEdit={handleEdit}
              
            />  
             <Modal
                    title="Complete Task"
                    open={isCompleteModalVisible}
                    onCancel={() => setIsCompleteModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskComplete task={selectedTask} 
                        onSuccess={handleCompleteSuccess}
                        />
                    )}
                </Modal>
              <Modal
                    title="View Task"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskView task={selectedTask} />
                    )}
                </Modal>
                 <Modal
                                title="Create Task"
                                open={isCreateModalVisible}
                                onCancel={() => setIsCreateModalVisible(false)}
                                footer={null}
                            >
                                <TaskCreateForm onSuccess={handleCreateSuccess} />
                            </Modal>
                            <Modal
                                title="Edit Task"
                                open={isEditModalVisible}
                                onCancel={handleEditCancel}
                                footer={null}
                            >
                                {selectedTask && (
                                    <TaskEditForm
                                        task={selectedTask}
                                        onSuccess={handleEditSuccess}
                                        onCancel={handleEditCancel}
                                    />
                                )}
                            </Modal>
        </ReceptionistDashboardLayout>
    );
};

export default ReceptionistMyTasksPage;

===== File: /src/app/dashboard/staff/super-admin/appointment/page.tsx =====
// src/app/dashboard/staff/super-admin/appointment/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import AppointmentList from '@/components/Appointment/AppointmentList';
import AppointmentCreateForm from '@/components/Appointment/AppointmentCreateForm';
import AppointmentEditForm from '@/components/Appointment/AppointmentEditForm';
import AppointmentView from '@/components/Appointment/AppointmentView';
import AppointmentDelete from '@/components/Appointment/AppointmentDelete';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';

const { Title } = Typography;

const SuperAdminAppointmentManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };


    const handleView = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsViewModalVisible(true);
    };

    const handleEdit = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsEditModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedAppointment(null);
    };

    const handleDelete = (appointment: Appointment) => {
        setSelectedAppointment(appointment);
        setIsDeleteModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>Appointment Management</Title>
                <p>Manage Appointments here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Appointment
                </Button>
                <AppointmentList
                    onEdit={handleEdit}
                    onView={handleView}
                    onDelete={handleDelete}
                />
                <Modal
                    title="Create Appointment"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <AppointmentCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Appointment"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentEditForm
                            appointment={selectedAppointment}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Appointment"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentView appointment={selectedAppointment} />
                    )}
                </Modal>
                <Modal
                    title="Delete Appointment"
                    onCancel={handleCancelDelete}
                    open={isDeleteModalVisible}
                    footer={null}
                >
                    {selectedAppointment && (
                        <AppointmentDelete
                            appointment={selectedAppointment}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminAppointmentManagementPage;

===== File: /src/app/dashboard/staff/super-admin/department/page.tsx =====
// src/app/dashboard/staff/super-admin/department/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import DepartmentList from '@/components/Department/DepartmentList';
import DepartmentCreateForm from '@/components/Department/DepartmentCreateForm';
import DepartmentEditForm from '@/components/Department/DepartmentEditForm';
import DepartmentView from '@/components/Department/DepartmentView';
import DepartmentDelete from '@/components/Department/DepartmentDelete';
import { Department } from '@/services/department/departmentSliceAPI';

const { Title } = Typography;

const SuperAdminDepartmentManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" ||   user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (department: Department) => {
        setSelectedDepartment(department);
        setIsEditModalVisible(true);
    };

    const handleView = (department: Department) => {
        setSelectedDepartment(department);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedDepartment(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedDepartment(null);
    };

    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedDepartment(null);
    };

    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedDepartment(null);
    };

    const handleDelete = (department: Department) => {
        setSelectedDepartment(department);
        setIsDeleteModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>Department Management</Title>
                <p>Manage departments here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Department
                </Button>
                <DepartmentList
                    onEdit={handleEdit}
                    onView={handleView}
                    onDelete={handleDelete} // Pass the handleDelete function
                />
                <Modal
                    title="Create Department"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <DepartmentCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Department"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedDepartment && (
                        <DepartmentEditForm
                            department={selectedDepartment}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>

                <Modal
                    title="View Department"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedDepartment && (
                        <DepartmentView department={selectedDepartment} />
                    )}
                </Modal>
                <Modal
                    title="Delete Department"
                    onCancel={handleCancelDelete}
                    open={isDeleteModalVisible}
                    footer={null}
                >
                    {selectedDepartment && (
                        <DepartmentDelete
                            department={selectedDepartment}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminDepartmentManagementPage;

===== File: /src/app/dashboard/staff/super-admin/medical-record/page.tsx =====
// src/app/dashboard/staff/super-admin/medical-record/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

// Import Medical Record Components
import MedicalRecordList from '@/components/MedicalRecord/MedicalRecordList';
import MedicalRecordCreateForm from '@/components/MedicalRecord/MedicalRecordCreateForm';
import MedicalRecordEditForm from '@/components/MedicalRecord/MedicalRecordEditForm';
import MedicalRecordView from '@/components/MedicalRecord/MedicalRecordView';   
import MedicalRecordDelete from '@/components/MedicalRecord/MedicalRecordDelete';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';

const { Title } = Typography;

const SuperAdminMedicalRecordManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);  
    const [messageApi, contextHolder] = message.useMessage();

    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [selectedMedicalRecord, setSelectedMedicalRecord] = useState<MedicalRecord | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" ||  user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsEditModalVisible(true);
    };

      const handleView = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedMedicalRecord(null);
    };

    const handleDelete = (record: MedicalRecord) => {
        setSelectedMedicalRecord(record);
        setIsDeleteModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>Medical Record Management</Title>
                <p>Manage Medical Records here.</p>

                
                <MedicalRecordList onEdit={handleEdit} onView={handleView} onDelete={handleDelete}/>
                <Modal
                    title="Create Medical Record"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <MedicalRecordCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Medical Record"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedMedicalRecord && (
                        <MedicalRecordEditForm
                            record={selectedMedicalRecord}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Medical Record"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedMedicalRecord && (
                        <MedicalRecordView record={selectedMedicalRecord} />
                    )}
                </Modal>
                 <Modal
                    title="Delete Medical Record"
                    onCancel={handleCancelDelete}
                    open={isDeleteModalVisible}
                    footer={null}
                >
                    {selectedMedicalRecord && (
                        <MedicalRecordDelete
                            record={selectedMedicalRecord}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminMedicalRecordManagementPage;

===== File: /src/app/dashboard/staff/super-admin/notification/my-notification/page.tsx =====
// src/app/dashboard/staff/super-admin/notifications/page.tsx
'use client';

import React from 'react';
import { Typography } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import MyNotificationList from '@/components/Notification/MyNotificationList'; // Import the MyNotificationList component

const { Title } = Typography;

const SuperAdminMyNotificationsPage = () => {
    return (
        <SuperAdminDashboardLayout >
            <Title level={3}>My Notifications</Title>
            <p>View your notifications here.</p>
            <MyNotificationList/>  {/* Use the MyNotificationList component */}
        </SuperAdminDashboardLayout>
    );
};

export default SuperAdminMyNotificationsPage;

===== File: /src/app/dashboard/staff/super-admin/page.tsx =====
// src/app/dashboard/staff/super-admin/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Card, Col, Row, Statistic, message, List, Avatar, Button } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Loader from '@/components/Layout/Loader';
import { NotificationOutlined } from '@ant-design/icons';

//RTK Queries imports:
import { useGetStaffQuery } from '@/services/staff/staffSliceAPI';
import { useGetPatientsQuery } from '@/services/patient/patientSliceAPI';
import { useGetDepartmentsQuery } from '@/services/department/departmentSliceAPI';
import { useGetMyNotificationsQuery, Notification } from '@/services/notification/notificationSliceAPI'; // Import the notification query
import { formatDate } from '@/utils/dateUtils';

const { Title, Paragraph, Text } = Typography;

const SuperAdminAdminDashboard = () => {
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();
    const [messageApi, contextHolder] = message.useMessage();

    //RTK Queries to fetch counts
    const { data: staffData, isLoading: isStaffLoading, isError: isStaffError, error: staffError } = useGetStaffQuery({});
    const { data: patientsData, isLoading: isPatientsLoading, isError: isPatientsError, error: patientsError } = useGetPatientsQuery({});
    const { data: departmentsData, isLoading: isDepartmentsLoading, isError: isDepartmentsError, error: departmentsError } = useGetDepartmentsQuery({});
    const { data: notificationsData, isLoading: isNotificationsLoading, isError: isNotificationsError, error: notificationsError } = useGetMyNotificationsQuery({ limit: 5 }); // Get only the latest 5 notifications

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    if (isStaffLoading || isPatientsLoading || isDepartmentsLoading || isNotificationsLoading) {
        return (
            <SuperAdminDashboardLayout>
                <Loader />
            </SuperAdminDashboardLayout>
        );
    }

    if (isStaffError || isPatientsError || isDepartmentsError || isNotificationsError) {
        let errorMessage = "Error loading data.";
        if (isStaffError) errorMessage += ` Staff: ${ (staffError as any)?.data?.message || "Unknown"}`;
        if (isPatientsError) errorMessage += ` Patients: ${ (patientsError as any)?.data?.message || "Unknown"}`;
        if (isDepartmentsError) errorMessage += ` Departments: ${ (departmentsError as any)?.data?.message || "Unknown"}`;
        if (isNotificationsError) errorMessage += ` Notifications: ${ (notificationsError as any)?.data?.message || "Unknown"}`;

        return (
            <SuperAdminDashboardLayout>
                {contextHolder}
                <Title level={4} type="danger">{errorMessage}</Title>
            </SuperAdminDashboardLayout>
        );
    }

    const totalStaff = staffData?.totalStaff || 0;
    const totalPatients = patientsData?.totalPatients || 0;
    const totalDepartments = departmentsData?.totalDepartments || 0;

    return (
        <SuperAdminDashboardLayout>
            {contextHolder}
            <Title level={3}>Super Admin Dashboard</Title>
            <Paragraph>Welcome, Super Admin! Here's an overview of the system:</Paragraph>

            <Row gutter={16}>
                <Col span={8}>
                    <Link href="/dashboard/staff/super-admin/staff">
                        <Card>
                            <Statistic
                                title="Total Staff"
                                value={totalStaff}
                            />
                        </Card>
                    </Link>
                </Col>
                <Col span={8}>
                    <Link href="/dashboard/staff/super-admin/patient">
                        <Card>
                            <Statistic
                                title="Total Patients"
                                value={totalPatients}
                            />
                        </Card>
                    </Link>
                </Col>
                <Col span={8}>
                    <Link href="/dashboard/staff/super-admin/department">
                        <Card>
                            <Statistic
                                title="Total Departments"
                                value={totalDepartments}
                            />
                        </Card>
                    </Link>
                </Col>
            </Row>

            <Card
                title={<><NotificationOutlined /> Recent Notifications</>}
                style={{ marginTop: 16 }}
                loading={isNotificationsLoading}
            >
                {isNotificationsError ? (
                     <Text type="danger">Error loading notifications:  { (notificationsError as any)?.data?.message || "An unexpected error occurred."}</Text>
                ) : (
                    <List
                        itemLayout="horizontal"
                        dataSource={notificationsData?.notifications || []}
                        renderItem={(item: Notification) => (
                            <List.Item>
                                <List.Item.Meta
                                    avatar={<Avatar icon={<NotificationOutlined />} />}
                                    title={<Text>{item.message}</Text>}
                                    description={<Text type="secondary">{formatDate(item.createdAt)}</Text>}
                                />
                            </List.Item>
                        )}
                    />
                )}
                <Button type="link" href="/dashboard/staff/super-admin/notification/my-notification">View All Notifications</Button>
            </Card>

        </SuperAdminDashboardLayout>
    );
};

export default SuperAdminAdminDashboard;

===== File: /src/app/dashboard/staff/super-admin/patient/page.tsx =====
// src/app/dashboard/staff/super-admin/patient/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

// Import Patient Components
import PatientList from '@/components/Patient/PatientList';
import PatientCreateForm from '@/components/Patient/PatientCreateForm';
import PatientEditForm from '@/components/Patient/PatientEditForm';
import PatientView from '@/components/Patient/PatientView'; 
import PatientDelete from '@/components/Patient/PatientDelete';
import { Patient } from '@/services/patient/types';

const { Title } = Typography;

const SuperAdminPatientManagementPage = () => {
    const [isPatientCreateModalVisible, setIsPatientCreateModalVisible] = useState(false);
    const [isPatientEditModalVisible, setIsPatientEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" ||   user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showPatientCreateModal = () => {
        setIsPatientCreateModalVisible(true);
    };

    const handlePatientCreateSuccess = () => {
        setIsPatientCreateModalVisible(false);
    };

    const handlePatientEdit = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsPatientEditModalVisible(true);
    };

    const handleView = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsViewModalVisible(true);
    };

    const handlePatientEditSuccess = () => {
        setIsPatientEditModalVisible(false);
        setSelectedPatient(null);
    };

    const handlePatientEditCancel = () => {
        setIsPatientEditModalVisible(false);
        setSelectedPatient(null);
    };

    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedPatient(null);
    };

    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedPatient(null);
    };

    const handleDelete = (patient: Patient) => {
        setSelectedPatient(patient);
        setIsDeleteModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout  >
                <Title level={3}>Patient Management</Title>
                <p>Manage patients here.</p>

                <Button type="primary" onClick={showPatientCreateModal} style={{ marginBottom: 16 }}>
                    Create Patient
                </Button>
                <PatientList
                    onEdit={handlePatientEdit}
                    onView={handleView}
                    onDelete={handleDelete} // Pass handleDelete
                />
                <Modal
                    title="Create Patient"
                    open={isPatientCreateModalVisible}
                    onCancel={() => setIsPatientCreateModalVisible(false)}
                    footer={null}
                >
                    <PatientCreateForm onSuccess={handlePatientCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Patient"
                    open={isPatientEditModalVisible}
                    onCancel={handlePatientEditCancel}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientEditForm
                            patient={selectedPatient}
                            onSuccess={handlePatientEditSuccess}
                            onCancel={handlePatientEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Patient"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientView patient={selectedPatient} />
                    )}
                </Modal>
                <Modal
                    title="Delete Patient"
                    onCancel={handleCancelDelete}
                    open={isDeleteModalVisible}
                    footer={null}
                >
                    {selectedPatient && (
                        <PatientDelete
                            patient={selectedPatient}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminPatientManagementPage;

===== File: /src/app/dashboard/staff/super-admin/permission/page.tsx =====
// src/app/dashboard/staff/super-admin/permission/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

import PermissionList from '@/components/Permission/PermissionList';
import PermissionCreateForm from '@/components/Permission/PermissionCreateForm';
import PermissionEditForm from '@/components/Permission/PermissionEditForm';
import PermissionView from '@/components/Permission/PermissionView';
import PermissionDelete from '@/components/Permission/PermissionDelete';
import { Permission } from '@/services/permission/permissionSliceAPI';

const { Title } = Typography;

const SuperAdminPermissionManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [selectedPermission, setSelectedPermission] = useState<Permission | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" ||  user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (permission: Permission) => {
        setSelectedPermission(permission);
        setIsEditModalVisible(true);
    };

    const handleView = (permission: Permission) => {
        setSelectedPermission(permission);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedPermission(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedPermission(null);
    };

    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedPermission(null);
    };

    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedPermission(null);
    };

    const handleDelete = (permission: Permission) => {
        setSelectedPermission(permission);
        setIsDeleteModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>Permission Management</Title>
                <p>Manage permissions here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Permission
                </Button>
                <PermissionList
                    onEdit={handleEdit}
                    onView={handleView}
                    onDelete={handleDelete} 
                />
                <Modal
                    title="Create Permission"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <PermissionCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Permission"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedPermission && (
                        <PermissionEditForm
                            permission={selectedPermission}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>

                <Modal
                    title="View Permission"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedPermission && (
                        <PermissionView permission={selectedPermission} />
                    )}
                </Modal>
                <Modal
                    title="Delete Permission"
                    onCancel={handleCancelDelete}
                    open={isDeleteModalVisible}
                    footer={null}
                >
                    {selectedPermission && (
                        <PermissionDelete
                            permission={selectedPermission}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminPermissionManagementPage;

===== File: /src/app/dashboard/staff/super-admin/role/page.tsx =====
// src/app/dashboard/staff/super-admin/role/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

import RoleList from '@/components/Role/RoleList';
import RoleCreateForm from '@/components/Role/RoleCreateForm';
import RoleEditForm from '@/components/Role/RoleEditForm';
import RoleView from '@/components/Role/RoleView';
import RoleDelete from '@/components/Role/RoleDelete';
import { Role } from '@/services/role/roleSliceAPI';

const { Title } = Typography;

const SuperAdminRoleManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [selectedRole, setSelectedRole] = useState<Role | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (role: Role) => {
        setSelectedRole(role);
        setIsEditModalVisible(true);
    };

    const handleView = (role: Role) => {
        setSelectedRole(role);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedRole(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedRole(null);
    };

    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedRole(null);
    };

    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedRole(null);
    };

    const handleDelete = (role: Role) => {
        setSelectedRole(role);
        setIsDeleteModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>Role Management</Title>
                <p>Manage roles here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Role
                </Button>
                <RoleList
                    onEdit={handleEdit}
                    onView={handleView}
                    onDelete={handleDelete}
                />
                <Modal
                    title="Create Role"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <RoleCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Role"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedRole && (
                        <RoleEditForm
                            role={selectedRole}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>

                <Modal
                    title="View Role"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedRole && (
                        <RoleView role={selectedRole} />
                    )}
                </Modal>
                <Modal
                    title="Delete Role"
                    onCancel={handleCancelDelete}
                    open={isDeleteModalVisible}
                    footer={null}
                >
                    {selectedRole && (
                        <RoleDelete
                            role={selectedRole}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminRoleManagementPage;

===== File: /src/app/dashboard/staff/super-admin/shift/my-shift/page.tsx =====
// src/app/dashboard/staff/super-admin/shift/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';
import MyShiftList from '@/components/Shift/MyShiftList';
import ShiftView from '@/components/Shift/ShiftView';
import { Shift } from '@/services/shift/shiftSliceAPI';

const { Title } = Typography;

const SuperAdminShiftManagementPage = () => {
 
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "super admin" )) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);
 
    const handleView = (shift: Shift) => {
        setSelectedShift(shift);
        setIsViewModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>My Shifts </Title>

                <MyShiftList
                    onView={handleView}
                />
                 
                <Modal
                    title="View Shift"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftView shift={selectedShift} />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminShiftManagementPage;

===== File: /src/app/dashboard/staff/super-admin/shift/page.tsx =====
// src/app/dashboard/staff/super-admin/shift/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

import ShiftList from '@/components/Shift/ShiftList';
import ShiftCreateForm from '@/components/Shift/ShiftCreateForm';
import ShiftEditForm from '@/components/Shift/ShiftEditForm';
import ShiftView from '@/components/Shift/ShiftView';
import ShiftDelete from '@/components/Shift/ShiftDelete';
import { Shift } from '@/services/shift/shiftSliceAPI';

const { Title } = Typography;

const SuperAdminShiftManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();

    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);

    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" ||   user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (shift: Shift) => {
        setSelectedShift(shift);
        setIsEditModalVisible(true);
    };

    const handleView = (shift: Shift) => {
        setSelectedShift(shift);
        setIsViewModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedShift(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedShift(null);
    };

    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedShift(null);
    };

    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedShift(null);
    };

    const handleDelete = (shift: Shift) => {
        setSelectedShift(shift);
        setIsDeleteModalVisible(true);
    };

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>Shift Management</Title>
                <p>Manage Shifts here.</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Shift
                </Button>
                <ShiftList
                    onEdit={handleEdit}
                    onView={handleView}
                    onDelete={handleDelete}
                />
                <Modal
                    title="Create Shift"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <ShiftCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Shift"
                    open={isEditModalVisible}
                    onCancel={() => setIsEditModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftEditForm
                            shift={selectedShift}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>

                <Modal
                    title="View Shift"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftView shift={selectedShift} />
                    )}
                </Modal>

                <Modal
                    title="Delete Shift"
                    onCancel={handleCancelDelete}
                    open={isDeleteModalVisible}
                    footer={null}
                >
                    {selectedShift && (
                        <ShiftDelete
                            shift={selectedShift}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminShiftManagementPage;

===== File: /src/app/dashboard/staff/super-admin/staff/page.tsx =====
// src/app/dashboard/staff/super-admin/staff/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import StaffList from '@/components/Staff/StaffList';
import StaffCreateForm from '@/components/Staff/StaffCreateForm';
import StaffEditForm from '@/components/Staff/StaffEditForm';
import StaffView from '@/components/Staff/StaffView';
import StaffDelete from '@/components/Staff/StaffDelete';
import { Staff } from '@/services/staff/types';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

const { Title } = Typography;

const SuperAdminStaffManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [messageApi, contextHolder] = message.useMessage();
   
    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false); 
    const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);   
    const user = useAppSelector((state) => state.auth.user);
    const router = useRouter();

    useEffect(() => {
        if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "super admin")) {
            messageApi.error("You are not authorized to view this page.");
            router.push('/auth');
        }
    }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleView = (staff: Staff) => {
        setSelectedStaff(staff);
        setIsViewModalVisible(true);
    };

    const handleEdit = (staff: Staff) => {
        setSelectedStaff(staff);
        setIsEditModalVisible(true);
    };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedStaff(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedStaff(null);
    };
    //Delete
    const handleCancelDelete = () => {
        setIsDeleteModalVisible(false);
        setSelectedStaff(null);
    };
    const handleDeleteSuccess = () => {
        setIsDeleteModalVisible(false);
        setSelectedStaff(null);
    };
    const handleDelete = (staff: Staff) => {
        setSelectedStaff(staff);
        setIsDeleteModalVisible(true);
    };

    // If the user is not authorized, don't render the dashboard
    if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "super admin")) {
        return null; // Or render an "unauthorized" component
    }

    return (
        <>
            {contextHolder}
            <SuperAdminDashboardLayout >
                <Title level={3}>Staff Management</Title>
                <p>Manage Staff</p>

                <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                    Create Staff
                </Button>
                <StaffList
                    onView={handleView}
                    onEdit={handleEdit}
                    onDelete={handleDelete}
                />
                <Modal
                    title="Create Staff"
                    open={isCreateModalVisible}
                    onCancel={() => setIsCreateModalVisible(false)}
                    footer={null}
                >
                    <StaffCreateForm onSuccess={handleCreateSuccess} />
                </Modal>
                <Modal
                    title="Edit Staff"
                    open={isEditModalVisible}
                    onCancel={handleEditCancel}
                    footer={null}
                >
                    {selectedStaff && (
                        <StaffEditForm
                            staff={selectedStaff}
                            onSuccess={handleEditSuccess}
                            onCancel={handleEditCancel}
                        />
                    )}
                </Modal>
                <Modal
                    title="View Staff"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedStaff && (
                        <StaffView staff={selectedStaff} />
                    )}
                </Modal>
                  
                <Modal
                  title="Delete Staff"
                  onCancel={handleCancelDelete}
                  open={isDeleteModalVisible}
                  footer={null}
                >
                  
                    {selectedStaff && (
                        <StaffDelete
                            staff={selectedStaff}
                            onSuccess={handleDeleteSuccess}
                            onCancel={handleCancelDelete}
                        />
                    )}
                </Modal>
            </SuperAdminDashboardLayout>
        </>
    );
};

export default SuperAdminStaffManagementPage;

===== File: /src/app/dashboard/staff/super-admin/task/my-task/page.tsx =====
// src/app/dashboard/staff/super-admin/task/my-tasks/page.tsx
'use client';

import React, { useState } from 'react';
import { Typography, Button, Modal } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import MyTaskList from "@/components/Task/MyTaskList"
import { useCompleteTaskMutation } from '@/services/task/taskSliceAPI';
import TaskView from "@/components/Task/TaskView";
import { Task } from '@/services/task/taskSliceAPI';
import TaskEditForm from '@/components/Task/TaskEditForm';
import TaskCreateForm from '@/components/Task/TaskCreateForm';
import TaskComplete from '@/components/Task/TaskComplete';
const { Title } = Typography;

const SuperAdminMyTasksPage = () => {
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isCompleteModalVisible, setIsCompleteModalVisible] = useState(false);
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);

     const handleView = (task: Task) => {
            setSelectedTask(task);
            setIsViewModalVisible(true);
        };
        const showCreateModal = () => {
            setIsCreateModalVisible(true);
        };
    
        const handleCreateSuccess = () => {
            setIsCreateModalVisible(false);
        };
           const handleEdit = (task: Task) => {
                setSelectedTask(task);
                setIsEditModalVisible(true);
            };
            const handleEditSuccess = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };
        
            const handleEditCancel = () => {
                setIsEditModalVisible(false);
                setSelectedTask(null);
            };

            const handleComplete = (task: Task) => {
                setSelectedTask(task);
                setIsCompleteModalVisible(true);
            };

            const handleCompleteSuccess = () => {
                setIsCompleteModalVisible(false);
                setSelectedTask(null);
            };
    return (
        <SuperAdminDashboardLayout >
            <Title level={3}>My Tasks</Title>
            <p>View your assigned tasks here.</p>
            <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                            Create Task
            </Button>
            <MyTaskList 
              onComplete={handleComplete} 
              onView={handleView}
              onEdit={handleEdit}
              
            />  
             <Modal
                    title="Complete Task"
                    open={isCompleteModalVisible}
                    onCancel={() => setIsCompleteModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskComplete task={selectedTask} 
                        onSuccess={handleCompleteSuccess}
                        />
                    )}
                </Modal>
              <Modal
                    title="View Task"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskView task={selectedTask} />
                    )}
                </Modal>
                 <Modal
                                title="Create Task"
                                open={isCreateModalVisible}
                                onCancel={() => setIsCreateModalVisible(false)}
                                footer={null}
                            >
                                <TaskCreateForm onSuccess={handleCreateSuccess} />
                            </Modal>
                            <Modal
                                title="Edit Task"
                                open={isEditModalVisible}
                                onCancel={handleEditCancel}
                                footer={null}
                            >
                                {selectedTask && (
                                    <TaskEditForm
                                        task={selectedTask}
                                        onSuccess={handleEditSuccess}
                                        onCancel={handleEditCancel}
                                    />
                                )}
                            </Modal>
        </SuperAdminDashboardLayout>
    );
};

export default SuperAdminMyTasksPage;

===== File: /src/app/dashboard/staff/super-admin/task/page.tsx =====
// src/app/dashboard/staff/admin/task/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Typography, Button, Modal, message } from 'antd';
import SuperAdminDashboardLayout from '@/components/Layout/SuperAdminDashboardLayout';
import TaskList from '@/components/Task/TaskList';
import TaskCreateForm from '@/components/Task/TaskCreateForm';
import TaskEditForm from '@/components/Task/TaskEditForm';
import TaskView from "@/components/Task/TaskView";
import TaskDelete from "@/components/Task/TaskDelete";
// import TaskComplete from "@/components/Task/TaskComplete";
import { Task } from '@/services/task/taskSliceAPI';
import { useAppSelector } from "@/store/store";
import { useRouter } from 'next/navigation';

const { Title } = Typography;

const SuperAdminTaskManagementPage = () => {
    const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const [isViewModalVisible, setIsViewModalVisible] = useState(false);
    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false)
    const [selectedTask, setSelectedTask] = useState<Task | null>(null);
    const [messageApi, contextHolder] = message.useMessage();
    const router = useRouter();
    const user = useAppSelector((state) => state.auth.user);
    

      useEffect(() => {
            if (!user || (user.userType !== "Staff" || user.role?.name?.toLowerCase() !== "super admin")) {
                messageApi.error("You are not authorized to view this page.");
                router.push('/auth');
            }
        }, [user, router]);

    const showCreateModal = () => {
        setIsCreateModalVisible(true);
    };

    const handleCreateSuccess = () => {
        setIsCreateModalVisible(false);
    };

    const handleEdit = (task: Task) => {
        setSelectedTask(task);
        setIsEditModalVisible(true);
    };

    const handleView = (task: Task) => {
        setSelectedTask(task);
        setIsViewModalVisible(true);
    };
     const handleDelete = (task: Task) => {
         setSelectedTask(task);
         setIsDeleteModalVisible(true);
     };

    const handleEditSuccess = () => {
        setIsEditModalVisible(false);
        setSelectedTask(null);
    };

    const handleEditCancel = () => {
        setIsEditModalVisible(false);
        setSelectedTask(null);
    };
      const handleCancelDelete = () => {
          setIsDeleteModalVisible(false);
          setSelectedTask(null);
      };

      const handleDeleteSuccess = () => {
          setIsDeleteModalVisible(false);
          setSelectedTask(null);
      };
 

    return (
        <SuperAdminDashboardLayout >
            <Title level={3}>Task Management</Title>
            <p>Manage tasks here.</p>

            <Button type="primary" onClick={showCreateModal} style={{ marginBottom: 16 }}>
                Create Task
            </Button>

            <TaskList
                onEdit={handleEdit}
                onView={handleView}
                onDelete={handleDelete}
                 
                
            />

            <Modal
                title="Create Task"
                open={isCreateModalVisible}
                onCancel={() => setIsCreateModalVisible(false)}
                footer={null}
            >
                <TaskCreateForm onSuccess={handleCreateSuccess} />
            </Modal>
            <Modal
                title="Edit Task"
                open={isEditModalVisible}
                onCancel={handleEditCancel}
                footer={null}
            >
                {selectedTask && (
                    <TaskEditForm
                        task={selectedTask}
                        onSuccess={handleEditSuccess}
                        onCancel={handleEditCancel}
                    />
                )}
            </Modal>
               <Modal
                    title="View Task"
                    open={isViewModalVisible}
                    onCancel={() => setIsViewModalVisible(false)}
                    footer={null}
                >
                    {selectedTask && (
                        <TaskView task={selectedTask} />
                    )}
                </Modal>
                 <Modal
                     title="Delete Task"
                     onCancel={handleCancelDelete}
                     open={isDeleteModalVisible}
                     footer={null}
                 >
                     {selectedTask && (
                         <TaskDelete
                             task={selectedTask}
                             onSuccess={handleDeleteSuccess}
                             onCancel={handleCancelDelete}
                         />
                     )}
                 </Modal>
        </SuperAdminDashboardLayout>
    );
};

export default SuperAdminTaskManagementPage;

===== File: /src/app/layout.tsx =====
// src/app/layout.tsx
'use client';

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import 'antd/dist/reset.css';
import { AntdRegistry } from '@ant-design/nextjs-registry';
import { Provider } from 'react-redux';
import store, { persistor } from '@/store/store';
import { PersistGate } from 'redux-persist/integration/react';
import { Layout} from 'antd';  
import React, { useEffect, useState } from "react";
import AppHeader from "@/components/Layout/Header";
import AppFooter from "@/components/Layout/Footer";
const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

// export const metadata: Metadata = {
//     title: "Hospital System",
//     description: "Generated by create next app",
// };

export default function RootLayout({
                                       children,
                                   }: Readonly<{
    children: React.ReactNode;
}>) {
   

    return (
        <html lang="en">
        <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <Provider store={store}>
            <PersistGate loading={null} persistor={persistor}>
                <AntdRegistry>
                <Layout className="layout" style={{ minHeight: '100vh' }}>
                    <AppHeader />
                        {children}
                        <AppFooter />
                        </Layout>
                </AntdRegistry>
            </PersistGate>
        </Provider>
        </body>
        </html>
    );
}

===== File: /src/app/page.tsx =====
import Image from "next/image";
import styles from "./page.module.css";

 // src/app/page.tsx
import { redirect } from 'next/navigation';

export default function Home() {
  redirect('/auth');
}

===== File: /src/components/Appointment/AppointmentCreateForm.tsx =====
// src/components/Appointment/AppointmentCreateForm.tsx
'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useCreateAppointmentMutation } from '@/services/appointment/appointmentSliceAPI';
import { Form, Input, Button, DatePicker, Select, message, Checkbox } from 'antd';
import dayjs from 'dayjs';
import { useGetDepartmentsQuery, Department } from "@/services/department/departmentSliceAPI";
import { useGetStaffQuery  } from "@/services/staff/staffSliceAPI";
import {Staff} from "@/services/staff/types";
import logger from "@/utils/logger"

interface AppointmentCreateFormProps {
    onSuccess: () => void;
}

const AppointmentCreateForm: React.FC<AppointmentCreateFormProps> = ({ onSuccess }) => {
    const [createAppointment, { isLoading }] = useCreateAppointmentMutation();
    const [form] = Form.useForm();
    const [autoAssignDoctor, setAutoAssignDoctor] = useState(true); // Initially checked (true)
    const [doctorOptions, setDoctorOptions] = useState<any[]>([]);
    const [selectedDepartment, setSelectedDepartment] = useState<string | null>(null);
    const [messageApi, contextHolder] = message.useMessage();

    const { data: departmentsData, isLoading: isDepartmentsLoading, isError: isDepartmentsError, error: departmentError } = useGetDepartmentsQuery({});
    const { data: staffData, isLoading: isStaffLoading, isError: isStaffError, error: staffError } = useGetStaffQuery({ department: selectedDepartment || "" });

    logger.silly("staff data:", staffData)
    console.log("seleced department::", selectedDepartment)

    const updateDoctorOptions = useCallback(() => {
        if (staffData?.staff) {
            const filteredDoctors = staffData.staff.filter(staff => staff.role?.name === "Doctor");
            console.log("doctors::", filteredDoctors);
            setDoctorOptions(filteredDoctors.map(doctor => ({
                key: doctor._id,
                label: `${doctor.firstName} ${doctor.lastName} - (${doctor.department.name})`,
                value: doctor._id,
            })));
        } else {
            setDoctorOptions([]);
        }
    }, [staffData]); // Only depend on staffData, which contains fetched staff

    useEffect(() => {
        updateDoctorOptions(); // Initial load and whenever staffData changes
    }, [staffData, updateDoctorOptions]);

    const onFinish = async (values: any) => {
        try {
            const formattedDate = values['date'] ? dayjs(values['date']).format('YYYY-MM-DD') : null;
            let doctorValue = null;
            if(!autoAssignDoctor) {
              doctorValue = values.doctor
            }
            const appointmentData = {
                ...values,
                date: formattedDate,
                doctor: doctorValue, // Send null if auto-assign
                department: values.department,
            };
            await createAppointment(appointmentData).unwrap();
             messageApi.success('Appointment created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            const  errorMessage = `Failed to create appointment: ${error?.data.message || 'Unknown error'}`;
             messageApi.error(errorMessage);
        }
    };

    const handleDepartmentChange = (value: string) => {
        setSelectedDepartment(value);
        form.setFieldsValue({ doctor: undefined }); // clear it from the form
    };

    const handleAutoAssignChange = (e: any) => {
        setAutoAssignDoctor(e.target.checked);
        if (e.target.checked) {
            form.setFieldsValue({ doctor: undefined });
        }
    };

    if (isDepartmentsError) {
        console.error("Error fetching departments:", departmentError);
        return <p>Error fetching departments. Please check the console.</p>;
    }

    return (
        <>
            {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Patient ID"
                    name="patient"
                    rules={[{ required: true, message: 'Please enter patient ID!' }]}
                >
                    <Input />
                </Form.Item>

                <Form.Item
                    label="Department"
                    name="department"
                    rules={[{ required: true, message: 'Please select department ID!' }]}
                >
                    <Select
                        placeholder="Select Department"
                        loading={isDepartmentsLoading}
                        onChange={handleDepartmentChange}
                        options={departmentsData?.departments?.map((department: Department) => ({
                            label: department.name,
                            value: department._id,
                        }))}
                    />
                </Form.Item>

                <Form.Item
                    label="Doctor"
                    name="doctor"
                    rules={[{ required: !autoAssignDoctor, message: 'Please select a doctor!' }]}
                >
                   <Select
                        placeholder="Select Doctor"
                        disabled={isStaffLoading || autoAssignDoctor}
                        loading={isStaffLoading}
                    >
                        {doctorOptions.map(option => (
                            <Select.Option key={option.key} value={option.value}>{option.label}</Select.Option>
                        ))}
                    </Select>
                </Form.Item>

                <Form.Item
                    name="autoAssignDoctor"
                    valuePropName="checked"
                    initialValue={autoAssignDoctor} // Set initial value
                >
                    <Checkbox onChange={handleAutoAssignChange}>Auto Assign Doctor</Checkbox>
                </Form.Item>

                <Form.Item
                  label="Date"
                  name="date"
                  rules={[{ required: true, message: 'Please select a date!' }]}
                >
                  <DatePicker
                    style={{ width: '100%' }}
                    format="YYYY-MM-DD"
                  />
                </Form.Item>

              <Form.Item
                label="Time"
                name="time"
              >
                <Input placeholder="HH:MM" />
              </Form.Item>

                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Create Appointment
                    </Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default AppointmentCreateForm;

===== File: /src/components/Appointment/AppointmentDelete.tsx =====
// src/components/Appointment/AppointmentDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';
import { useDeleteAppointmentMutation } from '@/services/appointment/appointmentSliceAPI';

interface AppointmentDeleteProps {
    appointment: Appointment;
    onSuccess: () => void;
    onCancel: () => void;
}

const AppointmentDelete: React.FC<AppointmentDeleteProps> = ({ appointment, onSuccess, onCancel }) => {
    const [deleteAppointment, { isLoading }] = useDeleteAppointmentMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deleteAppointment(appointment._id).unwrap();
            messageApi.success('Appointment deleted successfully');
            onSuccess();
        } catch (error: any) {
            const  errorMessage = `Failed to delete appointment: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default AppointmentDelete;

===== File: /src/components/Appointment/AppointmentEditForm.tsx =====
// src/components/Appointment/AppointmentEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdateAppointmentMutation } from '@/services/appointment/appointmentSliceAPI';
import { Form, Input, Button, message, DatePicker, Select } from 'antd';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';
import dayjs from 'dayjs'

interface AppointmentEditFormProps {
    appointment: Appointment;
    onSuccess: () => void;
    onCancel: () => void;
}

const AppointmentEditForm: React.FC<AppointmentEditFormProps> = ({ appointment, onSuccess, onCancel }) => {
    const [updateAppointment, { isLoading }] = useUpdateAppointmentMutation();
    const [form] = Form.useForm();
     const [messageApi, contextHolder] = message.useMessage();

    useEffect(() => {
        form.setFieldsValue({
            patient: appointment.patient._id,
            doctor: appointment.doctor._id,
            department: appointment.department._id,
            date: dayjs(appointment.date),   
            status: appointment.status,
        });
    }, [form, appointment]);

    const onFinish = async (values: any) => {
        try {
                  const formattedDate = values['date'] ? dayjs(values['date']).format('YYYY-MM-DD') : null;
                 const appointmentData = {
                    ...values,
                  date: formattedDate,
                };
            await updateAppointment({ id: appointment._id, data: appointmentData }).unwrap();
          messageApi.success('Appointment updated successfully');
            onSuccess();
        } catch (error: any) {
            const  errorMessage = `Failed to delete appointment: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (
        <>   {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Patient"
                    name="patient"
                    rules={[{ required: true, message: 'Please enter patient ID!' }]}
                >
                    <Input disabled />
                </Form.Item>
                <Form.Item
                    label="Doctor"
                    name="doctor"
                    rules={[{ required: true, message: 'Please enter doctor!' }]}
                >
                    <Input disabled />
                </Form.Item>
                <Form.Item
                    label="Department"
                    name="department"
                    rules={[{ required: true, message: 'Please enter department!' }]}
                >
                    <Input disabled />
                </Form.Item>

                <Form.Item
                  label="Date"
                  name="date"
                  rules={[{ required: true, message: 'Please select a date!' }]}
                >
                  <DatePicker
                    style={{ width: '100%' }}
                    format="YYYY-MM-DD"
                  />
                </Form.Item>

                <Form.Item
                  label="Status"
                  name="status"
                  rules={[{ required: true, message: 'Please select a status!' }]}
                >
                  <Select>
                    <Select.Option value="pending">Pending</Select.Option>
                    <Select.Option value="confirmed">Confirmed</Select.Option>
                    <Select.Option value="rescheduled">Rescheduled</Select.Option>
                    <Select.Option value="canceled">Canceled</Select.Option>
                  </Select>
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Update Appointment
                    </Button>
                    <Button onClick={onCancel}>Cancel</Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default AppointmentEditForm;

===== File: /src/components/Appointment/AppointmentList.tsx =====
// src/components/Appointment/AppointmentList.tsx
'use client';

import React, { useState } from 'react';
import { useGetAppointmentsQuery } from '@/services/appointment/appointmentSliceAPI';
import { Table, Button, Space, Input } from 'antd';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';
import { EditOutlined, DeleteOutlined, EyeOutlined, SearchOutlined, CloseOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader"
import dayjs from 'dayjs'; 
import logger from "@/utils/logger"

interface AppointmentListProps {
    onView?: (appointment: Appointment) => void;
    onEdit?: (appointment: Appointment) => void;
    onDelete?: (appointment: Appointment) => void;
}

const AppointmentList: React.FC<AppointmentListProps> = ({ onEdit, onView, onDelete }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const { data: appointmentData, isLoading, isError, error } = useGetAppointmentsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm
    });
    logger.silly("appointmentlist::", appointmentData)

    const totalAppointmentCount = appointmentData?.totalAppointments || 0;

    const handleTableChange = (current:number, pageSize:number) => {
        setCurrentPage(current);
        setPageSize(pageSize);
   };

    const columns = [
        {
            title: 'Patient',
            dataIndex: 'patient',
            key: 'patient',
            render: (patient: { firstName: string; lastName: string }) => `${patient.firstName} ${patient.lastName}`,
        },
        {
            title: 'Doctor',
            dataIndex: 'doctor',
            key: 'doctor',
            render: (doctor: { firstName: string; lastName: string }) => `${doctor.firstName} ${doctor.lastName}`,
        },
        {
            title: 'Department',
            dataIndex: 'department',
            key: 'department',
            render: (department: { name: string }) => department.name,
        },
        {
            title: 'Date',
            dataIndex: 'date',
            key: 'date',
            render: (date: string) => date ? dayjs(date).format('MMMM D, YYYY') : 'N/A', // Format the date
        },
        {
            title: 'Status',
            dataIndex: 'status',
            key: 'status',
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Appointment) => (
                 <Space size="middle">
                                      {onView && (
                                          <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                                              View
                                          </Button>
                                      )}
                                      {onEdit && (
                                          <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                                              Edit
                                          </Button>
                                      )}
                                      {onDelete && (
                                          <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                                              Delete
                                          </Button>
                                      )}
                                  </Space>
            ),
        },
    ];

    if (isLoading) return <Loader />;
    if (isError) return <p>Error fetching appointments:  { (error as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
             <Input
                placeholder="Search appointments..."
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setCurrentPage(1); // Reset to first page on new search
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={(e) => {
                            e.preventDefault();
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />
            <Table
                columns={columns}
                dataSource={appointmentData?.appointments}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalAppointmentCount,
                    showSizeChanger: true,
                    onChange: handleTableChange,
                }}
            />
        </>
    );
};

export default AppointmentList;

===== File: /src/components/Appointment/AppointmentView.tsx =====
// src/components/Appointment/AppointmentView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Appointment } from '@/services/appointment/appointmentSliceAPI';
import dayjs from 'dayjs';  

interface AppointmentViewProps {
    appointment: Appointment;
}

const AppointmentView: React.FC<AppointmentViewProps> = ({ appointment }) => {
    const formattedDate = appointment.date ? dayjs(appointment.date).format('MMMM D, YYYY') : 'N/A';

    return (
        <div>
            <Typography.Title level={4}>Appointment Details</Typography.Title>
            <Descriptions bordered column={1}>
            <Descriptions.Item label="Patient ID">
                    {appointment.patient._id}  
                </Descriptions.Item>
                <Descriptions.Item label="Patient">
                    {appointment.patient.firstName} {appointment.patient.lastName}
                </Descriptions.Item>
                <Descriptions.Item label="Doctor ID">
                    {appointment.doctor._id} 
                </Descriptions.Item>
                <Descriptions.Item label="Doctor">
                    {appointment.doctor.firstName} {appointment.doctor.lastName}
                </Descriptions.Item>
                <Descriptions.Item label="Department">
                    {appointment.department.name}
                </Descriptions.Item>
                <Descriptions.Item label="Date">{formattedDate}</Descriptions.Item>
                <Descriptions.Item label="Status">{appointment.status}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default AppointmentView;

===== File: /src/components/Auth/AdminRegisterForm.tsx =====
"use client";

import React, { useState } from 'react';
import { useRegisterMutation } from '@/services/auth/authSliceAPI';
import { Form, Input, Button, Typography, Alert, Select, DatePicker } from 'antd';
import { LockOutlined, MailOutlined, UserOutlined, PhoneOutlined, HomeOutlined } from '@ant-design/icons';
import Link from 'next/link';
import moment from 'moment';
import logger from "@/utils/logger1"
const { Title } = Typography;

const AdminRegisterForm: React.FC = () => {
    const [form] = Form.useForm();
    const [register, { isLoading, isError, error }] = useRegisterMutation();
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    const onFinish = async (values: any) => {
        try {
            // Format the date of birth using moment.js
            const formattedDob = values['dateOfBirth'] ? moment(values['dateOfBirth']).format('YYYY-MM-DD') : null;

            // Set userType and role for admin registration
            const registrationData = {
                ...values,
                dob: formattedDob,
                userType: 'Staff', // Assuming "Staff" for admin
                role: 'Admin',
                department: 'Admin',
            };
            const response = await register(registrationData).unwrap();
            logger.silly(JSON.stringify(response))
            console.log(response)
            setSuccessMessage('Admin Registration successful!');
            form.resetFields();
        } catch (err: any) {
            console.error('Registration failed:', err.message || err.error);
        }
    };

    const genderOptions = [
        { value: 'Male', label: 'Male' },
        { value: 'Female', label: 'Female' },
        { value: 'Other', label: 'Other' },
    ];

      const disabledFutureDate = (current: moment.Moment) => {
        // Disable dates after today
        return current && current > moment().endOf('day');
    };

    return (
        <div style={{ padding: 24, minHeight: 360 }}>
            <Title level={2} style={{ textAlign: 'center', marginBottom: 24 }}>Admin Register</Title>
            {successMessage && <Alert message={successMessage} type="success" showIcon style={{ marginBottom: 24 }} />}
            {isError && error?.data?.message && <Alert message={error.data.message} type="error" showIcon style={{ marginBottom: 24 }} />}
            <Form
                form={form}
                name="register"
                onFinish={onFinish}
                style={{ maxWidth: 400, margin: '0 auto' }}
            >
                <Form.Item
                    name="firstName"
                    rules={[{ required: true, message: 'Please enter your first name!' }]}
                >
                    <Input prefix={<UserOutlined className="site-form-item-icon" />} placeholder="First Name" />
                </Form.Item>
                <Form.Item
                    name="lastName"
                    rules={[{ required: true, message: 'Please enter your last name!' }]}
                >
                    <Input prefix={<UserOutlined className="site-form-item-icon" />} placeholder="Last Name" />
                </Form.Item>
                <Form.Item
                    name="email"
                    rules={[{ required: true, message: 'Please enter your email!', type: 'email' }]}
                >
                    <Input prefix={<MailOutlined className="site-form-item-icon" />} placeholder="Email" />
                </Form.Item>
                <Form.Item
                    name="password"
                    rules={[{ required: true, message: 'Please enter your password!', min: 6 }]}
                >
                    <Input
                        prefix={<LockOutlined className="site-form-item-icon" />}
                        type="password"
                        placeholder="Password"
                    />
                </Form.Item>
                <Form.Item
                    name="phone"
                    rules={[{ required: true, message: 'Please enter your phone number!' }]}
                >
                    <Input prefix={<PhoneOutlined className="site-form-item-icon" />} placeholder="Phone Number" />
                </Form.Item>
                 <Form.Item
                    name="address"
                    rules={[{ required: true, message: 'Please enter your address!' }]}
                >
                    <Input prefix={<HomeOutlined className="site-form-item-icon" />} placeholder="Address" />
                </Form.Item>
                  <Form.Item
                    name="gender"
                    rules={[{ required: true, message: 'Please select your gender!' }]}
                >
                  <Select
                    placeholder="Select Gender"
                    options={genderOptions}
                  />
                </Form.Item>
                <Form.Item
                   name="dateOfBirth"
                   rules={[{ required: true, message: 'Please select your date of birth!' }]}
                 >
                    <DatePicker
                     style={{ width: '100%' }}
                     disabledDate={disabledFutureDate}
                     format="YYYY-MM-DD"
                     picker="date"
                     placeholder="Select Date of Birth"
                     />
                 </Form.Item>

                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading} style={{ width: '100%' }}>
                        {isLoading ? 'Registering...' : 'Register'}
                    </Button>
                </Form.Item>
                <div style={{ textAlign: 'center', marginTop: 12 }}>
                    Already have an account? <Link href="/auth/staff/login">Login</Link>
                </div>
            </Form>
        </div>
    );
};

export default AdminRegisterForm;

===== File: /src/components/Auth/PasswordResetForm.tsx =====
// src/components/Auth/PasswordResetForm.tsx
"use client";

import React, { useState } from 'react';
import { useResetPasswordMutation } from '@/services/auth/authSliceAPI';
import { Form, Input, Button, Typography, message, Card } from 'antd'; // Added Card
import { LockOutlined } from '@ant-design/icons';

const { Title } = Typography;

interface PasswordResetFormProps { }

const PasswordResetForm: React.FC<PasswordResetFormProps> = () => {
    const [resetPassword, { isLoading, isError, error, isSuccess }] = useResetPasswordMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();

    const onFinish = async (values: any) => {
        try {
            await resetPassword({ currentPassword: values.currentPassword, newPassword: values.newPassword }).unwrap();
            messageApi.success('Password reset successfully!');
            form.resetFields();
        } catch (err: any) {
            console.error('Password reset failed:', err.data.message || err.error);
            messageApi.error((err as any)?.data?.message || 'An unexpected error occurred.');
        }
    };

    return (
        <>
            {contextHolder}
            <Card
                title={<Title level={3} style={{ textAlign: 'center', margin: 0 }}>Reset Password</Title>}
                style={{ maxWidth: 600, margin: 'auto' }} // Centered Card
            >
                <Form
                    form={form}
                    name="reset-password"
                    onFinish={onFinish}
                    layout="vertical" // Added layout="vertical" for better spacing
                >
                    <Form.Item
                        label="Current Password"
                        name="currentPassword"
                        rules={[{ required: true, message: 'Please enter your current password!' }]}
                    >
                        <Input.Password
                            prefix={<LockOutlined className="site-form-item-icon" />}
                            placeholder="Current Password"
                        />
                    </Form.Item>
                    <Form.Item
                        label="New Password"
                        name="newPassword"
                        rules={[
                            { required: true, message: 'Please enter your new password!', min: 6 },
                        ]}
                    >
                        <Input.Password
                            prefix={<LockOutlined className="site-form-item-icon" />}
                            placeholder="New Password"
                        />
                    </Form.Item>
                    <Form.Item>
                        <Button type="primary" htmlType="submit" loading={isLoading} style={{ width: '100%' }}>
                            {isLoading ? 'Resetting...' : 'Reset Password'}
                        </Button>
                    </Form.Item>
                </Form>
            </Card>
        </>
    );
};

export default PasswordResetForm;

===== File: /src/components/Auth/PatientLoginForm.tsx =====
// src/components/auth/PatientLoginForm.tsx
"use client";

import React from 'react';
import { useLoginMutation } from '@/services/auth/authSliceAPI';
import { useRouter } from 'next/navigation';
import { Form, Input, Button, Typography, Alert } from 'antd';
import { LockOutlined, MailOutlined} from '@ant-design/icons';
import { useAppDispatch } from '@/store/store';
import Link from 'next/link';
import logger from "@/utils/logger1"

const { Title } = Typography;

const PatientLoginForm: React.FC = () => {
    const [login, { isLoading, isError, error }] = useLoginMutation();
    const router = useRouter();
    const [form] = Form.useForm();
    const dispatch = useAppDispatch();

    const onFinish = async (values: any) => {
        try {
            const response = await login(values).unwrap();

            if (response.user.userType === "Patient") {
                // Construct the dashboard route for patients
                const dashboardRoute = `/dashboard/patient`; // Direct route to patient dashboard
                router.push(dashboardRoute);
                

            } else {
                logger.warn('Unexpected user type:', response.user.userType);
                // Optionally, redirect to a default dashboard or display an error message
                // router.push('/default-dashboard');
            }

        } catch (err: any) {
            console.error('Patient Login failed:', err.message || err.error);
        }
    };

    return (
        <div style={{ padding: 24, minHeight: 360 }}>
            <Title level={2} style={{ textAlign: 'center', marginBottom: 24 }}>Patient Login</Title>
            {isError && error?.data?.message && <Alert message={error.data.message} type="error" showIcon style={{ marginBottom: 24 }} />}
            <Form
                form={form}
                name="login"
                onFinish={onFinish}
                style={{ maxWidth: 400, margin: '0 auto' }}
            >
                <Form.Item
                    name="email"
                    rules={[{ required: true, message: 'Please enter your email!', type: 'email' }]}
                >
                    <Input prefix={<MailOutlined className="site-form-item-icon" />} placeholder="Patient Email" />
                </Form.Item>
                <Form.Item
                    name="password"
                    rules={[{ required: true, message: 'Please enter your password!' }]}
                >
                    <Input.Password
                        prefix={<LockOutlined className="site-form-item-icon" />}
                        type="password"
                        placeholder="Password"
                         visibilityToggle
                    />
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading} style={{ width: '100%' }}>
                        {isLoading ? 'Logging In...' : 'Login'}
                    </Button>
                </Form.Item>
                <div style={{ textAlign: 'center', marginTop: 12 }}>
                    Don't have an account? <Link href="/auth/patient/register">Sign Up</Link>
                </div>
            </Form>
        </div>
    );
};

export default PatientLoginForm;

===== File: /src/components/Auth/PatientRegisterForm.tsx =====
// src/components/auth/PatientRegisterForm.tsx
"use client";

import React, { useState } from 'react';
import { useRegisterMutation } from '@/services/auth/authSliceAPI';
import { Form, Input, Button, Typography, Alert, Select, DatePicker } from 'antd';
import { LockOutlined, MailOutlined, UserOutlined, PhoneOutlined, HomeOutlined } from '@ant-design/icons';
import Link from 'next/link';
import moment from 'moment';
import logger from "@/utils/logger1"

const { Title } = Typography;

const PatientRegisterForm: React.FC = () => {
    const [form] = Form.useForm();
    const [register, { isLoading, isError, error }] = useRegisterMutation();
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    const onFinish = async (values: any) => {
        try {
            // Format the date of birth using moment.js
            const formattedDob = values['dateOfBirth'] ? moment(values['dateOfBirth']).format('YYYY-MM-DD') : null;

            const registrationData = {
                ...values,
                dob: formattedDob,
                userType: 'Patient', // Set to "Patient"
            };

            const response = await register(registrationData).unwrap();
            logger.silly(JSON.stringify(response))
            console.log(response)
            setSuccessMessage('Patient Registration successful!');
            form.resetFields();
        } catch (err: any) {
            console.error('Registration failed:', err.message || err.error);
        }
    };

    const genderOptions = [
        { value: 'Male', label: 'Male' },
        { value: 'Female', label: 'Female' },
        { value: 'Other', label: 'Other' },
    ];

    const disabledFutureDate = (current: moment.Moment) => {
        // Disable dates after today
        return current && current > moment().endOf('day');
    };

    return (
        <div style={{ padding: 24, minHeight: 360 }}>
            <Title level={2} style={{ textAlign: 'center', marginBottom: 24 }}>Patient Register</Title>
            {successMessage && <Alert message={successMessage} type="success" showIcon style={{ marginBottom: 24 }} />}
            {isError && error?.data?.message && <Alert message={error.data.message} type="error" showIcon style={{ marginBottom: 24 }} />}
            <Form
                form={form}
                name="register"
                onFinish={onFinish}
                style={{ maxWidth: 400, margin: '0 auto' }}
            >
                <Form.Item
                    name="firstName"
                    rules={[{ required: true, message: 'Please enter your first name!' }]}
                >
                    <Input prefix={<UserOutlined className="site-form-item-icon" />} placeholder="First Name" />
                </Form.Item>
                <Form.Item
                    name="lastName"
                    rules={[{ required: true, message: 'Please enter your last name!' }]}
                >
                    <Input prefix={<UserOutlined className="site-form-item-icon" />} placeholder="Last Name" />
                </Form.Item>
                <Form.Item
                    name="email"
                    rules={[{ required: true, message: 'Please enter your email!', type: 'email' }]}
                >
                    <Input prefix={<MailOutlined className="site-form-item-icon" />} placeholder="Email" />
                </Form.Item>
                <Form.Item
                    name="password"
                    rules={[{ required: true, message: 'Please enter your password!', min: 6 }]}
                >
                    <Input
                        prefix={<LockOutlined className="site-form-item-icon" />}
                        type="password"
                        placeholder="Password"
                    />
                </Form.Item>
                <Form.Item
                    name="phone"
                    rules={[{ required: true, message: 'Please enter your phone number!' }]}
                >
                    <Input prefix={<PhoneOutlined className="site-form-item-icon" />} placeholder="Phone Number" />
                </Form.Item>
                 <Form.Item
                    name="address"
                    rules={[{ required: true, message: 'Please enter your address!' }]}
                >
                    <Input prefix={<HomeOutlined className="site-form-item-icon" />} placeholder="Address" />
                </Form.Item>
                  <Form.Item
                    name="gender"
                    rules={[{ required: true, message: 'Please select your gender!' }]}
                >
                  <Select
                    placeholder="Select Gender"
                    options={genderOptions}
                  />
                </Form.Item>
                <Form.Item
                   name="dateOfBirth"
                   rules={[{ required: true, message: 'Please select your date of birth!' }]}
                 >
                    <DatePicker
                     style={{ width: '100%' }}
                     disabledDate={disabledFutureDate}
                     format="YYYY-MM-DD"
                     picker="date"
                     placeholder="Select Date of Birth"
                     />
                 </Form.Item>

                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading} style={{ width: '100%' }}>
                        {isLoading ? 'Registering...' : 'Register'}
                    </Button>
                </Form.Item>
                <div style={{ textAlign: 'center', marginTop: 12 }}>
                    Already have an account? <Link href="/auth/patient/login">Login</Link>
                </div>
            </Form>
        </div>
    );
};

export default PatientRegisterForm;

===== File: /src/components/Auth/ProfileViewForm.tsx =====
// src/components/Auth/ProfileViewForm.tsx
"use client";

import React, { useEffect } from 'react';
import { useGetProfileQuery } from '@/services/auth/authSliceAPI';
import { Typography, Descriptions, Avatar, Space, Card } from 'antd'; // Added Card
import { UserOutlined } from '@ant-design/icons';
import { Staff, Patient } from '@/services/auth/types';
import Loader from '@/components/Layout/Loader';
import logger from '@/utils/logger';
const { Title, Text } = Typography;

interface ProfileViewFormProps { }

const ProfileViewForm: React.FC<ProfileViewFormProps> = () => {
    const { data: user, isLoading, isError, error } = useGetProfileQuery();
    logger.silly("user::", user)
    if (isLoading) return <Loader />;
    if (isError) return <p>Error fetching profile: {(error as any)?.data?.message || "An unexpected error occurred."}</p>;

    if (!user) {
        return <p>No profile information available.</p>;
    }

    return (
        <Card
            title={<Title level={3} style={{ textAlign: 'center', margin: 0 }}>My Profile</Title>}
            style={{ maxWidth: 600, margin: 'auto' }}  
        >
            <div style={{ textAlign: 'center', marginBottom: 24 }}>
                <Space align="center">
                    <Avatar size={80} icon={<UserOutlined />} />
                </Space>
            </div>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="First Name"><Text>{user.firstName}</Text></Descriptions.Item>
                <Descriptions.Item label="Last Name"><Text>{user.lastName}</Text></Descriptions.Item>
                <Descriptions.Item label="Email"><Text>{user.email}</Text></Descriptions.Item>
                <Descriptions.Item label="Phone"><Text>{user.phone}</Text></Descriptions.Item>
                <Descriptions.Item label="Address"><Text>{user.address}</Text></Descriptions.Item>
                <Descriptions.Item label="Gender"><Text>{user.gender}</Text></Descriptions.Item>

                {/* Conditionally render Staff-specific information */}
                {user.userType === "Staff" && (
                    <>
                        <Descriptions.Item label="Role"><Text>{(user as Staff).role?.name || 'N/A'}</Text></Descriptions.Item>
                        <Descriptions.Item label="Department"><Text>{(user as Staff).department?.name || 'N/A'}</Text></Descriptions.Item>
                    </>
                )}
               
            </Descriptions>
        </Card>
    );
};

export default ProfileViewForm;

===== File: /src/components/Auth/StaffLoginForm.tsx =====
// src/components/auth/StaffLoginForm.tsx
"use client";

import React from 'react';
import { useLoginMutation } from '@/services/auth/authSliceAPI';
import { useRouter } from 'next/navigation';
import { Form, Input, Button, Typography, Alert, message } from 'antd';
import { LockOutlined, MailOutlined, EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';
import Link from 'next/link';
import { useAppDispatch } from '@/store/store';
import logger from "@/utils/logger";

const { Title } = Typography;

const StaffLoginForm: React.FC = () => {
    const [login, { isLoading, isError, error }] = useLoginMutation();
    const router = useRouter();
    const [form] = Form.useForm();
    const dispatch = useAppDispatch();

    const onFinish = async (values: any) => {
        try {
            const response = await login(values).unwrap();
            logger.silly("response::", response)

            if (response.user.userType !== "Staff" || !response.user.role) {
                message.error("Login failed: Invalid user type or staff role. Please contact support.");
                return; // Early return for non-staff users
            }

            if (typeof response.user.role.name !== 'string') {
                console.warn('role.name is not a string:', response.user.role);
                message.error("Login failed: Invalid staff role name. Please contact support.");
                return; // Prevent further execution if role.name is not a string
            }

            const roleName = response.user.role.name.toLowerCase();

            switch (roleName) {
                case "super admin":
                    router.push(`/dashboard/staff/super-admin`);
                    break;
                case "admin":
                    router.push(`/dashboard/staff/admin`);
                    break;
                default:
                    router.push(`/dashboard/staff/${roleName}`);
                    break;
            }

        } catch (err: any) {
            console.error('Staff Login failed:', err.data.message || err.error);
            message.error(`Staff Login failed: ${err.data.message || err.error || "Unknown error."}`); // Show error message
        }
    };

    return (
        <div style={{ padding: 24, minHeight: 360 }}>
            <Title level={2} style={{ textAlign: 'center', marginBottom: 24 }}>Staff Login</Title>
            {isError && error?.data?.message && <Alert message={error.data.message} type="error" showIcon style={{ marginBottom: 24 }} />}
            <Form
                form={form}
                name="login"
                onFinish={onFinish}
                style={{ maxWidth: 400, margin: '0 auto' }}
            >
                <Form.Item
                    name="email"
                    rules={[{ required: true, message: 'Please enter your email!', type: 'email' }]}
                >
                    <Input prefix={<MailOutlined className="site-form-item-icon" />} placeholder="Staff Email" />
                </Form.Item>
                <Form.Item
                    name="password"
                    rules={[{ required: true, message: 'Please enter your password!' }]}
                >
                    <Input.Password
                        prefix={<LockOutlined className="site-form-item-icon" />}
                         type="password"
                        placeholder="Password"
                       visibilityToggle
                    />
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading} style={{ width: '100%' }}>
                        {isLoading ? 'Logging In...' : 'Login'}
                    </Button>
                </Form.Item>
                <div style={{ textAlign: 'center', marginTop: 12 }}>
                    Don't have an account? <Link href="/auth/staff/register/admin">Sign Up</Link>
                </div>
            </Form>
        </div>
    );
};

export default StaffLoginForm;

===== File: /src/components/Department/DepartmentCreateForm.tsx =====
// src/components/Department/DepartmentCreateForm.tsx
'use client';

import React from 'react';
import { useCreateDepartmentMutation } from '@/services/department/departmentSliceAPI';
import { Form, Input, Button, message } from 'antd';
import { DepartmentCreateRequest } from '@/services/department/departmentSliceAPI';

interface DepartmentCreateFormProps {
    onSuccess: () => void;
}

const DepartmentCreateForm: React.FC<DepartmentCreateFormProps> = ({ onSuccess }) => {
    const [createDepartment, { isLoading, isError: isCreateDepartmentError, error: createDepartmentError }] = useCreateDepartmentMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();

    const onFinish = async (values: DepartmentCreateRequest) => {
        try {
            await createDepartment(values).unwrap();
            messageApi.success('Department created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to create department: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (
        <>
        {contextHolder}
        <Form form={form} layout="vertical" onFinish={onFinish}>
            <Form.Item
                label="Name"
                name="name"
                rules={[{ required: true, message: 'Please enter department name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Description"
                name="description"
                rules={[{ required: true, message: 'Please enter department description!' }]}
            >
                <Input.TextArea />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoading}>
                    Create Department
                </Button>
            </Form.Item>
        </Form>
        </>
    );
};

export default DepartmentCreateForm;

===== File: /src/components/Department/DepartmentDelete.tsx =====
// src/components/Department/DepartmentDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Department } from '@/services/department/departmentSliceAPI';
import { useDeleteDepartmentMutation } from '@/services/department/departmentSliceAPI';

interface DepartmentDeleteProps {
    department: Department;
    onSuccess: () => void;
    onCancel: () => void;
}

const DepartmentDelete: React.FC<DepartmentDeleteProps> = ({ department, onSuccess, onCancel }) => {
    const [deleteDepartment, { isLoading }] = useDeleteDepartmentMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deleteDepartment(department._id).unwrap();
            messageApi.success('Department deleted successfully');
            onSuccess();
        } catch (error: any) {
            messageApi.error(`Failed to delete department: ${error?.data.message || 'Unknown error'}`);
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default DepartmentDelete;

===== File: /src/components/Department/DepartmentEditForm.tsx =====
// src/components/Department/DepartmentEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdateDepartmentMutation } from '@/services/department/departmentSliceAPI';
import { Form, Input, Button, message } from 'antd';
import { Department, DepartmentUpdateRequest } from '@/services/department/departmentSliceAPI';

interface DepartmentEditFormProps {
    department: Department;
    onSuccess: () => void;
    onCancel: () => void;
}

const DepartmentEditForm: React.FC<DepartmentEditFormProps> = ({ department, onSuccess, onCancel }) => {
    const [updateDepartment, { isLoading, isError: isUpdateDepartmentError, error: updateDepartmentError }] = useUpdateDepartmentMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();

    useEffect(() => {
        form.setFieldsValue({
            name: department.name,
            description: department.description,
        });
    }, [form, department]);

    const onFinish = async (values: any) => {
        try {
            const departmentData: DepartmentUpdateRequest = {
                name: values.name,
                description: values.description,
            };

            await updateDepartment({ id: department._id, data: departmentData }).unwrap();
            messageApi.success('Department updated successfully');
            onSuccess();
        } catch (error: any) {
            const  errorMessage = `Failed to update department: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (
        <>
         {contextHolder}
        
        <Form form={form} layout="vertical" onFinish={onFinish}>
            <Form.Item
                label="Name"
                name="name"
                rules={[{ required: true, message: 'Please enter department name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Description"
                name="description"
                rules={[{ required: true, message: 'Please enter department description!' }]}
            >
                <Input.TextArea />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoading}>
                    Update Department
                </Button>
                <Button onClick={onCancel}>Cancel</Button>
            </Form.Item>
        </Form>
        </>
    );
};

export default DepartmentEditForm;

===== File: /src/components/Department/DepartmentList.tsx =====
// src/components/Department/DepartmentList.tsx
'use client';

import React, { useState } from 'react';
import { useGetDepartmentsQuery } from '@/services/department/departmentSliceAPI';
import { Table, Button, Space, Input } from 'antd';
import { Department } from '@/services/department/departmentSliceAPI';
import { EditOutlined, DeleteOutlined, SearchOutlined, CloseOutlined, EyeOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader"

interface DepartmentListProps {
    onView?: (department: Department) => void;
    onEdit?: (department: Department) => void;
    onDelete?: (department: Department) => void;
}

const DepartmentList: React.FC<DepartmentListProps> = ({ onEdit, onView, onDelete }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');

    const { data: departmentData, isLoading, isError: isGetDepartmentsError, error: getDepartmentsError } = useGetDepartmentsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
    });

    const totalDepartmentsCount = departmentData?.totalDepartments || 0;
    const departments = departmentData?.departments || [];

    const handleTableChange = (current: number, pageSize: number) => {
        setCurrentPage(current);
        setPageSize(pageSize);
    };

    const columns = [
        {
            title: '#',
            key: 'index',
            render: (text: string, record: Department, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Name',
            dataIndex: 'name',
            key: 'name',
        },
        {
            title: 'Description',
            dataIndex: 'description',
            key: 'description',
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Department) => (
                <Space size="middle">
                                     {onView && (
                                         <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                                             View
                                         </Button>
                                     )}
                                     {onEdit && (
                                         <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                                             Edit
                                         </Button>
                                     )}
                                     {onDelete && (
                                         <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                                             Delete
                                         </Button>
                                     )}
                                 </Space>
            ),
        },
    ];

    if (isLoading) return <Loader />;
    if (isGetDepartmentsError) return  <p>Error fetching departments: { (getDepartmentsError as any)?.data?.message || "An unexpected error occurred."}</p>

    return (
        <>
            <Input
                placeholder="Search departments..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={(e) => {
                            e.preventDefault();
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />
            <Table
                columns={columns}
                dataSource={departments}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalDepartmentsCount,
                    showSizeChanger: true,
                    onChange: handleTableChange,
                }}
            />
        </>
    );
};

export default DepartmentList;

===== File: /src/components/Department/DepartmentView.tsx =====
// src/components/Department/DepartmentView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Department } from '@/services/department/departmentSliceAPI';
import { formatDate, formatDateWithTime } from '@/utils/dateUtils';

interface DepartmentViewProps {
    department: Department;
}

const DepartmentView: React.FC<DepartmentViewProps> = ({ department }) => {
    return (
        <div>
            <Typography.Title level={4}>Department Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="ID">{department._id}</Descriptions.Item>
                <Descriptions.Item label="Name">{department.name}</Descriptions.Item>
                <Descriptions.Item label="Description">{department.description}</Descriptions.Item>
                <Descriptions.Item label="Created At">{formatDateWithTime(department.createdAt)}</Descriptions.Item>
                <Descriptions.Item label="Updated At">{formatDateWithTime(department.updatedAt)}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default DepartmentView;

===== File: /src/components/Layout/AdminDashboardLayout.tsx =====
// src/components/Layout/AdminDashboardLayout.tsx
import React, { ReactNode } from 'react';
import { Layout, Menu, Typography } from 'antd';
import {
    UserOutlined,
    LaptopOutlined,
    CalendarOutlined,
    FileTextOutlined,
    TeamOutlined,
    SolutionOutlined,
    ApartmentOutlined,
    SettingOutlined,
    KeyOutlined,
    ClockCircleOutlined, // Add calendar icon
    NotificationOutlined,
    UnorderedListOutlined,
    ProfileOutlined,
    ScheduleOutlined,
} from '@ant-design/icons';
import Link from 'next/link';
import { useAppSelector } from '@/store/store';
import { usePathname } from 'next/navigation';
// Add calendar icon

const { Header, Content, Sider } = Layout;

interface DashboardLayoutProps {
    children: ReactNode;
}

const AdminDashboardLayout: React.FC<DashboardLayoutProps> = ({ children}) => {
    const user = useAppSelector((state) => state.auth.user);
    const pathname = usePathname();
    const role= "Admin"
    const dashboardRoute = "/dashboard/staff/admin"


    const getSelectedKey = () => {
       if (pathname === dashboardRoute) {
            return '1';
        } else if (pathname === `${dashboardRoute}/patient`) {
            return '2';
        } else if (pathname === `${dashboardRoute}/staff`) {
            return '3';
        } else if (pathname === `${dashboardRoute}/department`) {
            return '4';
         } else if (pathname === `${dashboardRoute}/appointment`) {
            return '5';
        } else if (pathname === `${dashboardRoute}/medical-record`) {
            return '6';
        } else if (pathname === `${dashboardRoute}/shift`) {
            return '7'; // Shifts
        } else if (pathname === `${dashboardRoute}/task`) {  
            return '8';
        } else if (pathname === `${dashboardRoute}/task/my-task`) {  
            return '9';
        } else if (pathname === `${dashboardRoute}/notification/my-notification`) {  
            return '10';
        } else if (pathname === `${dashboardRoute}/shift/my-shift`) {
          return '11';
        }
        else if (pathname === '/dashboard/staff/admin/profileview') {  
            return '12';
        } else if (pathname === '/dashboard/staff/admin/passwordreset') {  
            return '13';
        }
        else {
            return '1';
        }
    };

    const selectedKey = getSelectedKey();

    const menuItems = [
         {
            key: 'sub1',
            icon: <UserOutlined />,
            label: 'Management',
            children: [
                { key: '1', label: <Link href={dashboardRoute}>Dashboard</Link> },
                { key: '2', label: <Link href="/dashboard/staff/admin/patient">Patients</Link>, icon: <SolutionOutlined /> },
                { key: '3', label: <Link href="/dashboard/staff/admin/staff">Staff</Link>, icon: <TeamOutlined /> },
                { key: '4', label: <Link href="/dashboard/staff/admin/department">Departments</Link>, icon: <ApartmentOutlined /> },
                { key: '5', label: <Link href="/dashboard/staff/admin/appointment">Appointments</Link>, icon: <CalendarOutlined /> },
                { key: '6', label: <Link href="/dashboard/staff/admin/medical-record">Medical Records</Link>, icon: <FileTextOutlined /> },
                { key: '7', label: <Link href="/dashboard/staff/admin/shift">Shifts</Link>, icon: <ClockCircleOutlined /> },
                { key: '8', label: <Link href="/dashboard/staff/admin/task">Tasks</Link>, icon: <UnorderedListOutlined /> },
            ],
        },

         {
            key: 'sub2',
            icon: <NotificationOutlined />,
            label: 'My Panel',
            children: [
                { key: '9', label: <Link href="/dashboard/staff/admin/task/my-task">My Tasks</Link>, icon: <UnorderedListOutlined /> },
                { key: '10', label: <Link href="/dashboard/staff/admin/notification/my-notification">Notifications</Link>, icon: <NotificationOutlined /> },
                { key: '11', label: <Link href="/dashboard/staff/admin/shift/my-shift">My Shifts</Link>, icon: <ScheduleOutlined/> },

            ],
        },
        {
            key: 'sub3',
            icon: <LaptopOutlined />,
            label: 'My Account',
            children: [
                { key: '12', label: <Link href="/auth/profile">Profile View</Link>, icon: <ProfileOutlined/>},
                { key: '13', label:  <Link href="/auth/password-reset">Password Reset</Link>, icon: <KeyOutlined/> },
            ],
        },
    ];

    return (
        <Layout>
            <Header className="header" style={{ backgroundColor: '#fff' }}>
                <div className="logo" style={{ float: 'left', width: '120px', height: '31px', margin: '16px 24px 16px 0', background: 'rgba(255,255,255,.3)' }}>
                    <Typography.Title level={5} style={{ color: 'black' }}>Hospital MS</Typography.Title>
                </div>
                <Typography.Text style={{ float: 'right', color: 'black', margin: '24px' }}>Role: {role}</Typography.Text>
            </Header>
            <Layout>
                <Sider width={200} className="site-layout-background" style={{ backgroundColor: '#fff' }}>
                    <Menu
                        mode="inline"
                        selectedKeys={[selectedKey]}
                        defaultOpenKeys={['sub1']}
                        style={{ height: '100%', borderRight: 0 }}
                        items={menuItems}
                    />
                </Sider>
                <Layout style={{ padding: '0 24px 24px' }}>
                    <Content
                        className="site-layout-background"
                        style={{
                            padding: 24,
                            margin: 0,
                            minHeight: 280,
                        }}
                    >
                        {children}
                    </Content>
                </Layout>
            </Layout>
        </Layout>
    );
};

export default AdminDashboardLayout;

===== File: /src/components/Layout/DoctorDashboardLayout.tsx =====
// src/components/Layout/DoctorDashboardLayout.tsx
import React, { ReactNode } from 'react';
import { Layout, Menu, Typography } from 'antd';
import {
    CalendarOutlined,
    FileTextOutlined,
    UserOutlined,
    NotificationOutlined,
    UnorderedListOutlined,
    ScheduleOutlined, 
    ProfileOutlined,
    KeyOutlined,
} from '@ant-design/icons';
import Link from 'next/link';
import { useAppSelector } from '@/store/store';
import { usePathname } from 'next/navigation';

const { Header, Content, Sider } = Layout;

interface DoctorDashboardLayoutProps {
    children: ReactNode;
}

const DoctorDashboardLayout: React.FC<DoctorDashboardLayoutProps> = ({ children}) => {
    const user = useAppSelector((state) => state.auth.user);
    const pathname = usePathname();
    const role = "Doctor";
    const dashboardRoute = "/dashboard/staff/doctor" 

    const getSelectedKey = () => {
        if (pathname === dashboardRoute) {
            return '1';
        } else if (pathname === `${dashboardRoute}/appointment`) {
            return '7';
        } else if (pathname === `${dashboardRoute}/medical-record`) {
            return '8';
        } else if (pathname === `${dashboardRoute}/patient`) {
            return '9';
        } else if (pathname === `${dashboardRoute}/task/my-task`) {
            return '10';
        } else if (pathname === `${dashboardRoute}/notification/my-notification`) {
            return '11';
        } else if (pathname === `${dashboardRoute}/shift/my-shift`) {  
            return '12';
        }
        else if (pathname === '/dashboard/staff/doctor/profileview') {  
             return '13';
         } else if (pathname === '/dashboard/staff/doctor/passwordreset') {  
            return '14';
         }
        else {
            return '1';
        }
    };

    const selectedKey = getSelectedKey();

    const menuItems = [
          {
            key: 'sub1',
            label: 'Management',
            children: [
                { key: '1', label: <Link href={dashboardRoute}>Dashboard</Link> },
                { key: '7', label: <Link href="/dashboard/staff/doctor/appointment">Appointments</Link>, icon: <CalendarOutlined /> },
                { key: '8', label: <Link href="/dashboard/staff/doctor/medical-record">Medical Records</Link>, icon: <FileTextOutlined /> },
                { key: '9', label: <Link href="/dashboard/staff/doctor/patient">Patients</Link>, icon: <UserOutlined /> },
            ],
        },

          {
            key: 'sub2',
            icon: <NotificationOutlined />,
            label: 'My Panel',
            children: [
                { key: '10', label: <Link href="/dashboard/staff/doctor/task/my-task">My Tasks</Link>, icon: <UnorderedListOutlined /> },
                { key: '11', label: <Link href="/dashboard/staff/doctor/notification/my-notification">Notifications</Link>, icon: <NotificationOutlined /> },
                 { key: '12', label: <Link href="/dashboard/staff/doctor/shift/my-shift">My Shifts</Link>, icon: <ScheduleOutlined /> },
            ],
        },
        {
            key: 'sub3',
            icon: <UserOutlined />,
            label: 'My Account',
            children: [
                { key: '13', label: <Link href="/auth/profile">Profile View</Link>, icon: <ProfileOutlined/>},
                { key: '14', label:  <Link href="/auth/password-reset">Password Reset</Link>, icon: <KeyOutlined/> },
            ],
        },

    ];

    return (
        <Layout>
            <Header className="header" style={{ backgroundColor: '#fff' }}>
                <div className="logo" style={{ float: 'left', width: '120px', height: '31px', margin: '16px 24px 16px 0', background: 'rgba(255,255,255,.3)' }}>
                    <Typography.Title level={5} style={{ color: 'black' }}>Hospital MS</Typography.Title>
                </div>
                <Typography.Text style={{ float: 'right', color: 'black', margin: '24px' }}>Role: {role}</Typography.Text>
            </Header>
            <Layout>
                <Sider width={200} className="site-layout-background" style={{ backgroundColor: '#fff' }}>
                    <Menu
                        mode="inline"
                        selectedKeys={[selectedKey]}
                        defaultOpenKeys={['sub1']}
                        style={{ height: '100%', borderRight: 0 }}
                        items={menuItems}
                    />
                </Sider>
                <Layout style={{ padding: '0 24px 24px' }}>
                    <Content
                        className="site-layout-background"
                        style={{
                            padding: 24,
                            margin: 0,
                            minHeight: 280,
                        }}
                    >
                        {children}
                    </Content>
                </Layout>
            </Layout>
        </Layout>
    );
};

export default DoctorDashboardLayout;

===== File: /src/components/Layout/Footer.tsx =====
// src/components/Layout/Footer.tsx
'use client'

import React from 'react';
import { Layout, Typography } from 'antd';

const { Footer  } = Layout;
const { Text } = Typography;

const AppFooter: React.FC = () => {
    return (
        <Footer style={{
            textAlign: 'center',
            backgroundColor: '#fafafa',
            padding: '24px 50px',
        }}>
            <Text>© {new Date().getFullYear()} Hospital System. All rights reserved.</Text>
        </Footer>
    );
};

export default AppFooter;

===== File: /src/components/Layout/Header.tsx =====
// src/components/Layout/Header.tsx
'use client';

import React, { useEffect, useState, useCallback } from 'react';
import { Layout, Typography, Button, Space, Avatar, Dropdown, Menu, Badge, message } from 'antd';
import { useAppDispatch, useAppSelector } from '@/store/store';
import { useRouter } from 'next/navigation';
import { UserOutlined, BellOutlined } from '@ant-design/icons';
import { useLogoutMutation } from '@/services/auth/authSliceAPI';
import { persistor } from '@/store/store';
import { logout } from '@/services/auth/authSlice';
import Link from 'next/link';
import { useGetMyNotificationsQuery  } from '@/services/notification/notificationSliceAPI';
import type {  Notification as NotificationType } from '@/services/notification/notificationSliceAPI'; // Import API Notification Type
import { getSocket } from '@/services/socket/socket';

const { Header } = Layout;
const { Title, Text } = Typography;

const AppHeader: React.FC = () => {
    const dispatch = useAppDispatch();
    const router = useRouter();
    const user = useAppSelector((state) => state.auth.user);
    const token = useAppSelector((state) => state.auth.token);
    const [logoutMutation, { isLoading }] = useLogoutMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const [notifications, setNotifications] = useState<NotificationType[]>([]); // State to hold notifications
    const [unreadCount, setUnreadCount] = useState(0);

    //RTK Query Call:
    const { data: notificationsData, isLoading: isNotificationsLoading, isError: isNotificationsError, refetch } = useGetMyNotificationsQuery({
        read:false
    });

    const showNotification = (notification: NotificationType) => {
        if (typeof window !== 'undefined' && 'Notification' in window) {
            if (Notification.permission === 'granted') {
                new window.Notification(notification.message, { // Correct to Window.Notification
                    body: `Type: ${notification.type}, Priority: ${notification.priority}`,
                    icon: '/icon.png', // Optional: Replace with your icon URL
                });
            } else if (Notification.permission !== 'denied') {
                Notification.requestPermission().then(permission => {
                    if (permission === 'granted') {
                        new window.Notification(notification.message, {
                            body: `Type: ${notification.type}, Priority: ${notification.priority}`,
                            icon: '/icon.png',
                        });
                    }
                });
            }
        }
    };

    const setupSocket = useCallback(() => {
        if (user && token) {
            const socket = getSocket();

            socket.auth = (cb: any) => {
                cb({ token: token });
            };

            socket.connect();

            const handleNewNotification = (notification: NotificationType) => {
                setNotifications((prevNotifications) => [notification, ...prevNotifications]);
                showNotification(notification);
                refetch(); // Refresh the notifications list from the API
            };

            const handleNotificationCount = (data: { count: number }) => {
                console.log("the count ::", data.count);
                setUnreadCount(data.count);
            };

            socket.on("connect", () => {
                console.log("socket is connected!");
                refetch()
            });

            socket.on('newNotification', handleNewNotification);
            socket.on("notificationCount", handleNotificationCount);

            socket.on('disconnect', () => {
                console.log('Socket disconnected');
            });

            return () => {
                socket.off('connect');
                socket.off('newNotification', handleNewNotification);
                socket.off('notificationCount', handleNotificationCount);
                socket.off('disconnect');
                socket.disconnect();
            };
        }
        return () => {};
    }, [user, refetch, token, setNotifications]);

    useEffect(() => {
        let cleanup = () => {};
        if (user && token) {
            cleanup = setupSocket();
        }

        return () => {
            cleanup();
        };
    }, [user, token, setupSocket]);

     useEffect(() => {
         if (notificationsData?.notifications) {
             setNotifications(notificationsData.notifications);
         }
     }, [notificationsData]);

    useEffect(() => {
         if (notifications) {
             const count = notifications.length;
             setUnreadCount(count);
         }
     }, [notifications]);

    const handleLogout = async () => {
        try {
            try {
                await logoutMutation().unwrap();
            } catch (e) {
                console.log("no logout function", e)
            }
            dispatch(logout());
            persistor.purge();
            window.location.href = '/auth'; // Full page reload
        } catch (error: any) {
            console.error('Logout failed:', error.data.message || error.error);
        }
    };

    const getNotificationLink = () => {
        if (user?.userType?.toLowerCase() === 'patient') {
            return `/dashboard/patient/my-notification`;
        } else if (user?.userType?.toLowerCase() === 'staff' && user.role?.name) {
            return `/dashboard/staff/${user.role.name.toLowerCase()}/notification/my-notification`;
        } else {
            return '/auth';  
        }
    };
    const menuItems = [
        {
            key: 'logout',
            label: 'Logout',
            onClick: handleLogout,
            loading: isLoading ? true : undefined, //Conditional rendering for the menu items
        },
    ];

    const menu = { items: menuItems };

    return (
        <Header style={{
            backgroundColor: '#fff',
            padding: '0 50px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            height: '64px',
            boxShadow: '0 2px 4px 0 rgba(0,0,0,0.1)',
        }}>
            {contextHolder}
            <div>
                <Title level={3} style={{ color: '#1890ff', margin: 0, float: 'left', marginRight: '20px' }}>
                    Hospital Managememt System
                </Title>

            </div>
            {user ? (
               <Space align="center">
               <Link href={getNotificationLink()}>
                    <Badge count={unreadCount}>
                        <Avatar icon={<BellOutlined />} style={{ cursor: 'pointer' }} />
                    </Badge>
               </Link>
               <Text>
                   {user.firstName} {user.lastName} ({user.userType})
               </Text>
               <Dropdown menu={menu} placement="bottomRight" arrow>
                   <a onClick={e => e.preventDefault()}>
                       <Avatar icon={<UserOutlined />} />
                   </a>
               </Dropdown>
              
           </Space>
            ) : (
                <Link href="/auth">
                    <Button type="primary">
                        Login
                    </Button>
                </Link>
            )}
        </Header>
    );
};

export default AppHeader;

===== File: /src/components/Layout/Loader.tsx =====

import React from 'react';
import { Spin } from 'antd';

const Loader: React.FC = () => {
    return (
        <div style={{ textAlign: 'center', padding: '20px' }}>
            <Spin size="large" tip="Loading ..." />
        </div>
    )
};

export default Loader;

===== File: /src/components/Layout/NurseDashboardLayout.tsx =====
// src/components/Layout/NurseDashboardLayout.tsx
import React, { ReactNode } from 'react';
import { Layout, Menu, Typography } from 'antd';
import {
    CalendarOutlined,
    FileTextOutlined,
    UserOutlined,
    NotificationOutlined,
    UnorderedListOutlined,
    ProfileOutlined,
    KeyOutlined,
    ScheduleOutlined, // Import ScheduleOutlined
} from '@ant-design/icons';
import Link from 'next/link';
import { useAppSelector } from '@/store/store';
import { usePathname } from 'next/navigation';

const { Header, Content, Sider } = Layout;

interface NurseDashboardLayoutProps {
    children: ReactNode;
}

const NurseDashboardLayout: React.FC<NurseDashboardLayoutProps> = ({ children}) => {
    const user = useAppSelector((state) => state.auth.user);
    const pathname = usePathname();
    const role = "Nurse";
    const dashboardRoute = "/dashboard/staff/nurse"

    const getSelectedKey = () => {
        if (pathname === dashboardRoute) {
            return '1';
        } else if (pathname === `${dashboardRoute}/medical-record`) {
            return '2';
        } else if (pathname === `${dashboardRoute}/patient`) {
            return '3';
        } else if (pathname === `${dashboardRoute}/task/my-task`) {
            return '4';
        } else if (pathname === `${dashboardRoute}/notification/my-notification`) {
            return '5';
        }
         else if (pathname === '/dashboard/staff/nurse/shift/my-shift') {
             return '6';
         }
           else if (pathname === '/dashboard/staff/nurse/profileview') {
             return '7';
         } else if (pathname === '/dashboard/staff/nurse/passwordreset') {
            return '8';
        }
        else {
            return '1';
        }
    };

    const selectedKey = getSelectedKey();

    const menuItems = [
         {
            key: 'sub1',
            label: 'Management',
            children: [
                { key: '1', label: <Link href={dashboardRoute}>Dashboard</Link> },
                { key: '2', label: <Link href="/dashboard/staff/nurse/medical-record">Medical Records</Link>, icon: <FileTextOutlined /> },
                { key: '3', label: <Link href="/dashboard/staff/nurse/patient">Patients</Link>, icon: <UserOutlined /> },
            ],
        },

         {
            key: 'sub2',
            icon: <NotificationOutlined />,
            label: 'My Panel',
            children: [
                { key: '4', label: <Link href="/dashboard/staff/nurse/task/my-task">My Tasks</Link>, icon: <UnorderedListOutlined /> },
                { key: '5', label: <Link href="/dashboard/staff/nurse/notification/my-notification">Notifications</Link>, icon: <NotificationOutlined /> },
                 { key: '6', label: <Link href="/dashboard/staff/nurse/shift/my-shift">My Shifts</Link>, icon: <ScheduleOutlined/> }, // Added My Shifts
            ],
        },
       {
            key: 'sub3',
            icon: <UserOutlined />,
            label: 'My Account',
            children: [
                { key: '7', label: <Link href="/auth/profile">Profile View</Link>, icon: <ProfileOutlined/>},
                { key: '8', label:  <Link href="/auth/password-reset">Password Reset</Link>, icon: <KeyOutlined/> },
            ],
        },
    ];

    return (
        <Layout>
            <Header className="header" style={{ backgroundColor: '#fff' }}>
                <div className="logo" style={{ float: 'left', width: '120px', height: '31px', margin: '16px 24px 16px 0', background: 'rgba(255,255,255,.3)' }}>
                    <Typography.Title level={5} style={{ color: 'black' }}>Hospital MS</Typography.Title>
                </div>
                <Typography.Text style={{ float: 'right', color: 'black', margin: '24px' }}>Role: {role}</Typography.Text>
            </Header>
            <Layout>
                <Sider width={200} className="site-layout-background" style={{ backgroundColor: '#fff' }}>
                    <Menu
                        mode="inline"
                        selectedKeys={[selectedKey]}
                        defaultOpenKeys={['sub1']}
                        style={{ height: '100%', borderRight: 0 }}
                        items={menuItems}
                    />
                </Sider>
                <Layout style={{ padding: '0 24px 24px' }}>
                    <Content
                        className="site-layout-background"
                        style={{
                            padding: 24,
                            margin: 0,
                            minHeight: 280,
                        }}
                    >
                        {children}
                    </Content>
                </Layout>
            </Layout>
        </Layout>
    );
};

export default NurseDashboardLayout;

===== File: /src/components/Layout/PatientDashboardLayout.tsx =====
// src/components/Layout/PatientDashboardLayout.tsx
import React, { ReactNode } from 'react';
import { Layout, Menu, Typography } from 'antd';
import {
    UserOutlined,
    NotificationOutlined,
    FileTextOutlined,
    CalendarOutlined,
    ProfileOutlined,
    KeyOutlined,
} from '@ant-design/icons';
import Link from 'next/link';
import { useAppSelector } from '@/store/store';
import { usePathname } from 'next/navigation';

const { Header, Content, Sider } = Layout;

interface PatientDashboardLayoutProps {
    children: ReactNode;
}

const PatientDashboardLayout: React.FC<PatientDashboardLayoutProps> = ({ children }) => {
    const user = useAppSelector((state) => state.auth.user);
    const pathname = usePathname();
    const selectedKey = () => {

        if (pathname === "/dashboard/patient/notification") {
            return '2';
        } else if (pathname === "/dashboard/patient/medical-record") {
            return '3';
        } else if (pathname === "/dashboard/patient/appointment") {
            return '4';
        }
         else if (pathname === '/auth/profile') {
             return '5';
         } else if (pathname === '/auth/password-reset') {
             return '6';
         }
        else {
            return '1'
        }
    }
    const menuItems = [
        {
            key: '1',
            icon: <UserOutlined />,
            label: <Link href="/dashboard/patient">Dashboard</Link>,
        },
        {
            key: '2',
            icon: <NotificationOutlined />,
            label: <Link href="/dashboard/patient/my-notification">Notifications</Link>,
        },
        {
            key: '3',
            icon: <FileTextOutlined />,
            label: <Link href="/dashboard/patient/medical-record">Medical Records</Link>,
        },
        {
            key: '4',
            icon: <CalendarOutlined />,
            label: <Link href="/dashboard/patient/appointment">Appointments</Link>,
        },
        {
            key: '5',
            icon: <UserOutlined />,
            label: <Link href="/auth/profile">Profile View</Link>,
        },
        {
            key: '6',
            icon: <UserOutlined />,
            label: <Link href="/auth/password-reset">Password Reset</Link>,
        },

    ];

    return (
        <Layout>
            <Header className="header" style={{ backgroundColor: '#fff' }}>
                <div className="logo" style={{ float: 'left', width: '120px', height: '31px', margin: '16px 24px 16px 0', background: 'rgba(255,255,255,.3)' }}>
                    <Typography.Title level={5} style={{ color: 'black' }}>Hospital MS</Typography.Title>
                </div>
                <Typography.Text style={{ float: 'right', color: 'black', margin: '24px' }}>Patient</Typography.Text>
            </Header>
            <Layout>
                <Sider width={200} className="site-layout-background" style={{ backgroundColor: '#fff' }}>
                    <Menu
                        mode="inline"
                        defaultSelectedKeys={['1']}
                        defaultOpenKeys={['sub1']}
                        style={{ height: '100%', borderRight: 0 }}
                        items={menuItems}
                        selectedKeys={[selectedKey()]}
                    />
                </Sider>
                <Layout style={{ padding: '0 24px 24px' }}>
                    <Content
                        className="site-layout-background"
                        style={{
                            padding: 24,
                            margin: 0,
                            minHeight: 280,
                        }}
                    >
                        {children}
                    </Content>
                </Layout>
            </Layout>
        </Layout>
    );
};

export default PatientDashboardLayout;

===== File: /src/components/Layout/ReceptionistDashboardLayout.tsx =====
// src/components/Layout/ReceptionistDashboardLayout.tsx
import React, { ReactNode } from 'react';
import { Layout, Menu, Typography } from 'antd';
import {
    CalendarOutlined,
    FileTextOutlined,
    UserOutlined,
    NotificationOutlined,
    UnorderedListOutlined,
    ProfileOutlined,
    KeyOutlined,
        ScheduleOutlined,
} from '@ant-design/icons';
import Link from 'next/link';
import { useAppSelector } from '@/store/store';
import { usePathname } from 'next/navigation';

const { Header, Content, Sider } = Layout;

interface ReceptionistDashboardLayoutProps {
    children: ReactNode;
    dashboardRoute?: string;
}

const ReceptionistDashboardLayout: React.FC<ReceptionistDashboardLayoutProps> = ({ children }) => {
    const user = useAppSelector((state) => state.auth.user);
    const pathname = usePathname();
    const role="Receptionist"
    const dashboardRoute = "/dashboard/staff/receptionist" 

    const getSelectedKey = () => {
         if (pathname === dashboardRoute) {
            return '1';
        } else if (pathname === `${dashboardRoute}/appointment`) {
            return '2';
        } else if (pathname === `${dashboardRoute}/patient`) {
            return '3';
        }  else if (pathname === `${dashboardRoute}/task/my-task`) { 
            return '4';
        } else if (pathname === `${dashboardRoute}/notification/my-notification`) {
            return '5';
        }
        else if (pathname === `${dashboardRoute}/shift/my-shift`) {
            return '6';
        }
         else if (pathname === '/dashboard/staff/receptionist/profileview') {  
             return '7';
        } else if (pathname === '/dashboard/staff/receptionist/passwordreset') { 
            return '8';
        }
         else {
            return '1';
        }
    };

    const selectedKey = getSelectedKey();

    const menuItems = [
        {
            key: 'sub1',
            label: 'Management',
            children: [
                { key: '1', label: <Link href={dashboardRoute}>Dashboard</Link> },
                { key: '2', label: <Link href="/dashboard/staff/receptionist/appointment">Appointments</Link>, icon: <CalendarOutlined /> },
                { key: '3', label: <Link href="/dashboard/staff/receptionist/patient">Patients</Link>, icon: <UserOutlined /> },

            ],
        },
         {
            key: 'sub2',
            icon: <NotificationOutlined />,
            label: 'My Panel',
            children: [
                { key: '4', label: <Link href="/dashboard/staff/receptionist/task/my-task">My Tasks</Link>, icon: <UnorderedListOutlined /> },
                { key: '5', label: <Link href="/dashboard/staff/receptionist/notification/my-notification">Notifications</Link>, icon: <NotificationOutlined /> },
                 { key: '6', label: <Link href="/dashboard/staff/receptionist/shift/my-shift">My Shifts</Link>, icon: <ScheduleOutlined /> },
            ],
        },
       {
            key: 'sub3',
            icon: <UserOutlined />,
            label: 'My Account',
            children: [
                { key: '7', label: <Link href="/auth/profile">Profile View</Link>, icon: <ProfileOutlined/>},
                { key: '8', label:  <Link href="/auth/password-reset">Password Reset</Link>, icon: <KeyOutlined/> },
            ],
        },

    ];

    return (
        <Layout>
            <Header className="header" style={{ backgroundColor: '#fff' }}>
                <div className="logo" style={{ float: 'left', width: '120px', height: '31px', margin: '16px 24px 16px 0', background: 'rgba(255,255,255,.3)' }}>
                    <Typography.Title level={5} style={{ color: 'black' }}>Hospital MS</Typography.Title>
                </div>
                <Typography.Text style={{ float: 'right', color: 'black', margin: '24px' }}>Role: {role}</Typography.Text>
            </Header>
            <Layout>
                <Sider width={200} className="site-layout-background" style={{ backgroundColor: '#fff' }}>
                    <Menu
                        mode="inline"
                        selectedKeys={[selectedKey]}
                        defaultOpenKeys={['sub1']}
                        style={{ height: '100%', borderRight: 0 }}
                        items={menuItems}
                    />
                </Sider>
                <Layout style={{ padding: '0 24px 24px' }}>
                    <Content
                        className="site-layout-background"
                        style={{
                            padding: 24,
                            margin: 0,
                            minHeight: 280,
                        }}
                    >
                        {children}
                    </Content>
                </Layout>
            </Layout>
        </Layout>
    );
};

export default ReceptionistDashboardLayout;

===== File: /src/components/Layout/SuperAdminDashboardLayout.tsx =====
// src/components/Layout/SuperAdminDashboardLayout.tsx
import React, { ReactNode } from 'react';
import { Layout, Menu, Typography } from 'antd';
import {
    UserOutlined,
    LaptopOutlined,
    CalendarOutlined,
    FileTextOutlined,
    TeamOutlined,
    SolutionOutlined,
    ApartmentOutlined,
    SettingOutlined,
    KeyOutlined,
    ClockCircleOutlined,
    NotificationOutlined,
    UnorderedListOutlined, // Add the list icon for tasks
    ScheduleOutlined,
    ProfileOutlined, //Imported the profile outline to be use for MyAccount
} from '@ant-design/icons';
import Link from 'next/link';
import { useAppSelector } from '@/store/store';
import { usePathname } from 'next/navigation';

const { Header, Content, Sider } = Layout;

interface DashboardLayoutProps {
    children: ReactNode;
}

const SuperAdminDashboardLayout: React.FC<DashboardLayoutProps> = ({ children}) => {
    const user = useAppSelector((state) => state.auth.user);
    const pathname = usePathname();
    const role= "Super Admin"
    const dashboardRoute = "/dashboard/staff/super-admin"
    const getSelectedKey = () => {
        if (pathname === dashboardRoute) {
            return '1';
        } else if (pathname === '/dashboard/staff/super-admin/patient') {
            return '2';
        } else if (pathname === '/dashboard/staff/super-admin/staff') {
            return '3';
        } else if (pathname === '/dashboard/staff/super-admin/department') {
            return '4';
        } else if (pathname === '/dashboard/staff/super-admin/role') {
            return '5';
        } else if (pathname === '/dashboard/staff/super-admin/permission') {
            return '6';
        } else if (pathname === '/dashboard/staff/super-admin/appointment') {
            return '7';
        } else if (pathname === '/dashboard/staff/super-admin/medical-record') {
            return '8';
        } else if (pathname === '/dashboard/staff/super-admin/shift') {
            return '9';
        } else if (pathname === '/dashboard/staff/super-admin/task') {
            return '10';  
        }  else if (pathname === '/dashboard/staff/super-admin/task/my-task') {  
            return '11';
        } else if (pathname === '/dashboard/staff/super-admin/notification/my-notification') { 
            return '12';
        } else if (pathname === '/dashboard/staff/super-admin/shift/my-shift') {  
            return '13';
        }
        else if (pathname === '/dashboard/staff/super-admin/profileview') {  
             return '14';
         } else if (pathname === '/dashboard/staff/super-admin/passwordreset') {  
             return '15';
         }
        
        else {
            return '1';
        }
    };

    const selectedKey = getSelectedKey();

    const menuItems = [
        {
            key: 'sub1',
            icon: <UserOutlined />,
            label: 'Management',
            children: [
                { key: '1', label: <Link href={dashboardRoute}>Dashboard</Link> },
                { key: '2', label: <Link href="/dashboard/staff/super-admin/patient">Patients</Link>, icon: <SolutionOutlined /> },
                { key: '3', label: <Link href="/dashboard/staff/super-admin/staff">Staff</Link>, icon: <TeamOutlined /> },
                { key: '4', label: <Link href="/dashboard/staff/super-admin/department">Departments</Link>, icon: <ApartmentOutlined /> },
                { key: '5', label: <Link href="/dashboard/staff/super-admin/role">Roles</Link>, icon: <SettingOutlined /> },
                { key: '6', label: <Link href="/dashboard/staff/super-admin/permission">Permissions</Link>, icon: <KeyOutlined /> },
                { key: '7', label: <Link href="/dashboard/staff/super-admin/appointment">Appointments</Link>, icon: <CalendarOutlined /> },
                { key: '8', label: <Link href="/dashboard/staff/super-admin/medical-record">Medical Records</Link>, icon: <FileTextOutlined /> },
                { key: '9', label: <Link href="/dashboard/staff/super-admin/shift">Shifts</Link>, icon: <ClockCircleOutlined /> },
                { key: '10', label: <Link href="/dashboard/staff/super-admin/task">Tasks</Link>, icon: <UnorderedListOutlined /> },
            ],
        },

        {
            key: 'sub2',
            icon: <NotificationOutlined />,
            label: 'My Panel',
            children: [
                { key: '11', label: <Link href="/dashboard/staff/super-admin/task/my-task">My Tasks</Link>, icon: <UnorderedListOutlined /> },
                { key: '12', label: <Link href="/dashboard/staff/super-admin/notification/my-notification">Notifications</Link>, icon: <NotificationOutlined /> },
                 { key: '13', label: <Link href="/dashboard/staff/super-admin/shift/my-shift">My Shifts</Link>, icon: <ScheduleOutlined /> },
            ],
        },
        {
            key: 'sub3',
            icon: <LaptopOutlined />,
            label: 'My Account',
            children: [
                { key: '14', label: <Link href="/auth/profile">Profile View</Link>, icon: <ProfileOutlined/>},
                { key: '15', label:  <Link href="/auth/password-reset">Password Reset</Link>, icon: <KeyOutlined/> },
            ],
        },
     
    ];

    return (
        <Layout>
            <Header className="header" style={{ backgroundColor: '#fff' }}>
                <div className="logo" style={{ float: 'left', width: '120px', height: '31px', margin: '16px 24px 16px 0', background: 'rgba(255,255,255,.3)' }}>
                    <Typography.Title level={5} style={{ color: 'black' }}>Hospital MS</Typography.Title>
                </div>
                <Typography.Text style={{ float: 'right', color: 'black', margin: '24px' }}>Role: {role}</Typography.Text>
            </Header>
            <Layout>
                <Sider width={200} className="site-layout-background" style={{ backgroundColor: '#fff' }}>
                    <Menu
                        mode="inline"
                        selectedKeys={[selectedKey]}
                        defaultOpenKeys={['sub1']}
                        style={{ height: '100%', borderRight: 0 }}
                        items={menuItems}
                    />
                </Sider>
                <Layout style={{ padding: '0 24px 24px' }}>
                    <Content
                        className="site-layout-background"
                        style={{
                            padding: 24,
                            margin: 0,
                            minHeight: 280,
                        }}
                    >
                        {children}
                    </Content>
                </Layout>
            </Layout>
        </Layout>
    );
};

export default SuperAdminDashboardLayout;

===== File: /src/components/MedicalRecord/MedicalRecordCreateForm.tsx =====
// src/components/MedicalRecord/MedicalRecordCreateForm.tsx
'use client';

import React, { useState } from 'react';
import { useCreateMedicalRecordMutation } from '@/services/medicalRecord/medicalRecordSliceAPI';
import { Form, Input, Button, message, DatePicker, Tag } from 'antd';
import { MedicalRecordCreateRequest } from '@/services/medicalRecord/medicalRecordSliceAPI';
import dayjs from 'dayjs';
import { PlusOutlined } from '@ant-design/icons';

interface MedicalRecordCreateFormProps {
    onSuccess: () => void;
}

const MedicalRecordCreateForm: React.FC<MedicalRecordCreateFormProps> = ({ onSuccess }) => {
    const [createMedicalRecord, { isLoading, isError: isCreateMedicalRecordError, error: createMedicalRecordError }] = useCreateMedicalRecordMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();
    const [medicationsList, setMedicationsList] = useState<string[]>([]); // State to hold medications
    const [currentMedication, setCurrentMedication] = useState(''); // State for current input

    const onFinish = async (values: any) => {
        try {
            const formattedVisitDate = values['visitDate'] ? dayjs(values['visitDate']).format('YYYY-MM-DD') : null;

            const medicalRecordData: MedicalRecordCreateRequest = {
                ...values,
                visitDate: formattedVisitDate,
                medications: medicationsList, // Send the medications list
            };

            await createMedicalRecord(medicalRecordData).unwrap();
            messageApi.success('Medical record created successfully');
            form.resetFields();
            setMedicationsList([]); // Clear the medications list after successful submission
            setCurrentMedication('');
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to create medical record: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    const handleMedicationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setCurrentMedication(e.target.value);
    };

    const handleMedicationKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === ',' && currentMedication.trim() !== '') {
            e.preventDefault(); // Prevent the comma from being entered
            setMedicationsList([...medicationsList, currentMedication.trim()]);
            setCurrentMedication('');
        }
    };

    const handleRemoveMedication = (medicationToRemove: string) => {
        setMedicationsList(medicationsList.filter(med => med !== medicationToRemove));
    };

    return (
        <>  {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Patient ID"
                    name="patient"
                    rules={[{ required: true, message: 'Please enter patient ID!' }]}
                >
                    <Input />
                </Form.Item>
           
                <Form.Item
                    label="Diagnosis"
                    name="diagnosis"
                    rules={[{ required: true, message: 'Please enter diagnosis!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Treatment"
                    name="treatment"
                    rules={[{ required: true, message: 'Please enter treatment!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Medications"
                    name="medications" // This is just a label, no actual data is bound here
                >
                    <Input
                        placeholder="Enter medication, press comma to add"
                        value={currentMedication}
                        onChange={handleMedicationChange}
                        onKeyDown={handleMedicationKeyDown}
                    />
                    <div style={{ marginTop: 8 }}>
                        {medicationsList.map(medication => (
                            <Tag
                                closable
                                key={medication}
                                onClose={(e) => {
                                    e.preventDefault();
                                    handleRemoveMedication(medication);
                                }}
                            >
                                {medication}
                            </Tag>
                        ))}
                    </div>
                </Form.Item>
                <Form.Item
                    label="Notes"
                    name="notes"
                >
                    <Input.TextArea />
                </Form.Item>
                 <Form.Item
                    label="Visit Date"
                    name="visitDate"
                    rules={[{ required: true, message: 'Please select a visit date!' }]}
                  >
                    <DatePicker
                      style={{ width: '100%' }}
                      format="YYYY-MM-DD"
                    />
                  </Form.Item>

                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Create Medical Record
                    </Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default MedicalRecordCreateForm;

===== File: /src/components/MedicalRecord/MedicalRecordDelete.tsx =====
// src/components/MedicalRecord/MedicalRecordDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';
import { useDeleteMedicalRecordMutation } from '@/services/medicalRecord/medicalRecordSliceAPI';

interface MedicalRecordDeleteProps {
    record: MedicalRecord;
    onSuccess: () => void;
    onCancel: () => void;
}

const MedicalRecordDelete: React.FC<MedicalRecordDeleteProps> = ({ record, onSuccess, onCancel }) => {
    const [deleteMedicalRecord, { isLoading }] = useDeleteMedicalRecordMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deleteMedicalRecord(record._id).unwrap();
            messageApi.success('Medical record deleted successfully');
            onSuccess();
        } catch (error: any) {
            const  errorMessage = `Failed to delete medical record: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default MedicalRecordDelete;

===== File: /src/components/MedicalRecord/MedicalRecordEditForm.tsx =====
// src/components/MedicalRecord/MedicalRecordEditForm.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useUpdateMedicalRecordMutation } from '@/services/medicalRecord/medicalRecordSliceAPI';
import { Form, Input, Button, message, DatePicker, Tag } from 'antd';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';
import dayjs from 'dayjs';

interface MedicalRecordEditFormProps {
    record: MedicalRecord;
    onSuccess: () => void;
    onCancel: () => void;
}

const MedicalRecordEditForm: React.FC<MedicalRecordEditFormProps> = ({ record, onSuccess, onCancel }) => {
    const [updateMedicalRecord, { isLoading, isError: isUpdateMedicalRecordError, error: updateMedicalRecordError }] = useUpdateMedicalRecordMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();
    const [medicationsList, setMedicationsList] = useState<string[]>([]);
    const [currentMedication, setCurrentMedication] = useState('');

    useEffect(() => {
        // Initialize the medicationsList from the record
        setMedicationsList(record.medications || []); // Use an empty array as default
    }, [record.medications]);

    useEffect(() => {
        // Set form values initially, excluding medications (handled separately)
        form.setFieldsValue({
            patient: record.patient._id,
            doctor: record.doctor._id,
            diagnosis: record.diagnosis,
            treatment: record.treatment,
            notes: record.notes,
            visitDate: dayjs(record.visitDate),
        });
    }, [form, record]);

    const onFinish = async (values: any) => {
        try {
            const formattedVisitDate = values['visitDate'] ? dayjs(values['visitDate']).format('YYYY-MM-DD') : null;

            const medicalRecordData = {
                ...values,
                visitDate: formattedVisitDate,
                medications: medicationsList, // Send the updated medications list
            };

            await updateMedicalRecord({ id: record._id, data: medicalRecordData }).unwrap();
            messageApi.success('Medical record updated successfully');
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to update medical record: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    const handleMedicationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setCurrentMedication(e.target.value);
    };

    const handleMedicationKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === ',' && currentMedication.trim() !== '') {
            e.preventDefault();
            setMedicationsList([...medicationsList, currentMedication.trim()]);
            setCurrentMedication('');
        }
    };

    const handleRemoveMedication = (medicationToRemove: string) => {
        setMedicationsList(medicationsList.filter(med => med !== medicationToRemove));
    };

    return (
        <>  {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Patient ID"
                    name="patient"
                    rules={[{ required: true, message: 'Please enter patient ID!' }]}
                >
                    <Input disabled />
                </Form.Item>
                <Form.Item
                    label="Doctor ID"
                    name="doctor"
                    rules={[{ required: true, message: 'Please enter doctor ID!' }]}
                >
                    <Input disabled />
                </Form.Item>
                <Form.Item
                    label="Diagnosis"
                    name="diagnosis"
                    rules={[{ required: true, message: 'Please enter diagnosis!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Treatment"
                    name="treatment"
                    rules={[{ required: true, message: 'Please enter treatment!' }]}
                >
                    <Input />
                </Form.Item>

                <Form.Item
                    label="Medications"
                    name="medications" // This is just a label, no actual data is bound here
                >
                    <Input
                        placeholder="Enter medication, press comma to add"
                        value={currentMedication}
                        onChange={handleMedicationChange}
                        onKeyDown={handleMedicationKeyDown}
                    />
                    <div style={{ marginTop: 8 }}>
                        {medicationsList.map(medication => (
                            <Tag
                                closable
                                key={medication}
                                onClose={(e) => {
                                    e.preventDefault();
                                    handleRemoveMedication(medication);
                                }}
                            >
                                {medication}
                            </Tag>
                        ))}
                    </div>
                </Form.Item>

                <Form.Item
                    label="Notes"
                    name="notes"
                >
                    <Input.TextArea />
                </Form.Item>

                <Form.Item
                    label="Visit Date"
                    name="visitDate"
                    rules={[{ required: true, message: 'Please select a visit date!' }]}
                >
                    <DatePicker
                        style={{ width: '100%' }}
                        format="YYYY-MM-DD"
                    />
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Update Medical Record
                    </Button>
                    <Button onClick={onCancel}>Cancel</Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default MedicalRecordEditForm;

===== File: /src/components/MedicalRecord/MedicalRecordList.tsx =====
// src/components/MedicalRecord/MedicalRecordList.tsx
'use client';

import React, { useState } from 'react';
import { useGetMedicalRecordsQuery } from '@/services/medicalRecord/medicalRecordSliceAPI';
import { Table, Button, Space, Input } from 'antd';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';
import { EditOutlined, DeleteOutlined, SearchOutlined, CloseOutlined, EyeOutlined  } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader"
import dayjs from 'dayjs'; 

interface MedicalRecordListProps {
    onView?: (record: MedicalRecord) => void;
    onEdit?: (record: MedicalRecord) => void;
    onDelete?: (record: MedicalRecord) => void;  
}

const MedicalRecordList: React.FC<MedicalRecordListProps> = ({ onEdit, onView, onDelete }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');
    const { data: medicalRecordData, isLoading, isError: isGetMedicalRecordsError, error: getMedicalRecordsError } = useGetMedicalRecordsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
    });

    const totalMedicalRecordsCount = medicalRecordData?.totalRecords || 0;
    const medicalRecords = medicalRecordData?.records || [];

    const handleTableChange = (current:number, pageSize:number) => {
        setCurrentPage(current);
        setPageSize(pageSize);
    };

    const columns = [
        {
            title: '#',
            key: 'index',
            render: (text: string, record: MedicalRecord, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Patient',
            dataIndex: 'patient',
            key: 'patient',
            render: (patient: { firstName: string; lastName: string }) => `${patient.firstName} ${patient.lastName}`,
        },
        {
            title: 'Doctor',
            dataIndex: 'doctor',
            key: 'doctor',
            render: (doctor: { firstName: string; lastName: string }) => `${doctor.firstName} ${doctor.lastName}`,
        },
        {
            title: 'Diagnosis',
            dataIndex: 'diagnosis',
            key: 'diagnosis',
        },
        {
            title: 'Treatment',
            dataIndex: 'treatment',
            key: 'treatment',
        },
        {
            title: 'Visit Date',
            dataIndex: 'visitDate',
            key: 'visitDate',
                    render: (visitDate: string) => visitDate ? dayjs(visitDate).format('MMMM D, YYYY') : 'N/A', // Format the date
            
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: MedicalRecord) => (
              <Space size="middle">
                                   {onView && (
                                       <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                                           View
                                       </Button>
                                   )}
                                   {onEdit && (
                                       <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                                           Edit
                                       </Button>
                                   )}
                                   {onDelete && (
                                       <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                                           Delete
                                       </Button>
                                   )}
                               </Space>
            ),
        },
    ];

    if (isLoading) return <Loader />;
    if (isGetMedicalRecordsError) return <p>Error fetching medical records: { (getMedicalRecordsError as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
             <Input
                placeholder="Search medical records..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={(e) => {
                            e.preventDefault();
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />
            <Table
                columns={columns}
                dataSource={medicalRecords}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalMedicalRecordsCount,
                    showSizeChanger: true,
                    onChange: handleTableChange,
                }}
            />
        </>
    );
};

export default MedicalRecordList;

===== File: /src/components/MedicalRecord/MedicalRecordView.tsx =====
// src/components/MedicalRecord/MedicalRecordView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { MedicalRecord } from '@/services/medicalRecord/medicalRecordSliceAPI';
  
import { formatDateWithTime } from '@/utils/dateUtils';

interface MedicalRecordViewProps {
    record: MedicalRecord;
}

const MedicalRecordView: React.FC<MedicalRecordViewProps> = ({ record }) => {
     
    return (
        <div>
            <Typography.Title level={4}>Medical Record Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="Patient">
                    {record.patient.firstName} {record.patient.lastName}
                </Descriptions.Item>
                <Descriptions.Item label="Doctor">
                    {record.doctor.firstName} {record.doctor.lastName}
                </Descriptions.Item>
                <Descriptions.Item label="Diagnosis">{record.diagnosis}</Descriptions.Item>
                <Descriptions.Item label="Treatment">{record.treatment}</Descriptions.Item>
                <Descriptions.Item label="Medications">{record.medications.join(', ')}</Descriptions.Item>
                <Descriptions.Item label="Notes">{record.notes}</Descriptions.Item>
                <Descriptions.Item label="Visit Date">{formatDateWithTime(record.visitDate)}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default MedicalRecordView;

===== File: /src/components/Notification/MyNotificationList.tsx =====
// src/components/Notification/MyNotificationList.tsx
'use client';

import React, { useState } from 'react';
import { useGetMyNotificationsQuery, Notification } from '@/services/notification/notificationSliceAPI';
import { useMarkMyNotificationAsReadMutation, useMarkAllMyNotificationsAsReadMutation } from '@/services/notification/notificationSliceAPI';
import { Table, Input, Space, Button, Tag, Select, message } from 'antd';
import { CheckOutlined, SearchOutlined, CloseOutlined } from '@ant-design/icons';
import Loader from '@/components/Layout/Loader';
import { useAppSelector } from '@/store/store';
import { useRouter } from 'next/navigation';
import dayjs from 'dayjs';
import type {  TableProps, TablePaginationConfig } from 'antd';
import { ColumnsType } from 'antd/es/table';
import logger from '@/utils/logger';

interface MyNotificationListProps {
    onView?: (notification: Notification) => void;
    onEdit?: (notification: Notification) => void;
    onDelete?: (notification: Notification) => void;
}

interface SorterValue {
    field: string | string[];
    order: 'ascend' | 'descend' | null;
}

const MyNotificationList: React.FC<MyNotificationListProps> = ({ onView, onEdit, onDelete }) => {
    const user = useAppSelector((state) => state.auth.user);
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');
    const [typeFilter, setTypeFilter] = useState<string | undefined>(undefined);
    const [priorityFilter, setPriorityFilter] = useState<string | undefined>(undefined);
    const [sortBy, setSortBy] = useState<string | undefined>(undefined);
    const [sortOrder, setSortOrder] = useState<"asc" | "desc" | undefined>(undefined);
    const [readFilter, setReadFilter] = useState<boolean | undefined>(undefined);
    const [selectedNotificationId,setSelectedNotificationId] =  useState<string | null>(null)
    const [markNotificationAsRead, { isLoading: isMarkingRead }] = useMarkMyNotificationAsReadMutation();
    const [markAllNotificationsAsRead, { isLoading: isMarkingAllRead }] = useMarkAllMyNotificationsAsReadMutation(); 
    const [messageApi, contextHolder] = message.useMessage();

    const { data: notificationData, isLoading, isError, error } = useGetMyNotificationsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
        type: typeFilter,
        priority: priorityFilter,
        sortBy: sortBy,
        sortOrder: sortOrder,
        read: readFilter,
    });

    const totalNotificationCount = notificationData?.totalNotifications || 0;

  const handleTableChange = (pagination: TablePaginationConfig, filters: any, sorter: any) => {
        const { current, pageSize: newPageSize } = pagination;
        setCurrentPage(current || 1);
        setPageSize(newPageSize || 5);

        if (sorter) {
            const currentSort = sorter as SorterValue;
            if (currentSort.field && currentSort.order) {
                setSortBy(currentSort.field.toString());
                setSortOrder(currentSort.order === 'ascend' ? 'asc' : 'desc');
            } else {
                setSortBy(undefined);
                setSortOrder(undefined);
            }
        }
    };

    const handleMarkAsRead = async (id: string) => {
        setSelectedNotificationId(id);
        try {
            await markNotificationAsRead(id).unwrap();
            console.log(`Notification ${id} marked as read.`);
        } catch (error: any) {
            logger.error(`Error marking notification as read:`, error);
            const errorMessage = `Failed to update medical record: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }   finally {
            setSelectedNotificationId(null);  
        }
    };

     const handleMarkAllAsRead = async () => {
        try {
            await markAllNotificationsAsRead().unwrap();
            console.log('All notifications marked as read.');
        } catch (error: any) {
            logger.error(`Error marking notification as read:`, error);
            const errorMessage = `Failed to update medical record: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
           
        }
    };

    const columns: ColumnsType<Notification> = [
        {
            title: '#',
            key: 'index',
            render: (text: any, record: Notification, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Message',
            dataIndex: 'message',
            key: 'message',
        },
        {
            title: 'Type',
            dataIndex: 'type',
            key: 'type',
        },
        {
            title: 'Priority',
            dataIndex: 'priority',
            key: 'priority',
                render: (priority: string) => (
                    <Tag color={priority === 'urgent' ? 'red' : priority === 'warning' ? 'yellow' : 'blue'}>
                        {priority.toUpperCase()}
                    </Tag>
                ),
        },
        {
            title: 'Created At',
            dataIndex: 'createdAt',
            key: 'createdAt',
            sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),
            sortOrder: sortBy === 'createdAt' ? (sortOrder === 'asc' ? 'ascend' : 'descend') : null,
            render: (dateString: string) => dayjs(dateString).format('MMMM D, YYYY h:mm A'),
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Notification) => (
                 <Space size="middle">
                   <Button
                        icon={<CheckOutlined />}
                        onClick={() => handleMarkAsRead(record._id)}
                        loading={isMarkingRead && selectedNotificationId === record._id}
                        disabled={record.isRead}
                    >
                        Mark as Read
                    </Button>
                </Space>
            ),
        },
    ];

    if (isLoading) return <Loader />;
    if (isError) return <p>Error fetching notifications: {(error as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
            {contextHolder}
            <Input
                placeholder="Search notifications..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />

            {/* Filters */}
            <Space style={{ marginBottom: 16 }}>
                <Select
                    placeholder="Filter by Type"
                    style={{ width: 150 }}
                    onChange={(value) => { setTypeFilter(value); setCurrentPage(1); }}
                    allowClear
                >
                    <Select.Option value="appointment">Appointment</Select.Option>
                    <Select.Option value="medical_record">Medical Record</Select.Option>
                    <Select.Option value="reminder">Reminder</Select.Option>
                    <Select.Option value="system">System</Select.Option>
                    <Select.Option value="shift">Shift</Select.Option>
                </Select>
                <Select
                    placeholder="Filter by Priority"
                    style={{ width: 150 }}
                    onChange={(value) => { setPriorityFilter(value); setCurrentPage(1); }}
                    allowClear
                >
                    <Select.Option value="urgent">Urgent</Select.Option>
                    <Select.Option value="warning">Warning</Select.Option>
                    <Select.Option value="info">Info</Select.Option>
                </Select>
                 <Select
                        placeholder="Filter by Read Status"
                        style={{ width: 150 }}
                        onChange={(value) => {
                            setReadFilter(value === "true" ? true : value === "false" ? false : undefined);
                            setCurrentPage(1);
                        }}
                        allowClear
                    >
                        <Select.Option value="true">Read</Select.Option>
                        <Select.Option value="false">Unread</Select.Option>
                    </Select>
                  
                  <Button
                      type="primary"
                      onClick={handleMarkAllAsRead}
                      loading={isMarkingAllRead}
                      disabled={!notificationData?.notifications || notificationData.notifications.every(n => n.isRead)}
                  >
                      Mark All as Read
                  </Button>
            </Space>
            <Table
                columns={columns}
                dataSource={notificationData?.notifications}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalNotificationCount,
                    showSizeChanger: true,
                  
                }}
                  onChange={handleTableChange}
            />
        </>
    );
};

export default MyNotificationList;

===== File: /src/components/Patient/PatientCreateForm.tsx =====
// src/components/Patient/PatientCreateForm.tsx
'use client';

import React from 'react';
import { useCreatePatientMutation } from '@/services/patient/patientSliceAPI';
import { Form, Input, Button, Select, message, DatePicker } from 'antd';
import { PatientCreateRequest } from '@/services/patient/types'; // Ensure this type exists
import dayjs from 'dayjs'

interface PatientCreateFormProps {
    onSuccess: () => void;
}

const PatientCreateForm: React.FC<PatientCreateFormProps> = ({ onSuccess }) => {
    const [createPatient, { isLoading, isError: isCreatePatientError, error: createPatientError }] = useCreatePatientMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();
   
    const onFinish = async (values: PatientCreateRequest) => {
        try {
            const formattedDob = values['dob'] ? dayjs(values['dob']).format('YYYY-MM-DD') : "";
            const patientData = {
                ...values,
                dob: formattedDob,
            };
            await createPatient(patientData).unwrap();
            messageApi.success('Patient created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
         const errorMessage = `Failed to create patient: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

     const disabledFutureDate = (current: dayjs.Dayjs ) => {
            // Disable dates after today
            return current && current > dayjs().endOf('day');
        };
   const genderOptions = [
        { value: 'Male', label: 'Male' },
        { value: 'Other', label: 'Other' },
        { value: 'Female', label: 'Female' },
    ];

    return (<> {contextHolder}
        <Form form={form} layout="vertical" onFinish={onFinish}>
            <Form.Item
                label="First Name"
                name="firstName"
                rules={[{ required: true, message: 'Please enter first name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Last Name"
                name="lastName"
                rules={[{ required: true, message: 'Please enter last name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Email"
                name="email"
                rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}
            >
                <Input />
            </Form.Item>
             <Form.Item
                label="Gender"
                name="gender"
                rules={[{ required: true, message: 'Please select gender!' }]}
            >
              <Select
                placeholder="Select Gender"
                options={genderOptions}
              />
            </Form.Item>
            <Form.Item
                label="Phone"
                name="phone"
                rules={[{ required: true, message: 'Please enter your phone number!' }]}
            >
                <Input  placeholder="Phone Number" />
            </Form.Item>
            <Form.Item
                label="Address"
                name="address"
                rules={[{ required: true, message: 'Please enter your address!' }]}
            >
                <Input  placeholder="Address" />
            </Form.Item>
            <Form.Item
                label="Date of Birth"
                name="dob"
                rules={[{ required: true, message: 'Please select a date of birth!' }]}
            >
                <DatePicker
                    style={{ width: '100%' }}
                    disabledDate={disabledFutureDate}
                    format="YYYY-MM-DD"
                    picker="date"
                    placeholder="Select Date of Birth"
                />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoading}>
                    Create Patient
                </Button>
            </Form.Item>
        </Form>
        </>
    );
};

export default PatientCreateForm;

===== File: /src/components/Patient/PatientDelete.tsx =====
// src/components/Patient/PatientDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Patient } from '@/services/patient/types';
import { useDeletePatientMutation } from '@/services/patient/patientSliceAPI';
 


interface PatientDeleteProps {
    patient: Patient;
    onSuccess: () => void;
    onCancel: () => void;
}

const PatientDelete: React.FC<PatientDeleteProps> = ({ patient, onSuccess, onCancel }) => {
    const [deletePatient, { isLoading }] = useDeletePatientMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deletePatient(patient._id).unwrap();
            messageApi.success('Patient deleted successfully');
            onSuccess(); // Notify parent component of successful deletion
        } catch (error: any) {
            messageApi.error(`Failed to delete patient: ${error?.data.message || 'Unknown error'}`);
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default PatientDelete;

===== File: /src/components/Patient/PatientEditForm.tsx =====
// src/components/Patient/PatientEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdatePatientMutation } from '@/services/patient/patientSliceAPI';
import { Form, Input, Button, Select, message, DatePicker } from 'antd';
import { Patient, PatientUpdateRequest } from '@/services/patient/types';
import dayjs from 'dayjs'
import { disabledFutureDate } from '@/utils/disabledFutureDate';
const { Option } = Select

interface PatientEditFormProps {
    patient: Patient;
    onSuccess: () => void;
    onCancel: () => void;
}

const PatientEditForm: React.FC<PatientEditFormProps> = ({ patient, onSuccess, onCancel }) => {
    const [updatePatient, { isLoading, isError: isUpdatePatientError, error: updatePatientError }] = useUpdatePatientMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();
    
    useEffect(() => {
        form.setFieldsValue({
            ...patient,
            dob: patient.dob ? dayjs(patient.dob) : null,
        });
    }, [form, patient]);

    const onFinish = async (values: PatientUpdateRequest) => {
        try {
            const formattedDob = values['dob'] ? dayjs(values['dob']).format('YYYY-MM-DD') : "";
            const patientData: PatientUpdateRequest = {
                ...values,
                dob: formattedDob,
            };

            await updatePatient({ id: patient._id, data: patientData }).unwrap();
            messageApi.success('Patient updated successfully');
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to update patient: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    const genderOptions = [
        { value: 'Male', label: 'Male' },
        { value: 'Female', label: 'Female' },
        { value: 'Other', label: 'Other' },
    ];

    return (
    <>{contextHolder}
        <Form form={form} layout="vertical" onFinish={onFinish}>
            <Form.Item
                label="First Name"
                name="firstName"
                rules={[{ required: true, message: 'Please enter first name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Last Name"
                name="lastName"
                rules={[{ required: true, message: 'Please enter last name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Email"
                name="email"
                rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}
            >
                <Input />
            </Form.Item>
             <Form.Item
                label="Gender"
                name="gender"
                rules={[{ required: true, message: 'Please select gender!' }]}
            >
              <Select
                placeholder="Select Gender"
                options={genderOptions}
              />
            </Form.Item>
             <Form.Item
                            label="Phone"
                            name="phone"
                            rules={[{ required: true, message: 'Please enter your phone number!' }]}
                        >
                            <Input  placeholder="Phone Number" />
                        </Form.Item>
                        <Form.Item
                            label="Address"
                            name="address"
                            rules={[{ required: true, message: 'Please enter your address!' }]}
                        >
                            <Input  placeholder="Address" />
                        </Form.Item>
            <Form.Item
                label="Date of Birth"
                name="dob"
                rules={[{ required: true, message: 'Please select a date of birth!' }]}
            >
                <DatePicker
                    style={{ width: '100%' }}
                    disabledDate={disabledFutureDate}
                    format="YYYY-MM-DD"
                    picker="date"
                    placeholder="Select Date of Birth"
                />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoading}>
                    Update Patient
                </Button>
                <Button style={{ marginLeft: 8 }} onClick={onCancel}>
                    Cancel
                </Button>
            </Form.Item>
        </Form>
        </>
    );
};

export default PatientEditForm;

===== File: /src/components/Patient/PatientList.tsx =====
// src/components/Patient/PatientList.tsx
'use client';

import React, { useState } from 'react';
import { useGetPatientsQuery } from '@/services/patient/patientSliceAPI';
import { Table, Button, Space, Input } from 'antd';
import { Patient } from '@/services/patient/types';
import { EditOutlined, DeleteOutlined, SearchOutlined, CloseOutlined, EyeOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader";

interface PatientListProps {
    onView?: (patient: Patient) => void;
    onEdit?: (patient: Patient) => void;
    onDelete?: (patient: Patient) => void; 
}

const PatientList: React.FC<PatientListProps> = ({ onView, onEdit, onDelete }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');

    const { data: patientData, isLoading, isError: isGetPatientsError, error: getPatientsError } = useGetPatientsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
    });

    const totalPatientsCount = patientData?.totalPatients || 0;
    const patients = patientData?.patients || [];

    const handleTableChange = (current: number, pageSize: number) => {
        setCurrentPage(current);
        setPageSize(pageSize);
    };

    const columns = [
        {
            title: '#',
            key: 'index',
            render: (text: string, record: Patient, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'First Name',
            dataIndex: 'firstName',
            key: 'firstName',
        },
        {
            title: 'Last Name',
            dataIndex: 'lastName',
            key: 'lastName',
        },
        {
            title: 'Email',
            dataIndex: 'email',
            key: 'email',
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Patient) => (
                <Space size="middle">
                                     {onView && (
                                         <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                                             View
                                         </Button>
                                     )}
                                     {onEdit && (
                                         <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                                             Edit
                                         </Button>
                                     )}
                                     {onDelete && (
                                         <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                                             Delete
                                         </Button>
                                     )}
                                 </Space>
            ),
        },
    ];

    if (isLoading) return <Loader />
    if (isGetPatientsError) return <p>Error fetching patients:  { (getPatientsError as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
            <Input
                placeholder="Search patients..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                        }}
                    />
                ) : null}
            />
            <Table
                columns={columns}
                dataSource={patients}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalPatientsCount,
                    showSizeChanger: true,
                    onChange: handleTableChange,
                }}
            />
        </>
    );
};

export default PatientList;

===== File: /src/components/Patient/PatientView.tsx =====
// src/components/Patient/PatientView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Patient } from '@/services/patient/types';
import { formatDate } from '@/utils/dateUtils';

interface PatientViewProps {
    patient: Patient;
}

const PatientView: React.FC<PatientViewProps> = ({ patient }) => {
     return (
        <div>
            <Typography.Title level={4}>Patient Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="ID">{patient._id}</Descriptions.Item>
                <Descriptions.Item label="First Name">{patient.firstName}</Descriptions.Item>
                <Descriptions.Item label="Last Name">{patient.lastName}</Descriptions.Item>
                <Descriptions.Item label="Email">{patient.email}</Descriptions.Item>
                <Descriptions.Item label="Phone">{patient.phone}</Descriptions.Item>
                <Descriptions.Item label="Date of Birth">{formatDate(patient.dob)}</Descriptions.Item>
                <Descriptions.Item label="Address">{patient.address}</Descriptions.Item>
                <Descriptions.Item label="Gender">{patient.gender}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default PatientView;

===== File: /src/components/Permission/PermissionCreateForm.tsx =====
// src/components/Permission/PermissionCreateForm.tsx
'use client';

import React from 'react';
import { useCreatePermissionMutation } from '@/services/permission/permissionSliceAPI';
import { Form, Input, Button, message  } from 'antd';


interface PermissionCreateFormProps {
    onSuccess: () => void;
}

const PermissionCreateForm: React.FC<PermissionCreateFormProps> = ({ onSuccess }) => {
    const [createPermission, { isLoading, isError, error }] = useCreatePermissionMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();

    const onFinish = async (values: any) => {
        try {
            await createPermission(values).unwrap();
            messageApi.success('Permission created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to create permission: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (
        <>
            {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Action"
                    name="action"
                    rules={[{ required: true, message: 'Please enter action!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Description"
                    name="description"
                    rules={[{ required: true, message: 'Please enter description!' }]}
                >
                    <Input.TextArea />
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Create Permission
                    </Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default PermissionCreateForm;

===== File: /src/components/Permission/PermissionDelete.tsx =====
// src/components/Permission/PermissionDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Permission } from '@/services/permission/permissionSliceAPI';
import { useDeletePermissionMutation } from '@/services/permission/permissionSliceAPI';

interface PermissionDeleteProps {
    permission: Permission;
    onSuccess: () => void;
    onCancel: () => void;
}

const PermissionDelete: React.FC<PermissionDeleteProps> = ({ permission, onSuccess, onCancel }) => {
    const [deletePermission, { isLoading }] = useDeletePermissionMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deletePermission(permission._id).unwrap();
            messageApi.success('Permission deleted successfully');
            onSuccess();
        } catch (error: any) {
            messageApi.error(`Failed to delete permission: ${error?.data.message || 'Unknown error'}`);
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default PermissionDelete;

===== File: /src/components/Permission/PermissionEditForm.tsx =====
// src/components/Permission/PermissionEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdatePermissionMutation, Permission } from '@/services/permission/permissionSliceAPI';
import { Form, Input, Button, message } from 'antd';


interface PermissionEditFormProps {
    permission: Permission;
    onSuccess: () => void;
    onCancel: () => void;
}

const PermissionEditForm: React.FC<PermissionEditFormProps> = ({ permission, onSuccess, onCancel }) => {
    const [updatePermission, { isLoading, isError: isUpdatePermissionError, error: updatePermissionError }] = useUpdatePermissionMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();
     
    useEffect(() => {
        form.setFieldsValue({
            action: permission.action,
            description: permission.description,
        });
    }, [form, permission]);

    const onFinish = async (values: any) => {
        try {
            await updatePermission({ id: permission._id, data: values }).unwrap();
            messageApi.success('Permission updated successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to update permission: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (     
    <> {contextHolder}
        <Form form={form} layout="vertical" onFinish={onFinish}>
            <Form.Item
                label="Action"
                name="action"
                rules={[{ required: true, message: 'Please enter action!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Description"
                name="description"
                rules={[{ required: true, message: 'Please enter description!' }]}
            >
                <Input.TextArea />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoading}>
                    Update Permission
                </Button>
                <Button onClick={onCancel}>Cancel</Button>
            </Form.Item>
        </Form>
        </>
    );
};

export default PermissionEditForm;

===== File: /src/components/Permission/PermissionList.tsx =====
// src/components/Permission/PermissionList.tsx
'use client';

import React, { useState } from 'react';
import { useGetPermissionsQuery, Permission } from '@/services/permission/permissionSliceAPI';
import { Table, Button, Space, Input } from 'antd';
import { EditOutlined, DeleteOutlined, SearchOutlined, CloseOutlined, EyeOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader"

interface PermissionListProps {
    onView: (permission: Permission) => void;
    onEdit: (permission: Permission) => void;
    onDelete: (permission: Permission) => void; // Added onDelete prop
}

const PermissionList: React.FC<PermissionListProps> = ({ onView, onEdit, onDelete }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');

    const { data: permissionData, isLoading, isError: isGetPermissionsError, error: getPermissionsError } = useGetPermissionsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
    });

    const totalPermissionCount = permissionData?.total || 0;
    const permissions = permissionData?.permissions || [];

    const handleTableChange = (current: number, pageSize: number) => {
        setCurrentPage(current);
        setPageSize(pageSize);
    };

    const columns = [
        {
            title: '#',
            key: 'index',
            render: (text: string, record: Permission, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Action',
            dataIndex: 'action',
            key: 'action',
        },
        {
            title: 'Description',
            dataIndex: 'description',
            key: 'description',
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Permission) => (
                 <Space size="middle">
                                      {onView && (
                                          <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                                              View
                                          </Button>
                                      )}
                                      {onEdit && (
                                          <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                                              Edit
                                          </Button>
                                      )}
                                      {onDelete && (
                                          <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                                              Delete
                                          </Button>
                                      )}
                                  </Space>
            ),
        },
    ];

    if (isLoading) return <Loader />;
    if (isGetPermissionsError) return <p>Error fetching permissions:  { (getPermissionsError as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
            <Input
                placeholder="Search permissions..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                        }}
                    />
                ) : null}
            />
            <Table
                columns={columns}
                dataSource={permissions}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalPermissionCount,
                    showSizeChanger: true,
                    onChange: handleTableChange
                }}
            />
        </>
    );
};

export default PermissionList;

===== File: /src/components/Permission/PermissionView.tsx =====
// src/components/Permission/PermissionView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Permission } from '@/services/permission/permissionSliceAPI';

interface PermissionViewProps {
    permission: Permission;
}

const PermissionView: React.FC<PermissionViewProps> = ({ permission }) => {
    return (
        <div>
            <Typography.Title level={4}>Permission Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="Action">{permission.action}</Descriptions.Item>
                <Descriptions.Item label="Description">{permission.description}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default PermissionView;

===== File: /src/components/Role/RoleCreateForm.tsx =====
// src/components/role/RoleCreateForm.tsx
'use client';

import React, { useState } from 'react';
import { useCreateRoleMutation } from '@/services/role/roleSliceAPI';
import { useGetPermissionsQuery, Permission } from '@/services/permission/permissionSliceAPI';
import { Form, Input, Button, Select, message } from 'antd';

interface RoleCreateFormProps {
    onSuccess: () => void;
}

const RoleCreateForm: React.FC<RoleCreateFormProps> = ({ onSuccess }) => {
    const [createRole, { isLoading, isError: isCreateRoleError, error: createRoleError }] = useCreateRoleMutation();
    const [form] = Form.useForm();
    const { data: permissions, isLoading: isPermissionsLoading, isError: isPermissionsError } = useGetPermissionsQuery({});
    const [messageApi, contextHolder] = message.useMessage();
    
    const onFinish = async (values: any) => {
        try {
            await createRole(values).unwrap();
            messageApi.success('Role created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to create role: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    return (
        <>
         {contextHolder}
        <Form form={form} layout="vertical" onFinish={onFinish}>
            <Form.Item
                label="Name"
                name="name"
                rules={[{ required: true, message: 'Please enter role name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Permissions"
                name="permissions"
                rules={[{ required: true, message: 'Please select permissions!' }]}
            >
                <Select
                    mode="multiple"
                    placeholder="Select Permissions"
                    loading={isPermissionsLoading}
                    options={permissions?.permissions?.map((permission: Permission) => ({
                        label: `${permission.action} - ${permission.description}`,
                        value: permission._id,
                    }))}
                />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoading}>
                    Create Role
                </Button>
            </Form.Item>
        </Form>
        </>
    );
};

export default RoleCreateForm;

===== File: /src/components/Role/RoleDelete.tsx =====
// src/components/Role/roleDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Role } from '@/services/role/roleSliceAPI';
import { useDeleteRoleMutation } from '@/services/role/roleSliceAPI';

interface RoleDeleteProps {
    role: Role;
    onSuccess: () => void;
    onCancel: () => void;
}

const RoleDelete: React.FC<RoleDeleteProps> = ({ role, onSuccess, onCancel }) => {
    const [deleteRole, { isLoading }] = useDeleteRoleMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deleteRole(role._id).unwrap();
            messageApi.success('Role deleted successfully');
            onSuccess();
        } catch (error: any) {
            messageApi.error(`Failed to delete role: ${error?.data.message || 'Unknown error'}`);
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default RoleDelete;

===== File: /src/components/Role/RoleEditForm.tsx =====
// src/components/role/RoleEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdateRoleMutation } from '@/services/role/roleSliceAPI';
import { useGetPermissionsQuery, Permission } from '@/services/permission/permissionSliceAPI';
import { Form, Input, Button, Select, message } from 'antd';
import { Role } from '@/services/role/roleSliceAPI';

interface RoleEditFormProps {
    role: Role;
    onSuccess: () => void;
    onCancel: () => void;
}

const RoleEditForm: React.FC<RoleEditFormProps> = ({ role, onSuccess, onCancel }) => {
    const [updateRole, { isLoading, isError: isUpdateRoleError, error: updateRoleError }] = useUpdateRoleMutation();
    const [form] = Form.useForm();
    const { data: permissionsData, isLoading: isPermissionsLoading, isError: isPermissionsError } = useGetPermissionsQuery({});
    const [messageApi, contextHolder] = message.useMessage();

    useEffect(() => {
        form.setFieldsValue({
            name: role.name,
            permissions: role.permissions?.map(perm => perm._id), // Set initial permission IDs
        });
    }, [form, role]);

    const onFinish = async (values: any) => {
        try {
            await updateRole({ id: role._id, data: values }).unwrap();
            messageApi.success('Role updated successfully');
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to update role: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    const permissions = permissionsData?.permissions || [];

    return (
        <>
            {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Name"
                    name="name"
                    rules={[{ required: true, message: 'Please enter role name!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Permissions"
                    name="permissions"
                    rules={[{ required: true, message: 'Please select permissions!' }]}
                >
                    <Select
                        mode="multiple"
                        placeholder="Select Permissions"
                        loading={isPermissionsLoading}
                        options={permissions.map((permission: Permission) => ({
                            label: `${permission.action} - ${permission.description}`,
                            value: permission._id, // Use permission._id as the value
                        }))}
                    />
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Update Role
                    </Button>
                    <Button onClick={onCancel}>Cancel</Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default RoleEditForm;

===== File: /src/components/Role/RoleList.tsx =====
// src/components/role/RoleList.tsx
'use client';

import React, { useState } from 'react';
import { useGetRolesQuery, Role } from '@/services/role/roleSliceAPI';
import { Table, Button, Space, Input } from 'antd';
import { EditOutlined, DeleteOutlined, SearchOutlined, CloseOutlined, EyeOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader"

interface RoleListProps {
    onView?: (role: Role) => void;
    onEdit?: (role: Role) => void;
    onDelete?: (role: Role) => void;
}

const RoleList: React.FC<RoleListProps> = ({ onView, onEdit, onDelete }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');

    const { data: roleData, isLoading, isError: isGetRolesError, error: getRolesError } = useGetRolesQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
    });

    const totalRoleCount = roleData?.totalRoles || 0;
    const roles = roleData?.roles || [];

    const handleTableChange = (current: number, pageSize: number) => {
        setCurrentPage(current);
        setPageSize(pageSize);
    };

    const columns = [
        {
            title: '#',
            key: 'index',
            render: (text: string, record: Role, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Name',
            dataIndex: 'name',
            key: 'name',
        },
        {
            title: 'Permissions',
            dataIndex: 'permissions',
            key: 'permissions',
            render: (permissions: any[]) => (
                <span>{permissions?.map((perm) => perm.action).join(', ')}</span>
            ),
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Role) => (
                  <Space size="middle">
                                       {onView && (
                                           <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                                               View
                                           </Button>
                                       )}
                                       {onEdit && (
                                           <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                                               Edit
                                           </Button>
                                       )}
                                       {onDelete && (
                                           <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                                               Delete
                                           </Button>
                                       )}
                                   </Space>
            ),
        },
    ];

    if (isLoading) return <Loader />;
    if (isGetRolesError) return <p>Error fetching roles:  { (getRolesError as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
            <Input
                placeholder="Search roles..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                        }}
                    />
                ) : null}
            />
            <Table
                columns={columns}
                dataSource={roles}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalRoleCount,
                    showSizeChanger: true,
                    onChange: handleTableChange,
                }}
            />
        </>
    );
};

export default RoleList;

===== File: /src/components/Role/RoleView.tsx =====
// src/components/role/RoleView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Role } from '@/services/role/roleSliceAPI';

interface RoleViewProps {
    role: Role;
}

const RoleView: React.FC<RoleViewProps> = ({ role }) => {
    return (
        <div>
            <Typography.Title level={4}>Role Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="Name">{role.name}</Descriptions.Item>
                <Descriptions.Item label="Permissions">
                    {role.permissions?.map(perm => perm.action).join(', ')}
                </Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default RoleView;

===== File: /src/components/Shift/MyShiftList.tsx =====
// src/components/Shift/MyShiftList.tsx
'use client';

import React, { useState, useMemo } from 'react';
import { useGetMyShiftsQuery, Shift } from '@/services/shift/shiftSliceAPI';
import { Table, Space, Input, Tag, Button, DatePicker } from 'antd';
import { EyeOutlined, SearchOutlined, CloseOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader";
import { useAppSelector } from '@/store/store';
import dayjs from 'dayjs';
import type { ColumnsType, TableProps, TablePaginationConfig } from 'antd/es/table';
import type { FilterValue, SorterResult, TableCurrentDataSource } from 'antd/es/table/interface';
import type { Dayjs } from 'dayjs';
import logger from "@/utils/logger";

interface MyShiftListProps {
    onView?: (shift: Shift) => void;
    // Add other props as needed (e.g., onEdit, onDelete)
}

interface SorterValue {
    field: string | string[];
    order: 'ascend' | 'descend' | null;
}

const MyShiftList: React.FC<MyShiftListProps> = ({ onView }) => {
    const user = useAppSelector((state) => state.auth.user); // Get the logged-in user
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');
    const [sortBy, setSortBy] = useState<string | undefined>(undefined);
    const [sortOrder, setSortOrder] = useState<"asc" | "desc" | undefined>(undefined);
    const [filterDate, setFilterDate] = useState<string | undefined>(undefined);

    const { data: shiftData, isLoading, isError, error } = useGetMyShiftsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
        date: filterDate,
        sortBy: sortBy,
        sortOrder: sortOrder,
    }, { skip: !user }); // Skip the query if staffId is null (user not loaded yet)

    const totalShiftCount = shiftData?.totalShifts || 0;
    const shifts = shiftData?.shifts || [];
    logger.silly("shiftlist::",shiftData )
    const handleTableChange: TableProps<Shift>['onChange'] = (pagination, filters, sorter) => {
         const { current, pageSize: newPageSize } = pagination;
        setCurrentPage(current || 1);
        setPageSize(newPageSize || 5);

           if (sorter) {
               const currentSort = Array.isArray(sorter) ? sorter[0] : sorter;  // Handle both single and multiple sorters
               if (currentSort && currentSort.field && currentSort.order) {
                   setSortBy(currentSort.field.toString());
                   setSortOrder(currentSort.order === 'ascend' ? 'asc' : 'desc');
               } else {
                   setSortBy(undefined);
                   setSortOrder(undefined);
               }
           }
     };

   const handleDateChange = (date: Dayjs | null, dateString: string | string[]) => {
        const formattedDate = typeof dateString === 'string' ? dateString : dateString[0]; // Use the first selected date if it's an array

        setFilterDate(formattedDate || undefined); // Convert to YYYY-MM-DD format, set undefined if cleared
        setCurrentPage(1); // Reset page when filtering
    };

    const columns: ColumnsType<Shift> = useMemo(() => [
        {
            title: '#',
            key: 'index',
            render: (text: string, record: Shift, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Department',
            dataIndex: 'department',
            key: 'department',
            render: (department: { name: string }) => department.name,
        },
        {
            title: 'Date',
            dataIndex: 'date',
            key: 'date',
            sorter: (a: Shift, b: Shift) => (dayjs(a.date).isBefore(dayjs(b.date)) ? -1 : dayjs(a.date).isAfter(dayjs(b.date)) ? 1 : 0),
             sortOrder: sortBy === 'date' ? (sortOrder === 'asc' ? 'ascend' : 'descend') : null,
            render: (date: string) => date ? dayjs(date).format('MMMM D, YYYY') : 'N/A',
        },
        {
            title: 'Start Time',
            dataIndex: 'startTime',
            key: 'startTime',
            render: (startTime: string) => startTime ? dayjs(startTime, 'HH:mm').format('h:mm A') : 'N/A',
        },
        {
            title: 'End Time',
            dataIndex: 'endTime',
            key: 'endTime',
            render: (endTime: string) => endTime ? dayjs(endTime, 'HH:mm').format('h:mm A') : 'N/A',
        },
        {
            title: 'Type',
            dataIndex: 'type',
            key: 'type',
        },
        {
            title: 'Status',
            dataIndex: 'status',
            key: 'status',
            render: (status: string) => {
                let color = 'default';
                if (status === 'scheduled') color = 'blue';
                if (status === 'completed') color = 'green';
                if (status === 'cancelled') color = 'red';
                return <Tag color={color}>{status.toUpperCase()}</Tag>;
            },
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Shift) => (
                <Space size="middle">
                    {onView && (
                        <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                            View
                        </Button>
                    )}
                </Space>
            ),
        },
    ], [currentPage, pageSize, onView, sortBy, sortOrder]);

    if (isLoading) return <Loader />;
    if (isError) return  <p>Error fetching shifts: { (error as any)?.data?.message || "An unexpected error occurred."}</p>

    //Check if user is not a staff
    if (user?.userType !== "Staff") return <p>You must be a staff member to view your shifts.</p>;

    return (
        <>
            <Input
                placeholder="Search shifts..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />
              <DatePicker
                onChange={handleDateChange}
                style={{ marginBottom: 16, display: 'block' }}
                format="YYYY-MM-DD" // Enforce YYYY-MM-DD format
                placeholder="Filter by Date"
            />
            <Table
                columns={columns}
                dataSource={shifts}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalShiftCount,
                    showSizeChanger: true,
                }}
                 onChange={handleTableChange}
            />
        </>
    );
};

export default MyShiftList;

===== File: /src/components/Shift/ShiftCreateForm.tsx =====
// src/components/Shift/ShiftCreateForm.tsx
'use client';

import React, { useState } from 'react';
import { useCreateShiftMutation } from '@/services/shift/shiftSliceAPI';
import { Form, Input, Button, DatePicker, Select, message } from 'antd';
import dayjs from 'dayjs'
import { useGetStaffQuery } from "@/services/staff/staffSliceAPI"
import { useGetDepartmentsQuery } from "@/services/department/departmentSliceAPI"

interface ShiftCreateFormProps {
    onSuccess: () => void;
}

const ShiftCreateForm: React.FC<ShiftCreateFormProps> = ({ onSuccess }) => {
    const [createShift, { isLoading }] = useCreateShiftMutation();
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();
     const { data: staffData } = useGetStaffQuery({})
    const { data: departmentsData } = useGetDepartmentsQuery({})

    const onFinish = async (values: any) => {
        try {
            const formattedDate = values['date'] ? dayjs(values['date']).format('YYYY-MM-DD') : null;

            const shiftData = {
                ...values,
                date: formattedDate,
            };
            await createShift(shiftData).unwrap();
           messageApi.success('Shift created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            const  errorMessage = `Failed to delete shift: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
            
        }
    };

    return (
        <>   {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Staff ID"
                    name="staff"
                    rules={[{ required: true, message: 'Please enter staff ID!' }]}
                >
                    <Select
                        options={staffData?.staff.map(staff => ({label: staff.firstName, value: staff._id}))}
                    />
                </Form.Item>
                <Form.Item
                    label="Department ID"
                    name="department"
                    rules={[{ required: true, message: 'Please enter department ID!' }]}
                >
                  <Select
                    options={departmentsData?.departments.map(department => ({ label: department.name, value: department._id }))}
                  />
                </Form.Item>
                <Form.Item
                    label="Date"
                    name="date"
                    rules={[{ required: true, message: 'Please select a date!' }]}
                >
                    <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
                </Form.Item>
                <Form.Item
                    label="Start Time"
                    name="startTime"
                    rules={[{ required: true, message: 'Please enter start time!' }]}
                >
                    <Input placeholder="HH:MM" />
                </Form.Item>
                <Form.Item
                    label="End Time"
                    name="endTime"
                    rules={[{ required: true, message: 'Please enter end time!' }]}
                >
                    <Input placeholder="HH:MM" />
                </Form.Item>
                <Form.Item
                    label="Type"
                    name="type"
                    rules={[{ required: true, message: 'Please select a shift type!' }]}
                >
                    <Select>
                        <Select.Option value="morning">Morning</Select.Option>
                        <Select.Option value="evening">Evening</Select.Option>
                        <Select.Option value="night">Night</Select.Option>
                    </Select>
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Create Shift
                    </Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default ShiftCreateForm;

===== File: /src/components/Shift/ShiftDelete.tsx =====
// src/components/Shift/ShiftDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Shift } from '@/services/shift/shiftSliceAPI';
import { useDeleteShiftMutation } from '@/services/shift/shiftSliceAPI';

interface ShiftDeleteProps {
    shift: Shift;
    onSuccess: () => void;
    onCancel: () => void;
}

const ShiftDelete: React.FC<ShiftDeleteProps> = ({ shift, onSuccess, onCancel }) => {
    const [deleteShift, { isLoading }] = useDeleteShiftMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deleteShift(shift._id).unwrap();
            messageApi.success('Shift deleted successfully');
            onSuccess();
        } catch (error: any) {
            messageApi.error(`Failed to delete shift: ${error?.data.message || 'Unknown error'}`);
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default ShiftDelete;

===== File: /src/components/Shift/ShiftEditForm.tsx =====
// src/components/Shift/ShiftEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdateShiftMutation } from '@/services/shift/shiftSliceAPI';
import { Form, Input, Button, DatePicker, Select, message } from 'antd';
import { Shift } from '@/services/shift/shiftSliceAPI';
import dayjs from 'dayjs'

interface ShiftEditFormProps {
    shift: Shift;
    onSuccess: () => void;
    onCancel: () => void;
}

const ShiftEditForm: React.FC<ShiftEditFormProps> = ({ shift, onSuccess, onCancel }) => {
    const [updateShift, { isLoading }] = useUpdateShiftMutation();
    const [form] = Form.useForm();
     const [messageApi, contextHolder] = message.useMessage();

    useEffect(() => {
        form.setFieldsValue({
            staff: shift.staff._id,
            department: shift.department._id,
            date: dayjs(shift.date),
            startTime: shift.startTime,
            endTime: shift.endTime,
            type: shift.type,
            status: shift.status,
        });
    }, [form, shift]);

    const onFinish = async (values: any) => {
        try {
               const formattedDate = values['date'] ? dayjs(values['date']).format('YYYY-MM-DD') : null;
               const shiftData = {
                   ...values,
                   date: formattedDate,
               };
            await updateShift({ id: shift._id, data: shiftData }).unwrap();
            messageApi.success('Shift updated successfully');
            onSuccess();
        } catch (error: any) {
            const  errorMessage = `Failed to delete shift: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
           
        }
    };

    return (
        <>  {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Staff ID"
                    name="staff"
                    rules={[{ required: true, message: 'Please enter staff ID!' }]}
                >
                    <Input disabled />
                </Form.Item>
                <Form.Item
                    label="Department ID"
                    name="department"
                    rules={[{ required: true, message: 'Please enter department ID!' }]}
                >
                    <Input disabled />
                </Form.Item>
                <Form.Item
                    label="Date"
                    name="date"
                    rules={[{ required: true, message: 'Please select a date!' }]}
                >
                    <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
                </Form.Item>
                <Form.Item
                    label="Start Time"
                    name="startTime"
                    rules={[{ required: true, message: 'Please enter start time!' }]}
                >
                    <Input placeholder="HH:MM" />
                </Form.Item>
                <Form.Item
                    label="End Time"
                    name="endTime"
                    rules={[{ required: true, message: 'Please enter end time!' }]}
                >
                    <Input placeholder="HH:MM" />
                </Form.Item>
                <Form.Item
                    label="Type"
                    name="type"
                    rules={[{ required: true, message: 'Please select a shift type!' }]}
                >
                    <Select>
                        <Select.Option value="morning">Morning</Select.Option>
                        <Select.Option value="evening">Evening</Select.Option>
                        <Select.Option value="night">Night</Select.Option>
                    </Select>
                </Form.Item>
                <Form.Item
                    label="Status"
                    name="status"
                    rules={[{ required: true, message: 'Please select a status!' }]}
                >
                    <Select>
                        <Select.Option value="scheduled">Scheduled</Select.Option>
                        <Select.Option value="completed">Completed</Select.Option>
                        <Select.Option value="cancelled">Cancelled</Select.Option>
                    </Select>
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Update Shift
                    </Button>
                    <Button onClick={onCancel}>Cancel</Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default ShiftEditForm;

===== File: /src/components/Shift/ShiftList.tsx =====
// src/components/Shift/ShiftList.tsx
'use client';

import React, { useState, useMemo } from 'react';
import { useGetShiftsQuery, Shift } from '@/services/shift/shiftSliceAPI';
import { Table, Space, Input, Tag, Button, DatePicker, Select } from 'antd';
import { EyeOutlined, SearchOutlined, CloseOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader";
import { useAppSelector } from '@/store/store';
import dayjs from 'dayjs';
import type { ColumnsType, TableProps } from 'antd/es/table';
import type { FilterValue, SorterResult, TableCurrentDataSource, TablePaginationConfig } from 'antd/es/table/interface';
import type { Dayjs } from 'dayjs';
import { useGetDepartmentsQuery, Department } from "@/services/department/departmentSliceAPI";

interface ShiftListProps {
    onView?: (shift: Shift) => void;
    onEdit?: (shift: Shift) => void;
    onDelete?: (shift: Shift) => void;
}

interface SorterValue {
    field: string | string[];
    order: 'ascend' | 'descend' | null;
}

const ShiftList: React.FC<ShiftListProps> = ({ onView, onEdit, onDelete }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');
    const [sortBy, setSortBy] = useState<string | undefined>(undefined);
    const [sortOrder, setSortOrder] = useState<"asc" | "desc" | undefined>(undefined);
    const [filterDate, setFilterDate] = useState<string | undefined>(undefined);
    const [filterDepartment, setFilterDepartment] = useState<string | undefined>(undefined);

    const { data: departmentsData } = useGetDepartmentsQuery({});

    const { data: shiftData, isLoading, isError, error } = useGetShiftsQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
        date: filterDate,
        sortBy: sortBy,
        sortOrder: sortOrder,
        department: filterDepartment,
    });
console.log("shift data::", shiftData)
    const totalShiftCount = shiftData?.totalShifts || 0;

    const handleTableChange: TableProps<Shift>['onChange'] = (pagination, filters, sorter) => {
          const { current, pageSize: newPageSize } = pagination;
        setCurrentPage(current || 1);
        setPageSize(newPageSize || 5);

           if (sorter) {
               const currentSort = Array.isArray(sorter) ? sorter[0] : sorter;
               if (currentSort && currentSort.field && currentSort.order) {
                   setSortBy(currentSort.field.toString());
                   setSortOrder(currentSort.order === 'ascend' ? 'asc' : 'desc');
               } else {
                   setSortBy(undefined);
                   setSortOrder(undefined);
               }
           }
     };

    
      const handleDateChange = (date: Dayjs | null, dateString: string | string[]) => {
            const formattedDate = typeof dateString === 'string' ? dateString : dateString[0]; // Use the first selected date if it's an array
    
            setFilterDate(formattedDate || undefined); // Convert to YYYY-MM-DD format, set undefined if cleared
            setCurrentPage(1); // Reset page when filtering
        };

    const handleDepartmentChange = (value: string | undefined) => {
        setFilterDepartment(value); // Directly use department ID for filtering
        setCurrentPage(1); // Reset page when filtering
    };

    const columns: ColumnsType<Shift> = useMemo(() => [
        {
            title: '#',
            key: 'index',
            render: (text: string, record: Shift, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Staff',
            dataIndex: 'staff',
            key: 'staff',
            render: (staff: { firstName: string; lastName: string } | null) => {
                if (staff) {
                    return `${staff.firstName} ${staff.lastName}`;
                } else {
                    return 'N/A'; // Or any other appropriate placeholder
                }
            },
        },
        {
            title: 'Department',
            dataIndex: 'department',
            key: 'department',
            render: (department: { name: string }) => department.name,
        },
        {
            title: 'Date',
            dataIndex: 'date',
            key: 'date',
            sorter: (a: Shift, b: Shift) => dayjs(a.date).unix() - dayjs(b.date).unix(),
             sortOrder: sortBy === 'date' ? (sortOrder === 'asc' ? 'ascend' : 'descend') : null,
            render: (date: string) => date ? dayjs(date).format('MMMM D, YYYY') : 'N/A',
        },
        {
            title: 'Start Time',
            dataIndex: 'startTime',
            key: 'startTime',
            render: (startTime: string) => startTime ? dayjs(startTime, 'HH:mm').format('h:mm A') : 'N/A',
        },
        {
            title: 'End Time',
            dataIndex: 'endTime',
            key: 'endTime',
            render: (endTime: string) => endTime ? dayjs(endTime, 'HH:mm').format('h:mm A') : 'N/A',
        },
        {
            title: 'Type',
            dataIndex: 'type',
            key: 'type',
        },
        {
            title: 'Status',
            dataIndex: 'status',
            key: 'status',
            render: (status: string) => {
                let color = 'default';
                if (status === 'scheduled') color = 'blue';
                if (status === 'completed') color = 'green';
                if (status === 'cancelled') color = 'red';
                return <Tag color={color}>{status.toUpperCase()}</Tag>;
            },
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: string, record: Shift) => (
                <Space size="middle">
                    {onView && (
                        <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                            View
                        </Button>
                         )}
                          {onEdit && (
                           <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                               Edit
                          </Button>
                       )}
                       {onDelete && (
                          <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                               Delete
                          </Button>
                      )}
                </Space>
            ),
        },
    ], [currentPage, pageSize, onView, sortBy, sortOrder, onEdit, onDelete]);

    if (isLoading || !departmentsData) return <Loader />;
    if (isError) return  <p>Error fetching shifts: { (error as any)?.data?.message || "An unexpected error occurred."}</p>

    return (
        <>
            <Input
                placeholder="Search shifts..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />
             <Space style={{ marginBottom: 16, display: 'block' }}>
            <DatePicker
                onChange={handleDateChange}
                style={{  display: 'block' }}
                format="YYYY-MM-DD" // Enforce YYYY-MM-DD format
                placeholder="Filter by Date"
            />

            <Select
                placeholder="Filter by Department"
                style={{  display: 'block' }}
                onChange={handleDepartmentChange}
                allowClear
            >
                {departmentsData?.departments?.map((department: Department) => (
                    <Select.Option key={department._id} value={department._id}>
                        {department.name}
                    </Select.Option>
                ))}
            </Select>
                 </Space>
            <Table
                columns={columns}
                dataSource={shiftData?.shifts}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalShiftCount,
                    showSizeChanger: true,
                }}
                 onChange={handleTableChange}
            />
        </>
    );
};

export default ShiftList;

===== File: /src/components/Shift/ShiftView.tsx =====
// src/components/Shift/ShiftView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Shift } from '@/services/shift/shiftSliceAPI';
import dayjs from 'dayjs';

interface ShiftViewProps {
    shift: Shift;
}

const ShiftView: React.FC<ShiftViewProps> = ({ shift }) => {
    const formattedDate = shift.date ? dayjs(shift.date).format('MMMM D, YYYY') : 'N/A';
    const formattedStartTime = shift.startTime ? dayjs(shift.startTime, 'HH:mm').format('h:mm A') : 'N/A';
    const formattedEndTime = shift.endTime ? dayjs(shift.endTime, 'HH:mm').format('h:mm A') : 'N/A';

    return (
        <div>
            <Typography.Title level={4}>Shift Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="Staff">
                    {shift.staff.firstName} {shift.staff.lastName}
                </Descriptions.Item>
                <Descriptions.Item label="Department">{shift.department.name}</Descriptions.Item>
                <Descriptions.Item label="Date">{formattedDate}</Descriptions.Item>
                <Descriptions.Item label="Start Time">{formattedStartTime}</Descriptions.Item>
                <Descriptions.Item label="End Time">{formattedEndTime}</Descriptions.Item>
                <Descriptions.Item label="Type">{shift.type}</Descriptions.Item>
                <Descriptions.Item label="Status">{shift.status}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default ShiftView;

===== File: /src/components/Staff/StaffCreateForm.tsx =====
// src/components/Admin/StaffCreateForm.tsx
'use client';

import React from 'react';
import { useCreateStaffMutation } from '@/services/staff/staffSliceAPI';
import { Form, Input, Button, Select, message, DatePicker } from 'antd';
import { StaffCreateRequest } from '@/services/staff/types';
import dayjs from 'dayjs'
import { useGetRolesQuery, Role } from '@/services/role/roleSliceAPI'; // Import hook for fetching roles
import { useGetDepartmentsQuery, Department } from '@/services/department/departmentSliceAPI'; // Import hook for fetching departments

interface StaffCreateFormProps {
    onSuccess: () => void;
}

const StaffCreateForm: React.FC<StaffCreateFormProps> = ({ onSuccess }) => {
    const [createStaff, { isLoading, isError: isCreateStaffError, error: createStaffError }] = useCreateStaffMutation();
    const [form] = Form.useForm();
    const { data: roles, isLoading: isRolesLoading, isError: isRolesError } = useGetRolesQuery({});
    const { data: departments, isLoading: isDepartmentsLoading, isError: isDepartmentsError } = useGetDepartmentsQuery({});
    const [messageApi, contextHolder] = message.useMessage();
 console.log("roles::",roles)
 console.log("departments::",departments)
    const onFinish = async (values: StaffCreateRequest) => {
        try {
            // Format the date of birth using moment.js
            const formattedDob = values['dob'] ? dayjs(values['dob']).format('YYYY-MM-DD') : "";
            // Find the selected role and department names
            const selectedRole = roles?.roles?.find(role => role._id === values.role);
            const selectedDepartment = departments?.departments?.find(department => department._id === values.department);
            if(!selectedRole || !selectedDepartment){
                return
            }
            const staffData = {
                ...values,
                dob: formattedDob,
                role: selectedRole.name, // Send the role name
                department: selectedDepartment.name, // Send the department name
            };

            await createStaff(staffData).unwrap();
            messageApi.success('Staff member created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to create staff member: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
        }
    };

    const disabledFutureDate = (current: dayjs.Dayjs ) => {
           // Disable dates after today
           return current && current > dayjs().endOf('day');
       };

     const genderOptions = [
        { value: 'Male', label: 'Male' },
        { value: 'Female', label: 'Female' },
        { value: 'Other', label: 'Other' },
    ];

    if (isRolesLoading || isDepartmentsLoading) {
        return <p>Loading data...</p>;
    }

    if (isRolesError || isDepartmentsError) {
        return <p>Error fetching data.</p>;
    }

    return (
        <>
             {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="First Name"
                    name="firstName"
                    rules={[{ required: true, message: 'Please enter first name!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Last Name"
                    name="lastName"
                    rules={[{ required: true, message: 'Please enter last name!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Email"
                    name="email"
                    rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}
                >
                    <Input />
                </Form.Item>
                  <Form.Item
                    label="Phone"
                    name="phone"
                    rules={[{ required: true, message: 'Please enter phone number!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Address"
                    name="address"
                    rules={[{ required: true, message: 'Please enter address!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Gender"
                    name="gender"
                    rules={[{ required: true, message: 'Please select gender!' }]}
                >
                     <Select
                        placeholder="Select Gender"
                        options={genderOptions}
                    />
                </Form.Item>
                 <Form.Item
                    label="Date of Birth"
                    name="dob"
                    rules={[{ required: true, message: 'Please select a date of birth!' }]}
                >
                    <DatePicker
                        style={{ width: '100%' }}
                         disabledDate={disabledFutureDate}
                         format="YYYY-MM-DD"
                         picker="date"
                    />
                </Form.Item>

                <Form.Item
                    label="Staff Role"
                    name="role"
                    rules={[{ required: true, message: 'Please select a staff role!' }]}
                >
                    <Select
                        loading={isRolesLoading}
                        options={roles?.roles?.map((role: Role) => ({
                            label: role.name,
                            value: role._id,
                        }))}
                    />
                </Form.Item>

                <Form.Item
                    label="Department"
                    name="department"
                    rules={[{ required: true, message: 'Please select a department!' }]}
                >
                    <Select
                        loading={isDepartmentsLoading}
                        options={departments?.departments.map((department: Department) => ({
                            label: department.name,
                            value: department._id,
                        }))}
                    />
                </Form.Item>

                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Create Staff
                    </Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default StaffCreateForm;

===== File: /src/components/Staff/StaffDelete.tsx =====
// src/components/Staff/StaffDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Staff } from '@/services/staff/types';
import { useDeleteStaffMutation } from '@/services/staff/staffSliceAPI';
 

interface StaffDeleteProps {
    staff: Staff;
    onSuccess: () => void;
    onCancel: () => void;
}

const StaffDelete: React.FC<StaffDeleteProps> = ({ staff, onSuccess, onCancel }) => {
    const [deleteStaff, { isLoading }] = useDeleteStaffMutation();
    const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deleteStaff(staff._id).unwrap();
            messageApi.success('Staff member deleted successfully');
            onSuccess(); // Notify parent component of successful deletion
        } catch (error: any) {
            messageApi.error(`Failed to delete staff: ${error?.data.message || 'Unknown error'}`);
           
        }
    };

    return (
        <>
            {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default StaffDelete;

===== File: /src/components/Staff/StaffEditForm.tsx =====
// src/components/Admin/StaffEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdateStaffMutation } from '@/services/staff/staffSliceAPI';
import { Form, Input, Button, Select, message, DatePicker } from 'antd';
import { Staff, StaffUpdateRequest } from '@/services/staff/types';
import dayjs from 'dayjs'
import { useGetRolesQuery, Role } from '@/services/role/roleSliceAPI';
import { useGetDepartmentsQuery, Department } from '@/services/department/departmentSliceAPI';
import { disabledFutureDate } from '@/utils/disabledFutureDate';

interface StaffEditFormProps {
    staff: Staff;
    onSuccess: () => void;
    onCancel: () => void;
}

const StaffEditForm: React.FC<StaffEditFormProps> = ({ staff, onSuccess, onCancel }) => {
    const [updateStaff, { isLoading, isError: isUpdateStaffError, error: updateStaffError }] = useUpdateStaffMutation();
    const [form] = Form.useForm();
    const { data: roles, isLoading: isRolesLoading, isError: isRolesError } = useGetRolesQuery({});
    const { data: departments, isLoading: isDepartmentsLoading, isError: isDepartmentsError } = useGetDepartmentsQuery({});
    const [messageApi, contextHolder] = message.useMessage();

    useEffect(() => {
        form.setFieldsValue({
            ...staff,
            dob: staff.dob ? dayjs(staff.dob) : null,
            role: staff.role?._id,
            department: staff.department?._id,
        });
    }, [form, staff]);

    const onFinish = async (values: any) => {
        try {
            const formattedDob = values['dob'] ? dayjs(values['dob']).format('YYYY-MM-DD') : "";
            const staffData: StaffUpdateRequest = {
                ...values,
                dob: formattedDob,
                role: values.role,
                department: values.department,
            };
            await updateStaff({ id: staff._id, data: staffData }).unwrap();
            messageApi.success('Staff member updated successfully');
            onSuccess();
        } catch (error: any) {
            const errorMessage = `Failed to update staff member: ${error?.data.message || 'Unknown error'}`;
             messageApi.error(errorMessage);
        }
    };

    if (isRolesLoading || isDepartmentsLoading) {
        return <p>Loading data...</p>;
    }

    if (isRolesError || isDepartmentsError) {
        return <p>Error fetching data.</p>;
    }

    return (
        <>
            {contextHolder}
        <Form form={form} layout="vertical" onFinish={onFinish}>
            <Form.Item
                label="First Name"
                name="firstName"
                rules={[{ required: true, message: 'Please enter first name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Last Name"
                name="lastName"
                rules={[{ required: true, message: 'Please enter last name!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Email"
                name="email"
                rules={[{ required: true, message: 'Please enter email!', type: 'email' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Phone"
                name="phone"
                rules={[{ required: true, message: 'Please enter phone number!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Address"
                name="address"
                rules={[{ required: true, message: 'Please enter address!' }]}
            >
                <Input />
            </Form.Item>
            <Form.Item
                label="Gender"
                name="gender"
                rules={[{ required: true, message: 'Please select gender!' }]}
            >
                <Select>
                    <Select.Option value="Male">Male</Select.Option>
                    <Select.Option value="Female">Female</Select.Option>
                </Select>
            </Form.Item>
            <Form.Item
                label="Date of Birth"
                name="dob"
                rules={[{ required: true, message: 'Please select a date of birth!' }]}
            >
                <DatePicker
                    style={{ width: '100%' }}
                    disabledDate={disabledFutureDate}
                    format="YYYY-MM-DD"
                    picker="date"
                />
            </Form.Item>
            <Form.Item
                label="Staff Role"
                name="role"
                rules={[{ required: true, message: 'Please select a staff role!' }]}
            >
                <Select
                    loading={isRolesLoading}
                    options={roles?.roles?.map((role: Role) => ({
                        label: role.name,
                        value: role._id,
                    }))}
                />
            </Form.Item>

            <Form.Item
                label="Department"
                name="department"
                rules={[{ required: true, message: 'Please select a department!' }]}
            >
                <Select
                    loading={isDepartmentsLoading}
                    options={departments?.departments?.map((department: Department) => ({
                        label: department.name,
                        value: department._id,
                    }))}
                />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoading}>
                    Update Staff
                </Button>
                <Button style={{ marginLeft: 8 }} onClick={onCancel}>
                    Cancel
                </Button>
            </Form.Item>
        </Form>
        </>
    );
};

export default StaffEditForm;

===== File: /src/components/Staff/StaffList.tsx =====
// src/components/Staff/StaffList.tsx
'use client';

import React, { useState, useCallback } from 'react';
import { useGetStaffQuery } from '@/services/staff/staffSliceAPI';
import { Table, Button, Space, Input } from 'antd';
import { Staff } from '@/services/staff/types';
import { EditOutlined, EyeOutlined, SearchOutlined, CloseOutlined, DeleteOutlined } from '@ant-design/icons';
import Loader from "@/components/Layout/Loader"

interface StaffListProps {
    onView?: (staff: Staff) => void;
    onEdit?: (staff: Staff) => void;
    onDelete?: (staff: Staff) => void;
}

const StaffList: React.FC<StaffListProps> = ({ onView, onEdit, onDelete }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');

    const { data: staffData, isLoading, isError, error } = useGetStaffQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm
    });

    const totalStaffCount = staffData?.totalStaff || 0;
    const staff = staffData?.staff || [];

    const handleTableChange = (current: number, pageSize: number) => {
        setCurrentPage(current);
        setPageSize(pageSize);
    };

    // Use useCallback to prevent unnecessary re-renders of the action column
    const columns = React.useMemo(
        () => [
            {
                title: '#',
                key: 'index',
                render: (text: string, record: Staff, index: number) => {
                    return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
                },
            },
            {
                title: 'First Name',
                dataIndex: 'firstName',
                key: 'firstName',
            },
            {
                title: 'Last Name',
                dataIndex: 'lastName',
                key: 'lastName',
            },
            {
                title: 'Email',
                dataIndex: 'email',
                key: 'email',
            },
            {
                title: 'Role',
                dataIndex: 'role',
                key: 'role',
                render: (role: { name: string }) => role?.name,
            },
            {
                title: 'Department',
                dataIndex: 'department',
                key: 'department',
                render: (department: { name: string }) => department?.name,
            },
            {
                title: 'Action',
                key: 'action',
                render: (text: string, record: Staff) => (
                    <Space size="middle">
                        {onView && (
                            <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                                View
                            </Button>
                        )}
                        {onEdit && (
                            <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                                Edit
                            </Button>
                        )}
                        {onDelete && (
                            <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                                Delete
                            </Button>
                        )}
                    </Space>
                ),
            },
        ],
        [currentPage, pageSize, onView, onEdit, onDelete] // Dependencies for the memo
    );

    if (isLoading) return <Loader />;
    if (isError) return <p>Error fetching staff: {(error as any)?.data?.message || "An unexpected error occurred."}</p>

    return (
        <>
            <Input
                placeholder="Search staff..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                        }}
                    />
                ) : null}
            />
            <Table
                columns={columns}
                dataSource={staff}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalStaffCount,
                    showSizeChanger: true,
                    onChange: handleTableChange,
                }}
            />
        </>
    );
};

export default StaffList;

===== File: /src/components/Staff/StaffView.tsx =====
// src/components/Admin/StaffView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Staff } from '@/services/staff/types';
import dayjs from 'dayjs';

interface StaffViewProps {
    staff: Staff;
}

const StaffView: React.FC<StaffViewProps> = ({ staff }) => {
     const formattedDob = staff.dob ? dayjs(staff.dob).format('MMMM D, YYYY') : 'N/A';
    return (
        <div>
            <Typography.Title level={4}>Staff Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="ID">{staff._id}</Descriptions.Item>
                <Descriptions.Item label="First Name">{staff.firstName}</Descriptions.Item>
                <Descriptions.Item label="Last Name">{staff.lastName}</Descriptions.Item>
                <Descriptions.Item label="Email">{staff.email}</Descriptions.Item>
                <Descriptions.Item label="Phone">{staff.phone}</Descriptions.Item>
                <Descriptions.Item label="Date of Birth">{formattedDob}</Descriptions.Item>
                <Descriptions.Item label="Address">{staff.address}</Descriptions.Item>
                <Descriptions.Item label="Gender">{staff.gender}</Descriptions.Item>
                <Descriptions.Item label="Role">{staff.role?.name}</Descriptions.Item>
                <Descriptions.Item label="Department">{staff.department?.name}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default StaffView;

===== File: /src/components/Task/MyTaskList.tsx =====
// src/components/Task/MyTaskList.tsx
'use client';

import React, { useState } from 'react';
import { useGetMyTasksQuery, Task } from '@/services/task/taskSliceAPI';
import { Table, Space, Button, Input, Select, Tag } from 'antd';
import { EditOutlined, EyeOutlined, SearchOutlined, CloseOutlined, CheckOutlined, DeleteOutlined } from '@ant-design/icons';
import Loader from '@/components/Layout/Loader';
import { useAppSelector } from '@/store/store';
import { useRouter } from 'next/navigation';
import type { TableProps } from 'antd';
import { ColumnsType } from 'antd/es/table';
import dayjs from 'dayjs'; // Import dayjs for date formatting

interface MyTaskListProps {
    onView?: (task: Task) => void;
    onEdit?: (task: Task) => void;
    onDelete?: (task: Task) => void;
    onComplete?: (task: Task) => void;
}

interface SorterValue {
    field: string | string[];
    order: 'ascend' | 'descend' | null;
}

const MyTaskList: React.FC<MyTaskListProps> = ({ onView, onEdit, onDelete, onComplete }) => {
    const user = useAppSelector((state) => state.auth.user);
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState<"pending" | "in_progress" | "completed" | undefined>(undefined);
    const [sortBy, setSortBy] = useState<string | undefined>(undefined);
    const [sortOrder, setSortOrder] = useState<"asc" | "desc" | undefined>(undefined);
    const router = useRouter();

    const { data: taskData, isLoading, isError, error } = useGetMyTasksQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
        status: statusFilter,
        sortBy: sortBy,
        sortOrder: sortOrder,
    });

    const totalTaskCount = taskData?.totalTasks || 0;

    const handleTableChange: TableProps<Task>['onChange'] = (pagination, filters, sorter) => {
        const { current, pageSize: newPageSize } = pagination ;
        setCurrentPage(current || 1);
        setPageSize(newPageSize || 5);

        if (sorter) {
            const currentSort = sorter as any;
            if (currentSort.field && currentSort.order) {
                setSortBy(currentSort.field.toString());
                setSortOrder(currentSort.order === 'ascend' ? 'asc' : 'desc');
            } else {
                setSortBy(undefined);
                setSortOrder(undefined);
            }
        }
    };

    const columns: ColumnsType<Task> = [
        {
            title: '#',
            key: 'index',
            render: (text: any, record: Task, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Title',
            dataIndex: 'title',
            key: 'title',
            sorter: (a:any, b:any) => a.title.localeCompare(b.title),
            sortOrder: sortBy === 'title' ? (sortOrder === 'asc' ? 'ascend' : 'descend') : null,
        },
        {
            title: 'Description',
            dataIndex: 'description',
            key: 'description',
        },
        {
            title: 'Status',
            dataIndex: 'status',
            key: 'status',
        },
        {
            title: 'Created At',
            dataIndex: 'createdAt',
            key: 'createdAt',
            sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),
            sortOrder: sortBy === 'createdAt' ? (sortOrder === 'asc' ? 'ascend' : 'descend') : null,
            render: (dateString: string) => dayjs(dateString).format('MMMM D, YYYY h:mm A'),  // Format the date
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: any, record: Task) => (
                <Space size="middle">
                    {onView && (
                        <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                            View
                        </Button>
                    )}
                    {onEdit && (
                        <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                            Edit
                        </Button>
                    )}
                    {onDelete && (
                        <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                            Delete
                        </Button>
                    )}
                   {onComplete && record.status !== 'completed' && !(user && record.createdBy && user._id === record.createdBy._id) && (
                    <Button icon={<CheckOutlined />} onClick={() => onComplete(record)}>
                        Complete
                    </Button>
                )}
                </Space>
            ),
        },
    ];

    // Add loading and error state
    if (isLoading) return <Loader />;
    if (isError) return <p>Error fetching tasks: {(error as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
            <Input
                placeholder="Search tasks..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />
            <Select
                placeholder="Filter by Status"
                value={statusFilter}
                onChange={(value) => {
                    setStatusFilter(value);
                    setCurrentPage(1);
                }}
                allowClear
                style={{ marginBottom: 16, display: 'block' }}
            >
                <Select.Option value="pending">Pending</Select.Option>
                <Select.Option value="in_progress">In Progress</Select.Option>
                <Select.Option value="completed">Completed</Select.Option>
            </Select>
            <Table
                columns={columns}
                dataSource={taskData?.tasks}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalTaskCount,
                    showSizeChanger: true,
                }}
                onChange={handleTableChange}
            />
        </>
    );
};

export default MyTaskList;

===== File: /src/components/Task/TaskComplete.tsx =====
// src/components/Task/TaskComplete.tsx
'use client';

import React from 'react';
import { Button, message } from 'antd';
import { CheckOutlined } from '@ant-design/icons';
import { useCompleteTaskMutation, Task } from '@/services/task/taskSliceAPI';
import { useAppSelector } from '@/store/store';
import logger from '@/utils/logger';

interface TaskCompleteProps {
    task: Task;
    onSuccess: () => void;
}

const TaskComplete: React.FC<TaskCompleteProps> = ({ task, onSuccess }) => {
    const [completeTask, { isLoading, isError }] = useCompleteTaskMutation();
    const [messageApi, contextHolder] = message.useMessage();
    const user = useAppSelector((state) => state.auth.user);

    // Check if the logged-in user created the task
    const isCreatedByUser = user?._id === task.createdBy._id;

    const handleComplete = async () => {
        logger.silly("in complete task")
        try {
            await completeTask(task._id).unwrap();
            messageApi.success('Task completed successfully!');
            onSuccess(); // Notify the parent component to refresh the task list
        } catch (error: any) {
            console.error(`Error completing task:`, error);
            messageApi.error(`Failed to complete task: ${error?.data?.message || 'An unexpected error occurred.'}`);
        }
    };

    // Do not return complete button if created by user.
    if (isCreatedByUser) {
        return null;
    }

    return (
        <>
            {contextHolder}
            <Button
                icon={<CheckOutlined />}
                onClick={handleComplete}
                loading={isLoading}
                disabled={isLoading || isError}
            >
                Complete
            </Button>
        </>
    );
};

export default TaskComplete;

===== File: /src/components/Task/TaskCreateForm.tsx =====
// src/components/Task/TaskCreateForm.tsx
'use client';

import React from 'react';
import { useCreateTaskMutation } from '@/services/task/taskSliceAPI';
import { Form, Input, Button, Select, message } from 'antd';
import { TaskCreateRequest } from '@/services/task/taskSliceAPI';
import logger from "@/utils/logger"

interface TaskCreateFormProps {
    onSuccess: () => void;
}

const TaskCreateForm: React.FC<TaskCreateFormProps> = ({ onSuccess }) => {
    const [createTask, { isLoading }] = useCreateTaskMutation();
    const [form] = Form.useForm();
     const [messageApi, contextHolder] = message.useMessage();

    const onFinish = async (values: TaskCreateRequest) => {
        try {
            await createTask(values).unwrap();
           messageApi.success('Task created successfully');
            form.resetFields();
            onSuccess();
        } catch (error: any) {
            logger.error(error)
            const  errorMessage = `Failed to create task: ${error?.data.message || 'Unknown error'}`;
            messageApi.error(errorMessage);
         }
    };

    return (
        <>  {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Title"
                    name="title"
                    rules={[{ required: true, message: 'Please enter task title!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Description"
                    name="description"
                    rules={[{ required: true, message: 'Please enter task description!' }]}
                >
                    <Input.TextArea />
                </Form.Item>
                <Form.Item
                    label="Assigned To (Patient ID)"
                    name="assignedTo"
                    rules={[{ required: true, message: 'Please enter patient ID!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Type"
                    name="type"
                    rules={[{ required: true, message: 'Please select a task type!' }]}
                >
                    <Select>
                      
                        <Select.Option value="medical_record">Medical Record</Select.Option>
                        <Select.Option value="discharge">Discharge</Select.Option>
                        <Select.Option value="prescription">Prescription</Select.Option>
                    </Select>
                </Form.Item>
                <Form.Item
                    label="Priority"
                    name="priority"
                    rules={[{ required: true, message: 'Please select a priority!' }]}
                >
                    <Select>
                        <Select.Option value="low">Low</Select.Option>
                        <Select.Option value="medium">Medium</Select.Option>
                        <Select.Option value="high">High</Select.Option>
                    </Select>
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Create Task
                    </Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default TaskCreateForm;

===== File: /src/components/Task/TaskDelete.tsx =====
// src/components/Task/TaskDelete.tsx
'use client';

import React from 'react';
import { Button, message, Space } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Task } from '@/services/task/taskSliceAPI';
import { useDeleteTaskMutation } from '@/services/task/taskSliceAPI';

interface TaskDeleteProps {
    task: Task;
    onSuccess: () => void;
    onCancel: () => void;
}

const TaskDelete: React.FC<TaskDeleteProps> = ({ task, onSuccess, onCancel }) => {
    const [deleteTask, { isLoading }] = useDeleteTaskMutation();
     const [messageApi, contextHolder] = message.useMessage();

    const handleDelete = async () => {
        try {
            await deleteTask(task._id).unwrap();
             messageApi.success('Task deleted successfully');
            onSuccess();
        } catch (error: any) {
            messageApi.error(`Failed to delete task: ${error?.data.message || 'Unknown error'}`);
            
        }
    };

    return (
        <> {contextHolder}
            <Space>
                <Button danger icon={<DeleteOutlined />} loading={isLoading} onClick={handleDelete}>
                    Delete
                </Button>
                <Button onClick={onCancel}>
                    Cancel
                </Button>
            </Space>
        </>
    );
};

export default TaskDelete;

===== File: /src/components/Task/TaskEditForm.tsx =====
// src/components/Task/TaskEditForm.tsx
'use client';

import React, { useEffect } from 'react';
import { useUpdateTaskMutation, Task } from '@/services/task/taskSliceAPI';
import { Form, Input, Button, Select, message } from 'antd';

interface TaskEditFormProps {
    task: Task;
    onSuccess: () => void;
    onCancel: () => void;
}

const TaskEditForm: React.FC<TaskEditFormProps> = ({ task, onSuccess, onCancel }) => {
    const [updateTask, { isLoading }] = useUpdateTaskMutation();
     const [messageApi, contextHolder] = message.useMessage();
    const [form] = Form.useForm();

    useEffect(() => {
        form.setFieldsValue({
            title: task.title,
            description: task.description,
            assignedTo: task.assignedTo._id,
            status: task.status,
            priority: task.priority,
        });
    }, [form, task]);

    const onFinish = async (values: any) => {
        try {
            await updateTask({ id: task._id, data: values }).unwrap();
           messageApi.success('Task updated successfully');
            onSuccess();
        } catch (error: any) {
            messageApi.error(`Failed to update task: ${error?.data.message || 'Unknown error'}`);
           
        }
    };

    return (
        <>   {contextHolder}
            <Form form={form} layout="vertical" onFinish={onFinish}>
                <Form.Item
                    label="Title"
                    name="title"
                    rules={[{ required: true, message: 'Please enter task title!' }]}
                >
                    <Input />
                </Form.Item>
                <Form.Item
                    label="Description"
                    name="description"
                    rules={[{ required: true, message: 'Please enter task description!' }]}
                >
                    <Input.TextArea />
                </Form.Item>
                <Form.Item
                    label="Assigned To (User ID)"
                    name="assignedTo"
                    rules={[{ required: true, message: 'Please enter user ID!' }]}
                >
                    <Input disabled />
                    
                </Form.Item>
                <Form.Item
                    label="Status"
                    name="status"
                    rules={[{ required: true, message: 'Please select a status!' }]}
                >
                    <Select>
                        <Select.Option value="pending">Pending</Select.Option>
                        <Select.Option value="in_progress">In Progress</Select.Option>
                        <Select.Option value="completed">Completed</Select.Option>
                    </Select>
                </Form.Item>
                <Form.Item
                    label="Priority"
                    name="priority"
                    rules={[{ required: true, message: 'Please select a priority!' }]}
                >
                    <Select>
                        <Select.Option value="low">Low</Select.Option>
                        <Select.Option value="medium">Medium</Select.Option>
                        <Select.Option value="high">High</Select.Option>
                    </Select>
                </Form.Item>
                <Form.Item>
                    <Button type="primary" htmlType="submit" loading={isLoading}>
                        Update Task
                    </Button>
                    <Button onClick={onCancel}>Cancel</Button>
                </Form.Item>
            </Form>
        </>
    );
};

export default TaskEditForm;

===== File: /src/components/Task/TaskList.tsx =====
// src/components/Task/MyTaskList.tsx
'use client';

import React, { useState } from 'react';
import { useGetTasksQuery, Task } from '@/services/task/taskSliceAPI';
import { Table, Space, Button, Input, Select, Tag } from 'antd';
import { EditOutlined, EyeOutlined, SearchOutlined, CloseOutlined, CheckOutlined, DeleteOutlined } from '@ant-design/icons';
import Loader from '@/components/Layout/Loader';
import { useAppSelector } from '@/store/store';
import { useRouter } from 'next/navigation';
import type { TableProps } from 'antd';
import { ColumnsType } from 'antd/es/table';
import dayjs from 'dayjs';  
import logger from "@/utils/logger"

interface MyTaskListProps {
    onView?: (task: Task) => void;
    onEdit?: (task: Task) => void;
    onDelete?: (task: Task) => void;
}

interface SorterValue {
    field: string | string[];
    order: 'ascend' | 'descend' | null;
}

const TaskList: React.FC<MyTaskListProps> = ({ onView, onEdit, onDelete }) => {
    const user = useAppSelector((state) => state.auth.user);
    const [currentPage, setCurrentPage] = useState(1);
    const [pageSize, setPageSize] = useState(5);
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState<"pending" | "in_progress" | "completed" | undefined>(undefined);
    const [sortBy, setSortBy] = useState<string | undefined>(undefined);
    const [sortOrder, setSortOrder] = useState<"asc" | "desc" | undefined>(undefined);
    const router = useRouter();

    const { data: taskData, isLoading, isError, error } = useGetTasksQuery({
        page: currentPage,
        limit: pageSize,
        search: searchTerm,
        status: statusFilter,
        sortBy: sortBy,
        sortOrder: sortOrder,
    });

    logger.silly("taskslist::", taskData)
    const totalTaskCount = taskData?.totalTasks || 0;

    const handleTableChange: TableProps<Task>['onChange'] = (pagination, filters, sorter) => {
        const { current, pageSize: newPageSize } = pagination ;
        setCurrentPage(current || 1);
        setPageSize(newPageSize || 5);

        if (sorter) {
            const currentSort = sorter as any;
            if (currentSort.field && currentSort.order) {
                setSortBy(currentSort.field.toString());
                setSortOrder(currentSort.order === 'ascend' ? 'asc' : 'desc');
            } else {
                setSortBy(undefined);
                setSortOrder(undefined);
            }
        }
    };

    const columns: ColumnsType<Task> = [
        {
            title: '#',
            key: 'index',
            render: (text: any, record: Task, index: number) => {
                return (Number(currentPage) - 1) * Number(pageSize) + index + 1;
            },
        },
        {
            title: 'Title',
            dataIndex: 'title',
            key: 'title',
            sorter: (a:any, b:any) => a.title.localeCompare(b.title),
            sortOrder: sortBy === 'title' ? (sortOrder === 'asc' ? 'ascend' : 'descend') : null,
        },
        {
            title: 'Description',
            dataIndex: 'description',
            key: 'description',
        },
        {
            title: 'Status',
            dataIndex: 'status',
            key: 'status',
        },
        {
            title: 'Created At',
            dataIndex: 'createdAt',
            key: 'createdAt',
            sorter: (a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),
            sortOrder: sortBy === 'createdAt' ? (sortOrder === 'asc' ? 'ascend' : 'descend') : null,
            render: (dateString: string) => dayjs(dateString).format('MMMM D, YYYY h:mm A'),  // Format the date
        },
        {
            title: 'Action',
            key: 'action',
            render: (text: any, record: Task) => (
                <Space size="middle">
                    {onView && (
                        <Button icon={<EyeOutlined />} onClick={() => onView(record)}>
                            View
                        </Button>
                    )}
                    {onEdit && (
                        <Button icon={<EditOutlined />} onClick={() => onEdit(record)}>
                            Edit
                        </Button>
                    )}
                    {onDelete && (
                        <Button danger icon={<DeleteOutlined />} onClick={() => onDelete(record)}>
                            Delete
                        </Button>
                    )}
               
                </Space>
            ),
        },
    ];

    // Add loading and error state
    if (isLoading) return <Loader />;
    if (isError) return <p>Error fetching tasks: {(error as any)?.data?.message || "An unexpected error occurred."}</p>;

    return (
        <>
            <Input
                placeholder="Search tasks..."
                value={searchTerm}
                onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                }}
                style={{ marginBottom: 16 }}
                prefix={<SearchOutlined />}
                suffix={searchTerm ? (
                    <CloseOutlined
                        onClick={() => {
                            setSearchTerm('');
                            setCurrentPage(1);
                        }}
                    />
                ) : null}
            />
            <Select
                placeholder="Filter by Status"
                value={statusFilter}
                onChange={(value) => {
                    setStatusFilter(value);
                    setCurrentPage(1);
                }}
                allowClear
                style={{ marginBottom: 16, display: 'block' }}
            >
                <Select.Option value="pending">Pending</Select.Option>
                <Select.Option value="in_progress">In Progress</Select.Option>
                <Select.Option value="completed">Completed</Select.Option>
            </Select>
            <Table
                columns={columns}
                dataSource={taskData?.tasks}
                rowKey="_id"
                pagination={{
                    current: currentPage,
                    pageSize: pageSize,
                    total: totalTaskCount,
                    showSizeChanger: true,
                }}
                onChange={handleTableChange}
            />
        </>
    );
};

export default TaskList;

===== File: /src/components/Task/TaskView.tsx =====
// src/components/Task/TaskView.tsx
import React from 'react';
import { Typography, Descriptions } from 'antd';
import { Task } from '@/services/task/taskSliceAPI';
import dayjs from 'dayjs';

interface TaskViewProps {
    task: Task;
}

const TaskView: React.FC<TaskViewProps> = ({ task }) => {
    const formattedCreatedAt = task.createdAt ? dayjs(task.createdAt).format('MMMM D, YYYY h:mm A') : 'N/A';

    return (
        <div>
            <Typography.Title level={4}>Task Details</Typography.Title>
            <Descriptions bordered column={1}>
                <Descriptions.Item label="Title">{task.title}</Descriptions.Item>
                <Descriptions.Item label="Description">{task.description}</Descriptions.Item>
                 <Descriptions.Item label="Assigned To Name">{task.assignedTo.firstName} {task.assignedTo.lastName}</Descriptions.Item>
                <Descriptions.Item label="Type">{task.type}</Descriptions.Item>
                <Descriptions.Item label="Status">{task.status}</Descriptions.Item>
                <Descriptions.Item label="Priority">{task.priority}</Descriptions.Item>
                <Descriptions.Item label="Created By Name">{task.createdBy.firstName} {task.createdBy.lastName}</Descriptions.Item>
                <Descriptions.Item label="Created At">{formattedCreatedAt}</Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default TaskView;

===== File: /src/utils/dateUtils.ts =====
// src/utils/dateUtils.ts
import dayjs from 'dayjs';

export const formatDate = (date: string | Date | null, format: string = 'MMMM D, YYYY') => {
    if (!date) return 'N/A';
    return dayjs(date).format(format);
};

export const formatDateWithTime = (date: string | Date | null, format: string = 'MMMM D, YYYY h:mm A') => {
    if (!date) return 'N/A';
    return dayjs(date).format(format);
};

export const formatTime = (date: string | Date | null, format: string = 'h:mm A') => {
    if (!date) return 'N/A';
    return dayjs(date).format(format);
};

===== File: /src/utils/disabledFutureDate.ts =====
import dayjs from 'dayjs'

export const disabledFutureDate = (current: dayjs.Dayjs ) => {
        // Disable dates after today
        return current && current > dayjs().endOf('day');
    };

===== File: /src/utils/logger.ts =====
class Logger {
    private readonly levels = {
      log: console.log,
      warn: console.warn,
      error: console.error,
      debug: console.debug,
      info: console.info,
      silly: console.log, // Map "silly" to console.log
    } as const;
  
    log(level: keyof typeof this.levels, ...args: any[]) {
      const timestamp = new Date().toISOString();
      const logMessage = `[${timestamp}] [${level.toUpperCase()}]`;
  
      // Call the appropriate logging function
      this.levels[level](logMessage, ...args);
    }
  
    warn(...args: any[]) {
      this.log("warn", ...args);
    }
  
    error(...args: any[]) {
      this.log("error", ...args);
    }

    debug(...args: any[]) {
      this.log("debug", ...args);
    }
  
    info(...args: any[]) {
      this.log("info", ...args);
    }
  
    silly(...args: any[]) {
      this.log("silly", ...args);
    }
  }
  
  // Exporting a singleton instance
  const logger = new Logger();
  export default logger;
  

===== File: /src/utils/logger1.ts =====
// utils/logger.ts

const isDev = process.env.NODE_ENV === 'development';

// Define an environment variable to control log levels
// const logLevel = (process.env.NEXT_PUBLIC_LOG_LEVEL || (isDev ? 'debug' : 'warn')) as keyof LogLevels;
const logLevel = 'silly'
// Define log levels with explicit type
interface LogLevels {
    silly: number;
    debug: number;
    log: number;
    info: number;
    warn: number;
    error: number;
}

const logLevels: LogLevels = {
    silly: 0,
    debug: 1,
    log: 2,
    info: 3,
    warn: 4,
    error: 5,
};

// Helper function to check if a level is enabled
const isLevelEnabled = (level: keyof LogLevels): boolean => {
    if (!(level in logLevels)) {
        return false;
    }
    return logLevels[level] >= logLevels[logLevel];
};

const logger1 = {
    log: (...args: any[]) => {
        if (isLevelEnabled('log')) {
            console.log('[INFO]', ...args);
        }
    },
    info: (...args: any[]) => {
        if (isLevelEnabled('info')) {
            console.info('[INFO]', ...args);
        }
    },
    warn: (...args: any[]) => {
        if (isLevelEnabled('warn')) {
            console.warn('[WARN]', ...args);
        }
    },
    error: (...args: any[]) => {
        if (isLevelEnabled('error')) {
            console.error('[ERROR]', ...args);
        }
    },
    debug: (...args: any[]) => {
        if (isLevelEnabled('debug') && isDev) {
            console.debug('[DEBUG]', ...args);
        }
    },
    silly: (...args: any[]) => {
        if (isLevelEnabled('silly') && isDev) {
            console.debug('[SILLY]', ...args);
        }
    },
};

export default logger1;

===== File: /src/services/appointment/appointmentSliceAPI.ts =====
// src/services/appointment/appointmentSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";

export interface Appointment {
  _id: string;
  patient: PatientInfo; // Replace with appropriate type
  doctor: StaffInfo;  // Replace with appropriate type
  department: DepartmentInfo; // Replace with appropriate type
  date: string;  // ISO Date String
  status: "pending" | "confirmed" | "rescheduled" | "canceled";
  assignedTo?: StaffInfo | null;
  confirmedBy?: StaffInfo | null;
  createdBy: StaffInfo;
  createdAt: string;
  updatedAt: string;
}

interface PatientInfo {
    _id: string;
    firstName: string;
    lastName: string;
}
interface StaffInfo {
    _id: string;
    firstName: string;
    lastName: string;
}
interface DepartmentInfo {
    _id: string;
    name: string;
}

interface AppointmentCreateRequest {
    patient: string;
    doctor: string;
    department: string;
    date: string;
    time?:string;
    status?:string;
    assignedTo?: string;
    confirmedBy?: string;
}

interface AppointmentUpdateRequest {
    patient?: string;
    doctor?: string;
    department?: string;
    date?: string;
    status?: "pending" | "confirmed" | "rescheduled" | "canceled";
}

interface GetAppointmentsParams {
  page?: number;
  limit?: number;
  search?: string;
}

interface GetAppointmentsResponse {
  appointments: Appointment[];
  totalAppointments: number;
  currentPage: number;
  totalPages: number;
}

export const appointmentApi = createApi({
  reducerPath: "appointmentApi",
  baseQuery: fetchBaseQuery({
    baseUrl: `${BASE_URL}/api/`,
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as any).auth.token;
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  tagTypes: ['Appointment'],
  endpoints: (builder) => ({
    getAppointments: builder.query<GetAppointmentsResponse, GetAppointmentsParams>({
        query: (params) => {  // Take the whole params object
            const { page , limit , search } = params || {};  // Safely destructure
            let url = `appointments?page=${page}&limit=${limit}`;
            if (search) {
              url += `&search=${search}`;
            }
            return url;
          },
       providesTags: (result) =>
         result?.appointments
            ? [
                ...result.appointments.map(({ _id }) => ({ type: 'Appointment' as const, id: _id })),
                { type: 'Appointment', id: 'LIST' },
              ]
            : [{ type: 'Appointment', id: 'LIST' }],
    }),
    createAppointment: builder.mutation<Appointment, AppointmentCreateRequest>({
      query: (appointmentData) => ({
        url: "appointments",
        method: "POST",
        body: appointmentData,
      }),
      invalidatesTags: [{ type: 'Appointment', id: 'LIST' }],
    }),
    updateAppointment: builder.mutation<Appointment, { id: string; data: AppointmentUpdateRequest }>({
      query: ({ id, data }) => ({
        url: `appointments/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Appointment', id: arg.id }],
    }),
    deleteAppointment: builder.mutation<void, string>({
      query: (id) => ({
        url: `appointments/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Appointment', id: arg }],
    }),
    getAppointmentById: builder.query<Appointment, string>({
      query: (id) => `appointments/${id}`,
      providesTags: (result, error, id) => [{ type: 'Appointment', id }],
    }),
  }),
});

export const {
  useGetAppointmentsQuery,
  useCreateAppointmentMutation,
  useUpdateAppointmentMutation,
  useDeleteAppointmentMutation,
  useGetAppointmentByIdQuery,
} = appointmentApi;

===== File: /src/services/auth/authSlice.ts =====
import { createSlice } from "@reduxjs/toolkit";
import type { AuthState, User } from "./types";
import { authApi } from "./authSliceAPI"; // Updated import path

const initialState: AuthState = {
  user: null,
  token: null,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    logout: (state) => {
       state.user = null;
       state.token = null;
   },
},
  extraReducers: (builder) => {
    builder.addMatcher(
      authApi.endpoints.login.matchFulfilled,
      (state, { payload }) => {
        console.log("payload:", payload)
        state.token = payload.token;
        state.user = payload.user;
      }
    );
    builder.addMatcher(
      authApi.endpoints.register.matchFulfilled,
      (state, { payload }) => {
      }
    );
    builder.addMatcher(
      authApi.endpoints.logout.matchFulfilled, 
      (state, { payload }) => {
			state.token = null;
			state.user = null;
			return state;
		});
  },
});

export const { logout } = authSlice.actions;
export default authSlice.reducer;

===== File: /src/services/auth/authSliceAPI.ts =====
// src/services/auth/authSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import type {
  UserResponse,
  LoginRequest,
  RegisterRequest,
  RegisterResponse,
  User
} from "./types";
import { BASE_URL } from "@/constants/constants";

export const authApi = createApi({
  reducerPath: 'authApi',
  baseQuery: fetchBaseQuery({
    baseUrl: `${BASE_URL}/api/`,
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as any).auth.token;
      console.log("token-authapi::", token)
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
    credentials: "include",
  }),
  endpoints: (builder) => ({
    login: builder.mutation<UserResponse, LoginRequest>({
      query: (credentials) => ({
        url: "auth/login",
        method: "POST",
        body: credentials,
      }),
    }),
    register: builder.mutation<RegisterResponse, RegisterRequest>({
      query: (info) => ({
        url: "auth/register",
        method: "POST",
        body: info,
      }),
    }),
        getProfile: builder.query<User, void>({   
            query: () => ({
                url: 'auth/profile',
                method: 'GET',
            }),
        }),
        resetPassword: builder.mutation<void, { currentPassword: string; newPassword: string }>({
          query: (body) => ({
              url: 'auth/reset-password',
              method: 'POST',
              body,
          }),
        }),
    logout: builder.mutation<void, void>({
        query: () => ({
            url: 'auth/logout', // Backend route URL for logout
            method: 'POST', // or DELETE, depending on your API
            // You might not need a body, but if you do:
            // body: {},
        }),
    }),
        
  }),
});

export const {
  useLoginMutation,
  useRegisterMutation,
  useLogoutMutation,
  useGetProfileQuery,
  useResetPasswordMutation
} = authApi;

===== File: /src/services/auth/types.ts =====
export interface Patient {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dob: string;  // Date of Birth, assuming string representation
  address: string;
  gender: string;
  userType: "Patient"; // ENUM
  isActive: boolean;
  role?: { _id: string; name: string }; 
  medicalRecords: any[];  // Or define a type for medical records if known
  createdAt: string;
  updatedAt: string;
}

export interface Staff {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dob: string;  // Date of Birth, assuming string representation
  address: string;
  gender: string;
  userType: "Staff"; // ENUM
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  role?: {_id:string, name:string}; // Optional  
  department?: {_id:string, name:string}; // Optional - only for Staff
}

export type User = Patient | Staff

export interface AuthState {
  user: User | null;
  token: string | null;
}

export interface UserResponse {
  message: string;
  token: string;
  user: User; // Includes the full user object now
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
  dob: string;
  address: string;
  gender: string;
  userType: string;
  role?: string;
  department?: string;
}

export interface RegisterResponse {
  message: string;
  user: User; // Include the newly registered user
}


===== File: /src/services/department/departmentSliceAPI.ts =====
// src/services/department/departmentSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";

export interface Department {
  _id: string;
  name: string;
  description: string;
  createdAt: string;
  updatedAt: string;
}

export interface DepartmentCreateRequest {
  name: string;
  description: string;
}

export interface DepartmentUpdateRequest {
  name?: string;
  description?: string;
}

interface GetDepartmentsParams {
  page?: number;  // Make page optional
  limit?: number;  // Make limit optional
  search?: string;
}

interface GetDepartmentsResponse {
   departments: Department[], 
   totalDepartments: number, 
   currentPage: number, 
   totalPages:number 
  }

export const departmentApi = createApi({
  reducerPath: "departmentApi",
  baseQuery: fetchBaseQuery({
    baseUrl: `${BASE_URL}/api/`,
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as any).auth.token;
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
    credentials: "include",
  }),
  tagTypes: ['Department'],
  endpoints: (builder) => ({
    getDepartments: builder.query<GetDepartmentsResponse, GetDepartmentsParams>({
      query: (params) => {  // Take the whole params object
        const { page , limit , search } = params || {};  // Safely destructure
        let url = `departments?page=${page}&limit=${limit}`;
        if (search) {
          url += `&search=${search}`;
        }
        return url;
      },
      providesTags: (result) =>
        result?.departments
          ? [
            ...result.departments.map(({ _id }) => ({ type: 'Department' as const, id: _id })),
            { type: 'Department', id: 'LIST' },
          ]
          : [{ type: 'Department', id: 'LIST' }],
    }),
    createDepartment: builder.mutation<Department, DepartmentCreateRequest>({
      query: (departmentData) => ({
        url: "departments",
        method: "POST",
        body: departmentData,
      }),
      invalidatesTags: [{ type: 'Department', id: 'LIST' }],
    }),
    updateDepartment: builder.mutation<Department, { id: string; data: DepartmentUpdateRequest }>({
      query: ({ id, data }) => ({
        url: `departments/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Department', id: arg.id }],
    }),
    deleteDepartment: builder.mutation<void, string>({
      query: (id) => ({
        url: `departments/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Department', id: arg }],
    }),
    getDepartmentById: builder.query<Department, string>({
      query: (id) => `departments/${id}`,
      providesTags: (result, error, id) => [{ type: 'Department', id }],
    }),
  }),
});

export const {
  useGetDepartmentsQuery,
  useCreateDepartmentMutation,
  useUpdateDepartmentMutation,
  useDeleteDepartmentMutation,
  useGetDepartmentByIdQuery,
} = departmentApi;

===== File: /src/services/medicalRecord/medicalRecordSliceAPI.ts =====
// src/services/medicalRecord/medicalRecordSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";

export interface MedicalRecord {
  _id: string;
  patient: PatientInfo;
  doctor: StaffInfo;
  diagnosis: string;
  treatment: string;
  medications: string[];
  notes: string;
  visitDate: string; //ISO Date String
  createdAt: string;
  updatedAt: string;
}
interface PatientInfo {
    _id: string;
    firstName: string;
    lastName: string;
}
interface StaffInfo {
    _id: string;
    firstName: string;
    lastName: string;
}

export interface MedicalRecordCreateRequest {
  patient: string;
  diagnosis: string;
  treatment: string;
  medications: string[];
  notes: string;
  visitDate: string; //ISO Date String
}

interface MedicalRecordUpdateRequest {
  patient?: string;
  doctor?: string;
  diagnosis?: string;
  treatment?: string;
  medications?: string[];
  notes?: string;
  visitDate?: string; //ISO Date String
}

interface GetMedicalRecordsParams {
  page?: number;
  limit?: number;
  search?: string;
}

interface GetMedicalRecordsResponse {
  records: MedicalRecord[];
  totalRecords: number;
  currentPage: number;
  totalPages: number;
}

interface MedicalSummaryResponse {
  summary: string;
}

export const medicalRecordApi = createApi({
  reducerPath: "medicalRecordApi",
  baseQuery: fetchBaseQuery({
    baseUrl: `${BASE_URL}/api/`,
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as any).auth.token;
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  tagTypes: ['MedicalRecord'],
  endpoints: (builder) => ({
    getMedicalRecords: builder.query<GetMedicalRecordsResponse, GetMedicalRecordsParams>({
        query: (params) => {  // Take the whole params object
            const { page , limit , search } = params || {};  // Safely destructure
            let url = `medical-records?page=${page}&limit=${limit}`;
            if (search) {
              url += `&search=${search}`;
            }
            return url;
          },
         providesTags: (result) =>
            result?.records
              ? [
                ...result.records.map(({ _id }) => ({ type: 'MedicalRecord' as const, id: _id })),
                { type: 'MedicalRecord', id: 'LIST' },
                 ]
               : [{ type: 'MedicalRecord', id: 'LIST' }],
    }),
    createMedicalRecord: builder.mutation<MedicalRecord, MedicalRecordCreateRequest>({
      query: (recordData) => ({
        url: "medical-records",
        method: "POST",
        body: recordData,
      }),
      invalidatesTags: [{ type: 'MedicalRecord', id: 'LIST' }],
    }),
    updateMedicalRecord: builder.mutation<MedicalRecord, { id: string; data: MedicalRecordUpdateRequest }>({
      query: ({ id, data }) => ({
        url: `medical-records/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'MedicalRecord', id: arg.id }],
    }),
    deleteMedicalRecord: builder.mutation<void, string>({
      query: (id) => ({
        url: `medical-records/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'MedicalRecord', id: arg }],
    }),
    getMedicalRecordById: builder.query<MedicalRecord, string>({
      query: (id) => `medical-records/${id}`,
      providesTags: (result, error, id) => [{ type: 'MedicalRecord', id }],
    }),
    getMedicalSummary: builder.query<MedicalSummaryResponse, string>({
      query: (patientId) => `medical-records/${patientId}/summary`,
  }),
  }),
});

export const {
  useGetMedicalRecordsQuery,
  useCreateMedicalRecordMutation,
  useUpdateMedicalRecordMutation,
  useDeleteMedicalRecordMutation,
  useGetMedicalRecordByIdQuery,
  useGetMedicalSummaryQuery
} = medicalRecordApi;

===== File: /src/services/notification/notificationSliceAPI.ts =====
// src/services/notification/notificationSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";

// Define the Notification interface (match your backend model)
export interface Notification {
    _id: string;
    user: string;  
    message: string;
    type: "appointment" | "medical_record" | "reminder" | "system" | "shift";
    priority: "urgent" | "warning" | "info";
    isRead: boolean;
    createdAt: string;
    updatedAt: string;
}

interface GetNotificationsParams {
    page?: number;
    limit?: number;
    search?: string;
    type?: string;  
    priority?: string;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
    read?: boolean
}

interface GetNotificationsResponse {
    success: boolean;
    notifications: Notification[];
    totalNotifications: number;
    currentPage: number;
    totalPages: number;
}

interface MarkNotificationAsReadResponse {
    message: string;
    notification: Notification;
}

interface MarkAllNotificationsAsReadResponse {
    message: string;
}

export const notificationApi = createApi({
    reducerPath: "notificationApi",
    baseQuery: fetchBaseQuery({
        baseUrl: `${BASE_URL}/api/`,
        prepareHeaders: (headers, { getState }) => {
            const token = (getState() as any).auth.token;
            if (token) {
                headers.set("Authorization", `Bearer ${token}`);
            }
            return headers;
        },
    }),
    tagTypes: ['Notification'],
    endpoints: (builder) => ({
        getMyNotifications: builder.query<GetNotificationsResponse, GetNotificationsParams>({
            query: (params) => {
                const { page, limit, search, type, priority, sortBy, sortOrder, read } = params || {};
                let url = `notifications?page=${page}&limit=${limit}`;
                if (search) url += `&search=${search}`;
                if (type) url += `&type=${type}`;
                if (priority) url += `&priority=${priority}`;
                if (sortBy) url += `&sortBy=${sortBy}`;
                if (sortOrder) url += `&sortOrder=${sortOrder}`;
                if (read !== undefined) url += `&read=${read} ` 
                return url;
            },
            providesTags: (result) =>
                result?.notifications
                    ? [
                        ...result.notifications.map(({ _id }) => ({ type: 'Notification' as const, id: _id })),
                        { type: 'Notification', id: 'LIST' },
                    ]
                    : [{ type: 'Notification', id: 'LIST' }],
        }),

        markMyNotificationAsRead: builder.mutation<MarkNotificationAsReadResponse, string>({
            query: (id) => ({
                url: `notifications/${id}/read`,
                method: 'PUT',
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Notification', id: arg }],
        }),

        markAllMyNotificationsAsRead: builder.mutation<MarkAllNotificationsAsReadResponse, void>({
            query: () => ({
                url: `notifications/read/all`,
                method: 'PUT',
            }),
            invalidatesTags: [{ type: 'Notification', id: 'LIST' }],
        }),
    }),
});

export const {
    useGetMyNotificationsQuery,
    useMarkMyNotificationAsReadMutation,
    useMarkAllMyNotificationsAsReadMutation,
} = notificationApi;

===== File: /src/services/patient/patientSliceAPI.ts =====
// src/services/patient/patientSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";
import type { Patient, PatientCreateRequest, PatientUpdateRequest, GetPatientsResponse, GetPatientsParams } from "./types";

export const patientApi = createApi({
    reducerPath: "patientApi",  
    baseQuery: fetchBaseQuery({
        baseUrl: `${BASE_URL}/api/`,
        prepareHeaders: (headers, { getState }) => {
            const token = (getState() as any).auth.token; // Adjust path as needed
            if (token) {
                headers.set("Authorization", `Bearer ${token}`);
            }
            return headers;
        },
        credentials: "include",
    }),
    tagTypes: ['Patient'],
    endpoints: (builder) => ({
        getPatients: builder.query<GetPatientsResponse, GetPatientsParams>({
            query: (params) => {  // Take the whole params object
                const { page , limit , search } = params || {};  // Safely destructure
                let url = `patients?page=${page}&limit=${limit}`;
                if (search) {
                    url += `&search=${search}`;
                }
                return url;
            },
            providesTags: (result) => { // Add type annotation here
              console.log("RES::", result)
              return result?.patients
                 ? [
                   ...result.patients.map(({ _id }) => ({ type: 'Patient' as const, id: _id })),
                   { type: 'Patient', id: 'LIST' },
                  ]
                : [{ type: 'Patient', id: 'LIST' }];
            },
        }),
        createPatient: builder.mutation<Patient, PatientCreateRequest>({
            query: (patientData) => ({
                url: "patients",
                method: "POST",
                body: patientData,
            }),
            invalidatesTags: [{ type: 'Patient', id: 'LIST' }],
        }),
        updatePatient: builder.mutation<Patient, { id: string; data: PatientUpdateRequest }>({
            query: ({ id, data }) => ({
                url: `patients/${id}`,
                method: "PUT",
                body: data,
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Patient', id: arg.id }],
        }),
        deletePatient: builder.mutation<void, string>({
            query: (id) => ({
                url: `patients/${id}`,
                method: "DELETE",
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Patient', id: arg }],
        }),
        getPatientById: builder.query<Patient, string>({
            query: (id) => `patients/${id}`,
            providesTags: (result, error, id) => [{ type: 'Patient', id }],
        }),
    }),
});

export const {
    useGetPatientsQuery,
    useCreatePatientMutation,
    useUpdatePatientMutation,
    useDeletePatientMutation,
    useGetPatientByIdQuery,
} = patientApi;



===== File: /src/services/patient/types.ts =====
// src/services/patient/types.ts
export interface Patient {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dob: string;  
  address: string;
  gender: string;
  userType: "Patient";
  role: { _id: string; name: string };  
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface PatientCreateRequest {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dob: string;
  address: string;
  gender: string;
}

export interface PatientUpdateRequest {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  dob?: string;
  address?: string;
  gender?: string;
}

export interface GetPatientsParams {
  page?: number;
  limit?: number;
  search?: string;
}

export interface GetPatientsResponse {
   patients: Patient[], 
   totalPatients: number, 
   currentPage: number, 
   totalPages:number 
  }


===== File: /src/services/permission/permissionSliceAPI.ts =====
// src/services/role/permissionSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";

export interface Permission {
    _id: string;
    action: string;
    description: string;
}

interface PermissionCreateRequest {
    action: string;
    description: string;
}

interface PermissionUpdateRequest {
    action?: string;
    description?: string;
}

interface GetPermissionsParams {
    page?: number;
    limit?: number;
    search?: string;
}
interface GetPermissionsResponse { permissions: Permission[], total: number, currentPage: number, limit:number }


export const permissionApi = createApi({
    reducerPath: "permissionApi",
    baseQuery: fetchBaseQuery({
        baseUrl: `${BASE_URL}/api/`,
        prepareHeaders: (headers, { getState }) => {
            const token = (getState() as any).auth.token;
            if (token) {
                headers.set("Authorization", `Bearer ${token}`);
            }
            return headers;
        },
        credentials: "include",
    }),
    tagTypes: ['Permission'],
    endpoints: (builder) => ({
        getPermissions: builder.query<GetPermissionsResponse, GetPermissionsParams>({
            query: (params) => {  // Take the whole params object
                const { page, limit , search } = params || {};  // Safely destructure
                let url = `permissions?page=${page}&limit=${limit}`;
                if (search) {
                    url += `&search=${search}`;
                }
                return url;
            },
            providesTags: (result) =>
                result?.permissions
                    ? [
                        ...result.permissions.map(({ _id }) => ({ type: 'Permission' as const, id: _id })),
                        { type: 'Permission', id: 'LIST' },
                    ]
                    : [{ type: 'Permission', id: 'LIST' }],
        }),
        createPermission: builder.mutation<Permission, PermissionCreateRequest>({
            query: (permissionData) => ({
                url: "permissions",
                method: "POST",
                body: permissionData,
            }),
            invalidatesTags: [{ type: 'Permission', id: 'LIST' }],
        }),
        updatePermission: builder.mutation<Permission, { id: string; data: PermissionUpdateRequest }>({
            query: ({ id, data }) => ({
                url: `permissions/${id}`,
                method: "PUT",
                body: data,
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Permission', id: arg.id }],
        }),
        deletePermission: builder.mutation<void, string>({
            query: (id) => ({
                url: `permissions/${id}`,
                method: "DELETE",
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Permission', id: arg }],
        }),
        getPermissionById: builder.query<Permission, string>({
            query: (id) => `permissions/${id}`,
            providesTags: (result, error, id) => [{ type: 'Permission', id }],
        }),
    }),
});

export const {
    useGetPermissionsQuery,
    useCreatePermissionMutation,
    useUpdatePermissionMutation,
    useDeletePermissionMutation,
    useGetPermissionByIdQuery,
} = permissionApi;

===== File: /src/services/role/roleSliceAPI.ts =====
// src/services/role/roleSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants"; // Adjust path as needed
import {   Permission } from '@/services/permission/permissionSliceAPI';

export interface Role {
    _id: string;
    name: string;
    permissions: Permission[];   
}

interface RoleCreateRequest {
    name: string;
    permissions: string[]; // Array of permission IDs
}

interface RoleUpdateRequest {
    name?: string;
    permissions?: string[]; // Array of permission IDs
}

interface GetRolesParams {
    page?: number;  // Make page optional
    limit?: number;  // Make limit optional
    search?: string;
}

interface GetRolesResponse { 
    roles: Role[], 
    totalRoles: number, 
    currentPage: number, 
    totalPages:number }

export const roleApi = createApi({
    reducerPath: "roleApi",
    baseQuery: fetchBaseQuery({
        baseUrl: `${BASE_URL}/api/`,
        prepareHeaders: (headers, { getState }) => {
            const token = (getState() as any).auth.token;
            if (token) {
                headers.set("Authorization", `Bearer ${token}`);
            }
            return headers;
        },
        credentials: "include",
    }),
    tagTypes: ['Role', 'Permission'], // Add tag types
    endpoints: (builder) => ({
        getRoles: builder.query<GetRolesResponse, GetRolesParams>({
            query: (params) => {  // Take the whole params object
                const { page , limit , search } = params || {};  // Safely destructure
                let url = `roles?page=${page}&limit=${limit}`;
                if (search) {
                    url += `&search=${search}`;
                }
                return url;
            },
             providesTags: (result) =>
              result?.roles
               ? [
                 ...result.roles.map(({ _id }) => ({ type: 'Role' as const, id: _id })),
                  { type: 'Role', id: 'LIST' },
                  ]
               : [{ type: 'Role', id: 'LIST' }],
        }),
        
        createRole: builder.mutation<Role, RoleCreateRequest>({
            query: (roleData) => ({
                url: "roles",
                method: "POST",
                body: roleData,
            }),
            invalidatesTags: [{ type: 'Role', id: 'LIST' }],
        }),
        updateRole: builder.mutation<Role, { id: string; data: RoleUpdateRequest }>({
            query: ({ id, data }) => ({
                url: `roles/${id}`,
                method: "PUT",
                body: data,
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Role', id: arg.id }],
        }),
        deleteRole: builder.mutation<void, string>({
            query: (id) => ({
                url: `roles/${id}`,
                method: "DELETE",
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Role', id: arg }],
        }),
        getRoleById: builder.query<Role, string>({   
            query: (id) => `roles/${id}`,
            providesTags: (result, error, id) => [{ type: 'Role', id }],
        }),
    }),
});

export const {
    useGetRolesQuery,   
    useCreateRoleMutation,
    useUpdateRoleMutation,
    useDeleteRoleMutation,
  useGetRoleByIdQuery,
} = roleApi;

===== File: /src/services/shift/shiftSliceAPI.ts =====
// src/services/shift/shiftSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";

export interface Shift {
  _id: string;
  staff: StaffInfo; //  StaffInfo
  department: DepartmentInfo; // DepartmentInfo
  date: string; // ISO Date String
  startTime: string; // e.g., "08:00 AM"
  endTime: string;   // e.g., "04:00 PM"
  type: "morning" | "evening" | "night";
  status: "scheduled" | "completed" | "cancelled";
  createdAt: string;
  updatedAt: string;
}
interface StaffInfo {
    _id: string;
    firstName: string;
    lastName: string;
}
interface DepartmentInfo {
    _id: string;
    name: string;
}
export interface ShiftCreateRequest {
  staff: string; // Staff ID
  department: string; // Department ID
  date: string; // ISO Date String
  startTime: string; // e.g., "08:00 AM"
  endTime: string;   // e.g., "04:00 PM"
  type: "morning" | "evening" | "night";
}

interface ShiftUpdateRequest {
  date?: string;
  startTime?: string;
  endTime?: string;
  type?: "morning" | "evening" | "night";
  status?: "scheduled" | "completed" | "cancelled";
}

interface GetShiftsParams {
  page?: number;
  limit?: number;
  search?: string;
  date?: string;
  staff?: string;
  department?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

interface GetShiftsResponse {
  shifts: Shift[];
  totalShifts: number;
  currentPage: number;
  totalPages: number;
}

export const shiftApi = createApi({
  reducerPath: "shiftApi",
  baseQuery: fetchBaseQuery({
    baseUrl: `${BASE_URL}/api/`,
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as any).auth.token;
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
    credentials: "include",
  }),
  tagTypes: ['Shift'],
  endpoints: (builder) => ({
    getShifts: builder.query<GetShiftsResponse, GetShiftsParams>({
      query: (params) => {
        const { page, limit, search, date, staff, department, sortBy, sortOrder } = params || {};
        let url = `shifts?page=${page}&limit=${limit}`;
        if (search) url += `&search=${search}`;
        if (date) url += `&date=${date}`;
        if (staff) url += `&staff=${staff}`;
        if (department) url += `&department=${department}`;
        if (sortBy) url += `&sortBy=${sortBy}`;
        if (sortOrder) url += `&sortOrder=${sortOrder}`;
        return url;
      },
      providesTags: (result) =>
        result?.shifts
          ? [
            ...result.shifts.map(({ _id }) => ({ type: 'Shift' as const, id: _id })),
            { type: 'Shift', id: 'LIST' },
          ]
          : [{ type: 'Shift', id: 'LIST' }],
    }),
          getMyShifts: builder.query<GetShiftsResponse, GetShiftsParams>({
            query: (params) => {
                const { page, limit, search, date, sortBy, sortOrder } = params || {};
                let url = `shifts/mine?page=${page}&limit=${limit}`;
                if (search) url += `&search=${search}`;
                if (date) url += `&date=${date}`;
                if (sortBy) url += `&sortBy=${sortBy}`;
                if (sortOrder) url += `&sortOrder=${sortOrder}`;
                return url;
            },
            providesTags: (result) =>
                result?.shifts
                    ? [
                        ...result.shifts.map(({ _id }) => ({ type: 'Shift' as const, id: _id })),
                        { type: 'Shift', id: 'LIST' },
                    ]
                    : [{ type: 'Shift', id: 'LIST' }],
        }),
    createShift: builder.mutation<Shift, ShiftCreateRequest>({
      query: (shiftData) => ({
        url: "shifts",
        method: "POST",
        body: shiftData,
      }),
      invalidatesTags: [{ type: 'Shift', id: 'LIST' }],
    }),
    updateShift: builder.mutation<Shift, { id: string; data: ShiftUpdateRequest }>({
      query: ({ id, data }) => ({
        url: `shifts/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Shift', id: arg.id }],
    }),
    deleteShift: builder.mutation<void, string>({
      query: (id) => ({
        url: `shifts/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Shift', id: arg }],
    }),
  }),
});

export const {
  useGetShiftsQuery,
  useCreateShiftMutation,
  useUpdateShiftMutation,
  useDeleteShiftMutation,
  useGetMyShiftsQuery, 
} = shiftApi;

===== File: /src/services/shift/types.ts =====
// src/services/shift/types.ts
export interface Shift {
    _id: string;
    staff: StaffInfo; //  StaffInfo
    department: DepartmentInfo; // DepartmentInfo
    date: string; // ISO Date String
    startTime: string; // e.g., "08:00 AM"
    endTime: string;   // e.g., "04:00 PM"
    type: "morning" | "evening" | "night";
    status: "scheduled" | "completed" | "cancelled";
    createdAt: string;
    updatedAt: string;
  }
  interface StaffInfo {
      _id: string;
      firstName: string;
      lastName: string;
  }
  interface DepartmentInfo {
      _id: string;
      name: string;
  }
  export interface ShiftCreateRequest {
    staff: string; // Staff ID
    department: string; // Department ID
    date: string; // ISO Date String
    startTime: string; // e.g., "08:00 AM"
    endTime: string;   // e.g., "04:00 PM"
    type: "morning" | "evening" | "night";
  }
  
  export interface ShiftUpdateRequest {
    date?: string;
    startTime?: string;
    endTime?: string;
    type?: "morning" | "evening" | "night";
    status?: "scheduled" | "completed" | "cancelled";
  }
  
  export interface GetShiftsParams {
    page?: number;
    limit?: number;
    search?: string;
    date?: string;
    staff?: string;
    department?: string;
  }
  
  export interface GetShiftsResponse {
    shifts: Shift[];
    totalShifts: number;
    currentPage: number;
    totalPages: number;
  }

===== File: /src/services/socket/socket.ts =====
// src/services/socket/socket.ts
import { BASE_URL } from '@/constants/constants';
import { io } from 'socket.io-client';
import logger from "@/utils/logger"

const URL = BASE_URL;

let socket;

export const getSocket = () => {
    if (!socket) {
        socket = io(URL, {
            autoConnect: true,
            auth: (cb) => {
                try {
                    if (typeof window !== 'undefined') {
                        // Attempt to get token from localStorage on the client-side
                        const token = localStorage.getItem('token'); // Or however you store your token

                        if (token) {
                            console.log("socket token::", token)
                           cb({ token: token });
                        }
                        else {
                              cb({ token: null });  // send null if it fails.
                        }

                    } else {
                        // Provide a default or empty token on the server side
                        cb({ token: null });
                    }

                } catch (error) {
                    logger.error(error)
                    cb({ token: null });
                }
            },
        });
    }
    return socket;
};

===== File: /src/services/staff/staffSliceAPI.ts =====
// src/services/staff/staffSliceAPI.ts

import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import type { Staff, StaffCreateRequest, StaffUpdateRequest, GetStaffResponse, GetStaffParams } from "./types"; // Import your Staff types
import { BASE_URL } from "@/constants/constants"; // Adjust path as needed

export const staffApi = createApi({
  reducerPath: "staffApi",
  baseQuery: fetchBaseQuery({
    baseUrl: `${BASE_URL}/api/`,
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as any).auth.token; // Adjust path as needed
      console.log("token-staffapi::", token)
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
    credentials: "include",
  }),
  tagTypes: ['Staff'], // Define a tag type for invalidation
  endpoints: (builder) => ({
    getStaff: builder.query<GetStaffResponse, GetStaffParams>({  // Modified return type
      query: (params) => {  // Take the whole params object
        const { page, limit, search, department } = params || {};  // Safely destructure
        let url = `staff?page=${page}&limit=${limit}`;
        if (search) {
            url += `&search=${search}`;
        }
        if (department) {
          url += `&department=${department}`;
      }
        return url;
    },
      providesTags: (result) =>
        result?.staff // Check if result and result.staff exist before accessing
          ? [
              ...result.staff.map(({ _id }) => ({ type: 'Staff' as const, id: _id })),
              { type: 'Staff', id: 'LIST' },
            ]
          : [{ type: 'Staff', id: 'LIST' }],
    }),
    createStaff: builder.mutation<Staff, StaffCreateRequest>({
      query: (staffData) => ({
        url: "staff",
        method: "POST",
        body: staffData,
      }),
      invalidatesTags: [{ type: 'Staff', id: 'LIST' }],
    }),
    updateStaff: builder.mutation<Staff, { id: string; data: StaffUpdateRequest }>({
      query: ({ id, data }) => ({
        url: `staff/${id}`,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Staff', id: arg.id }],
    }),
    deleteStaff: builder.mutation<void, string>({
      query: (id) => ({
        url: `staff/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Staff', id: arg }],
    }),
    getStaffById: builder.query<Staff, string>({
      query: (id) => `staff/${id}`,
      providesTags: (result, error, id) => [{ type: 'Staff', id }],
    }),

  }),
});

export const {
  useGetStaffQuery,
  useCreateStaffMutation,
  useUpdateStaffMutation,
  useDeleteStaffMutation,
  useGetStaffByIdQuery,
} = staffApi;



===== File: /src/services/staff/types.ts =====
// src/services/staff/types.ts
export interface Staff {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dob: string;
  address: string;
  gender: string;
  userType: "Staff";
  isActive: boolean;
  role: { _id: string; name: string };  
  department: { _id: string; name: string };  
  createdAt: string;
  updatedAt: string;
}
  
  export interface StaffCreateRequest {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    dob: string;
    address: string;
    gender: string;
    role: string;
    department: string;
  }
  
  export interface StaffUpdateRequest {
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    dob?: string;
    address?: string;
    gender?: string;
    role?: string;
    department?: string;
    isActive?: boolean;
  }

export  interface GetStaffParams {  
    page?: number;
    limit?: number;
    search?: string;  
    department?: string;
}
export interface GetStaffResponse { 
  staff: Staff[], 
  totalStaff: number, 
  currentPage: number, 
  totalPages:number
}


===== File: /src/services/task/taskSliceAPI.ts =====
// src/services/task/taskSliceAPI.ts
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BASE_URL } from "@/constants/constants";

// Define the Task interface
export interface Task {
    _id: string;
    title: string;
    description: string;
    assignedTo: {
        _id: string;
        firstName?:string;
        lastName?: string;
    }
    type: "appointment" | "lab_test" | "medical_record" | "discharge" | "prescription";
    status: "pending" | "in_progress" | "completed";
    priority: "low" | "medium" | "high";
    createdAt: string;
    createdBy: {
        _id: string;
        firstName?:string;
        lastName?: string;
    }
}

// Define the request and response types
export interface TaskCreateRequest {
    title: string;
    assignedTo?: string;
    type: "appointment" | "lab_test" | "medical_record" | "discharge" | "prescription";
    priority: "low" | "medium" | "high";
}

interface TaskUpdateRequest {
    title?: string;
    description?: string;
    assignedTo?: string;
    status?: "pending" | "in_progress" | "completed";
    priority?: "low" | "medium" | "high";
}

interface GetTasksParams {
    page?: number;
    limit?: number;
    search?: string;
    status?: "pending" | "in_progress" | "completed";
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
}

interface GetTasksResponse {
    success: boolean;
    tasks: Task[];
    totalTasks: number;
    currentPage: number;
    totalPages: number;
}

interface CompleteTaskResponse {
    success: boolean;
    message: string;
    task: Task;
}

interface GetMyTasksParams {
    page?: number;
    limit?: number;
    search?: string;
    status?: "pending" | "in_progress" | "completed";
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
}

export const taskApi = createApi({
    reducerPath: "taskApi",
    baseQuery: fetchBaseQuery({
        baseUrl: `${BASE_URL}/api/`,
        prepareHeaders: (headers, { getState }) => {
            const token = (getState() as any).auth.token;
            if (token) {
                headers.set("Authorization", `Bearer ${token}`);
            }
            return headers;
        },
        credentials: "include",
    }),
    tagTypes: ['Task'],
    endpoints: (builder) => ({
        getTasks: builder.query<GetTasksResponse, GetTasksParams>({
            query: (params) => {
                const { page, limit, search, status, sortBy, sortOrder } = params || {};
                let url = `tasks?page=${page}&limit=${limit}`;
                if (search) url += `&search=${search}`;
                if (status) url += `&status=${status}`;
                if (sortBy) url += `&sortBy=${sortBy}`;
                if (sortOrder) url += `&sortOrder=${sortOrder}`;
                return url;
            },
            providesTags: (result) =>
                result?.tasks
                    ? [
                        ...result.tasks.map(({ _id }) => ({ type: 'Task' as const, id: _id })),
                        { type: 'Task', id: 'LIST' },
                    ]
                    : [{ type: 'Task', id: 'LIST' }],
        }),
        createTask: builder.mutation<Task, TaskCreateRequest>({
            query: (taskData) => ({
                url: "tasks",
                method: "POST",
                body: taskData,
            }),
            invalidatesTags: [{ type: 'Task', id: 'LIST' }],
        }),
        updateTask: builder.mutation<Task, { id: string; data: TaskUpdateRequest }>({
            query: ({ id, data }) => ({
                url: `tasks/${id}`,
                method: "PUT",
                body: data,
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Task', id: arg.id }],
        }),
        deleteTask: builder.mutation<void, string>({
            query: (id) => ({
                url: `tasks/${id}`,
                method: "DELETE",
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Task', id: arg }],
        }),
        getTaskById: builder.query<Task, string>({
            query: (id) => `tasks/${id}`,
            providesTags: (result, error, id) => [{ type: 'Task', id }],
        }),

        completeTask: builder.mutation<CompleteTaskResponse, string>({
            query: (id) => ({
                url: `tasks/${id}/complete`,
                method: "PUT",
            }),
            invalidatesTags: (result, error, arg) => [{ type: 'Task', id: arg }],
        }),

         getMyTasks: builder.query<GetTasksResponse, GetMyTasksParams>({
            query: (params) => {
                const { page, limit, search, status, sortBy, sortOrder } = params || {};
                let url = `tasks/my?page=${page}&limit=${limit}`;
                if (search) url += `&search=${search}`;
                if (status) url += `&status=${status}`;
                if (sortBy) url += `&sortBy=${sortBy}`;
                if (sortOrder) url += `&sortOrder=${sortOrder}`;
                return url;
            },
            providesTags: (result) =>
                result?.tasks
                    ? [
                        ...result.tasks.map(({ _id }) => ({ type: 'Task' as const, id: _id })),
                        { type: 'Task', id: 'LIST' },
                    ]
                    : [{ type: 'Task', id: 'LIST' }],
        }),
    }),
});

export const {
    useGetTasksQuery,
    useCreateTaskMutation,
    useUpdateTaskMutation,
    useDeleteTaskMutation,
    useGetTaskByIdQuery,
    useCompleteTaskMutation,
    useGetMyTasksQuery,
} = taskApi;

===== File: /src/store/store.ts =====
// src/store/store.ts
import { configureStore } from "@reduxjs/toolkit";
import { authApi } from "@/services/auth/authSliceAPI";
import authReducer from "@/services/auth/authSlice";
import { staffApi } from "@/services/staff/staffSliceAPI";
import { roleApi } from "@/services/role/roleSliceAPI";
import { departmentApi } from "@/services/department/departmentSliceAPI";
import { patientApi } from "@/services/patient/patientSliceAPI";
import { permissionApi } from "@/services/permission/permissionSliceAPI";
import { appointmentApi } from "@/services/appointment/appointmentSliceAPI"; 
import { medicalRecordApi } from "@/services/medicalRecord/medicalRecordSliceAPI"; 
import { shiftApi } from "@/services/shift/shiftSliceAPI"; 
import { taskApi } from "@/services/task/taskSliceAPI";
import { notificationApi } from "@/services/notification/notificationSliceAPI"; 
import { useSelector, useDispatch, TypedUseSelectorHook } from "react-redux";
import { setupListeners } from "@reduxjs/toolkit/query";
import storage from 'redux-persist/lib/storage';
import { persistReducer, persistStore } from 'redux-persist';

const persistAuthConfig = {
    key: 'auth',
    storage,
};

const persistedAuthReducer = persistReducer(persistAuthConfig, authReducer);

const store = configureStore({
    reducer: {
        [authApi.reducerPath]: authApi.reducer,
        [staffApi.reducerPath]: staffApi.reducer,
        [roleApi.reducerPath]: roleApi.reducer,
        [departmentApi.reducerPath]: departmentApi.reducer,
        [patientApi.reducerPath]: patientApi.reducer,
        [permissionApi.reducerPath]: permissionApi.reducer,
        [appointmentApi.reducerPath]: appointmentApi.reducer,  
        [medicalRecordApi.reducerPath]: medicalRecordApi.reducer,
        [shiftApi.reducerPath]: shiftApi.reducer,   
        [taskApi.reducerPath]: taskApi.reducer,
        [notificationApi.reducerPath]: notificationApi.reducer,
        auth: persistedAuthReducer,
    },
    middleware: (getDefaultMiddleware) => {
        return getDefaultMiddleware({
            serializableCheck: false,
        }).concat(
            authApi.middleware,
            staffApi.middleware,
            roleApi.middleware,
            departmentApi.middleware,
            patientApi.middleware,
            permissionApi.middleware,
            appointmentApi.middleware,    
            medicalRecordApi.middleware,
            shiftApi.middleware,
            taskApi.middleware,
            notificationApi.middleware,      
        );
    },
});

export const persistor = persistStore(store);
setupListeners(store.dispatch);

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
export const useAppDispatch = () => useDispatch<AppDispatch>();

export default store;